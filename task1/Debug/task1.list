
task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a600  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800a898  0800a898  0000b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa74  0800aa74  0000ba74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa7c  0800aa7c  0000ba7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aa80  0800aa80  0000ba80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800aa84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800aa94  0000c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800aaf4  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  240000d0  0800ab54  0000c0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000894  0800ab54  0000c894  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9bd  00000000  00000000  0000c0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003158  00000000  00000000  0002aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001134  00000000  00000000  0002f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038a76  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d66b  00000000  00000000  00068daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016ac55  00000000  00000000  00086415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f106a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f28  00000000  00000000  001f10b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001f6fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a880 	.word	0x0800a880

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800a880 	.word	0x0800a880

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b96a 	b.w	80005d4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	460c      	mov	r4, r1
 8000320:	2b00      	cmp	r3, #0
 8000322:	d14e      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000324:	4694      	mov	ip, r2
 8000326:	458c      	cmp	ip, r1
 8000328:	4686      	mov	lr, r0
 800032a:	fab2 f282 	clz	r2, r2
 800032e:	d962      	bls.n	80003f6 <__udivmoddi4+0xde>
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0320 	rsb	r3, r2, #32
 8000336:	4091      	lsls	r1, r2
 8000338:	fa20 f303 	lsr.w	r3, r0, r3
 800033c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000340:	4319      	orrs	r1, r3
 8000342:	fa00 fe02 	lsl.w	lr, r0, r2
 8000346:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034a:	fa1f f68c 	uxth.w	r6, ip
 800034e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	fb07 1114 	mls	r1, r7, r4, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb04 f106 	mul.w	r1, r4, r6
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f104 30ff 	add.w	r0, r4, #4294967295
 800036e:	f080 8112 	bcs.w	8000596 <__udivmoddi4+0x27e>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 810f 	bls.w	8000596 <__udivmoddi4+0x27e>
 8000378:	3c02      	subs	r4, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb1 f0f7 	udiv	r0, r1, r7
 8000386:	fb07 1110 	mls	r1, r7, r0, r1
 800038a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038e:	fb00 f606 	mul.w	r6, r0, r6
 8000392:	429e      	cmp	r6, r3
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x94>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 31ff 	add.w	r1, r0, #4294967295
 800039e:	f080 80fc 	bcs.w	800059a <__udivmoddi4+0x282>
 80003a2:	429e      	cmp	r6, r3
 80003a4:	f240 80f9 	bls.w	800059a <__udivmoddi4+0x282>
 80003a8:	4463      	add	r3, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	1b9b      	subs	r3, r3, r6
 80003ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11d      	cbz	r5, 80003be <__udivmoddi4+0xa6>
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	e9c5 3200 	strd	r3, r2, [r5]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d905      	bls.n	80003d2 <__udivmoddi4+0xba>
 80003c6:	b10d      	cbz	r5, 80003cc <__udivmoddi4+0xb4>
 80003c8:	e9c5 0100 	strd	r0, r1, [r5]
 80003cc:	2100      	movs	r1, #0
 80003ce:	4608      	mov	r0, r1
 80003d0:	e7f5      	b.n	80003be <__udivmoddi4+0xa6>
 80003d2:	fab3 f183 	clz	r1, r3
 80003d6:	2900      	cmp	r1, #0
 80003d8:	d146      	bne.n	8000468 <__udivmoddi4+0x150>
 80003da:	42a3      	cmp	r3, r4
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xcc>
 80003de:	4290      	cmp	r0, r2
 80003e0:	f0c0 80f0 	bcc.w	80005c4 <__udivmoddi4+0x2ac>
 80003e4:	1a86      	subs	r6, r0, r2
 80003e6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d0e6      	beq.n	80003be <__udivmoddi4+0xa6>
 80003f0:	e9c5 6300 	strd	r6, r3, [r5]
 80003f4:	e7e3      	b.n	80003be <__udivmoddi4+0xa6>
 80003f6:	2a00      	cmp	r2, #0
 80003f8:	f040 8090 	bne.w	800051c <__udivmoddi4+0x204>
 80003fc:	eba1 040c 	sub.w	r4, r1, ip
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa1f f78c 	uxth.w	r7, ip
 8000408:	2101      	movs	r1, #1
 800040a:	fbb4 f6f8 	udiv	r6, r4, r8
 800040e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000412:	fb08 4416 	mls	r4, r8, r6, r4
 8000416:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041a:	fb07 f006 	mul.w	r0, r7, r6
 800041e:	4298      	cmp	r0, r3
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x11c>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 34ff 	add.w	r4, r6, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x11a>
 800042c:	4298      	cmp	r0, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 8000432:	4626      	mov	r6, r4
 8000434:	1a1c      	subs	r4, r3, r0
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb4 f0f8 	udiv	r0, r4, r8
 800043e:	fb08 4410 	mls	r4, r8, r0, r4
 8000442:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000446:	fb00 f707 	mul.w	r7, r0, r7
 800044a:	429f      	cmp	r7, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x148>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 34ff 	add.w	r4, r0, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x146>
 8000458:	429f      	cmp	r7, r3
 800045a:	f200 80b0 	bhi.w	80005be <__udivmoddi4+0x2a6>
 800045e:	4620      	mov	r0, r4
 8000460:	1bdb      	subs	r3, r3, r7
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	e7a5      	b.n	80003b4 <__udivmoddi4+0x9c>
 8000468:	f1c1 0620 	rsb	r6, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 f706 	lsr.w	r7, r2, r6
 8000472:	431f      	orrs	r7, r3
 8000474:	fa20 fc06 	lsr.w	ip, r0, r6
 8000478:	fa04 f301 	lsl.w	r3, r4, r1
 800047c:	ea43 030c 	orr.w	r3, r3, ip
 8000480:	40f4      	lsrs	r4, r6
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	0c38      	lsrs	r0, r7, #16
 8000488:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800048c:	fbb4 fef0 	udiv	lr, r4, r0
 8000490:	fa1f fc87 	uxth.w	ip, r7
 8000494:	fb00 441e 	mls	r4, r0, lr, r4
 8000498:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049c:	fb0e f90c 	mul.w	r9, lr, ip
 80004a0:	45a1      	cmp	r9, r4
 80004a2:	fa02 f201 	lsl.w	r2, r2, r1
 80004a6:	d90a      	bls.n	80004be <__udivmoddi4+0x1a6>
 80004a8:	193c      	adds	r4, r7, r4
 80004aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ae:	f080 8084 	bcs.w	80005ba <__udivmoddi4+0x2a2>
 80004b2:	45a1      	cmp	r9, r4
 80004b4:	f240 8081 	bls.w	80005ba <__udivmoddi4+0x2a2>
 80004b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004bc:	443c      	add	r4, r7
 80004be:	eba4 0409 	sub.w	r4, r4, r9
 80004c2:	fa1f f983 	uxth.w	r9, r3
 80004c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ca:	fb00 4413 	mls	r4, r0, r3, r4
 80004ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x1d2>
 80004da:	193c      	adds	r4, r7, r4
 80004dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e0:	d267      	bcs.n	80005b2 <__udivmoddi4+0x29a>
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	d965      	bls.n	80005b2 <__udivmoddi4+0x29a>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ee:	fba0 9302 	umull	r9, r3, r0, r2
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	429c      	cmp	r4, r3
 80004f8:	46ce      	mov	lr, r9
 80004fa:	469c      	mov	ip, r3
 80004fc:	d351      	bcc.n	80005a2 <__udivmoddi4+0x28a>
 80004fe:	d04e      	beq.n	800059e <__udivmoddi4+0x286>
 8000500:	b155      	cbz	r5, 8000518 <__udivmoddi4+0x200>
 8000502:	ebb8 030e 	subs.w	r3, r8, lr
 8000506:	eb64 040c 	sbc.w	r4, r4, ip
 800050a:	fa04 f606 	lsl.w	r6, r4, r6
 800050e:	40cb      	lsrs	r3, r1
 8000510:	431e      	orrs	r6, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	e9c5 6400 	strd	r6, r4, [r5]
 8000518:	2100      	movs	r1, #0
 800051a:	e750      	b.n	80003be <__udivmoddi4+0xa6>
 800051c:	f1c2 0320 	rsb	r3, r2, #32
 8000520:	fa20 f103 	lsr.w	r1, r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa24 f303 	lsr.w	r3, r4, r3
 800052c:	4094      	lsls	r4, r2
 800052e:	430c      	orrs	r4, r1
 8000530:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000534:	fa00 fe02 	lsl.w	lr, r0, r2
 8000538:	fa1f f78c 	uxth.w	r7, ip
 800053c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000540:	fb08 3110 	mls	r1, r8, r0, r3
 8000544:	0c23      	lsrs	r3, r4, #16
 8000546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054a:	fb00 f107 	mul.w	r1, r0, r7
 800054e:	4299      	cmp	r1, r3
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x24c>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 36ff 	add.w	r6, r0, #4294967295
 800055a:	d22c      	bcs.n	80005b6 <__udivmoddi4+0x29e>
 800055c:	4299      	cmp	r1, r3
 800055e:	d92a      	bls.n	80005b6 <__udivmoddi4+0x29e>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1a5b      	subs	r3, r3, r1
 8000566:	b2a4      	uxth	r4, r4
 8000568:	fbb3 f1f8 	udiv	r1, r3, r8
 800056c:	fb08 3311 	mls	r3, r8, r1, r3
 8000570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000574:	fb01 f307 	mul.w	r3, r1, r7
 8000578:	42a3      	cmp	r3, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x276>
 800057c:	eb1c 0404 	adds.w	r4, ip, r4
 8000580:	f101 36ff 	add.w	r6, r1, #4294967295
 8000584:	d213      	bcs.n	80005ae <__udivmoddi4+0x296>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d911      	bls.n	80005ae <__udivmoddi4+0x296>
 800058a:	3902      	subs	r1, #2
 800058c:	4464      	add	r4, ip
 800058e:	1ae4      	subs	r4, r4, r3
 8000590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000594:	e739      	b.n	800040a <__udivmoddi4+0xf2>
 8000596:	4604      	mov	r4, r0
 8000598:	e6f0      	b.n	800037c <__udivmoddi4+0x64>
 800059a:	4608      	mov	r0, r1
 800059c:	e706      	b.n	80003ac <__udivmoddi4+0x94>
 800059e:	45c8      	cmp	r8, r9
 80005a0:	d2ae      	bcs.n	8000500 <__udivmoddi4+0x1e8>
 80005a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80005a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80005aa:	3801      	subs	r0, #1
 80005ac:	e7a8      	b.n	8000500 <__udivmoddi4+0x1e8>
 80005ae:	4631      	mov	r1, r6
 80005b0:	e7ed      	b.n	800058e <__udivmoddi4+0x276>
 80005b2:	4603      	mov	r3, r0
 80005b4:	e799      	b.n	80004ea <__udivmoddi4+0x1d2>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e7d4      	b.n	8000564 <__udivmoddi4+0x24c>
 80005ba:	46d6      	mov	lr, sl
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1a6>
 80005be:	4463      	add	r3, ip
 80005c0:	3802      	subs	r0, #2
 80005c2:	e74d      	b.n	8000460 <__udivmoddi4+0x148>
 80005c4:	4606      	mov	r6, r0
 80005c6:	4623      	mov	r3, r4
 80005c8:	4608      	mov	r0, r1
 80005ca:	e70f      	b.n	80003ec <__udivmoddi4+0xd4>
 80005cc:	3e02      	subs	r6, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	e730      	b.n	8000434 <__udivmoddi4+0x11c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f9ed 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f8af 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb3d 	bl	8000c64 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ea:	f000 f92b 	bl	8000844 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 fabb 	bl	8000b68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f2:	f000 fb05 	bl	8000c00 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f6:	f000 f971 	bl	80008dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fa:	f000 f9f1 	bl	80009e0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fa67 	bl	8000ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 8000602:	2205      	movs	r2, #5
 8000604:	4947      	ldr	r1, [pc, #284]	@ (8000724 <main+0x14c>)
 8000606:	4848      	ldr	r0, [pc, #288]	@ (8000728 <main+0x150>)
 8000608:	f007 fab6 	bl	8007b78 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 menu();
 800060c:	f000 fc2a 	bl	8000e64 <menu>
		 wait(data);
 8000610:	4844      	ldr	r0, [pc, #272]	@ (8000724 <main+0x14c>)
 8000612:	f000 fc9d 	bl	8000f50 <wait>
		 HAL_Delay(50);
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f001 fa62 	bl	8001ae0 <HAL_Delay>

		 data_V[0]=data[0];
 800061c:	4b41      	ldr	r3, [pc, #260]	@ (8000724 <main+0x14c>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b42      	ldr	r3, [pc, #264]	@ (800072c <main+0x154>)
 8000622:	701a      	strb	r2, [r3, #0]
		 data_V[1]=data[1];
 8000624:	4b3f      	ldr	r3, [pc, #252]	@ (8000724 <main+0x14c>)
 8000626:	785a      	ldrb	r2, [r3, #1]
 8000628:	4b40      	ldr	r3, [pc, #256]	@ (800072c <main+0x154>)
 800062a:	705a      	strb	r2, [r3, #1]
		 data_V[2]=data[2];
 800062c:	4b3d      	ldr	r3, [pc, #244]	@ (8000724 <main+0x14c>)
 800062e:	789a      	ldrb	r2, [r3, #2]
 8000630:	4b3e      	ldr	r3, [pc, #248]	@ (800072c <main+0x154>)
 8000632:	709a      	strb	r2, [r3, #2]



		calculated_crc = crc16_ibm(data_V,sizeof(data_V));
 8000634:	2103      	movs	r1, #3
 8000636:	483d      	ldr	r0, [pc, #244]	@ (800072c <main+0x154>)
 8000638:	f000 fd6e 	bl	8001118 <crc16_ibm>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	4b3b      	ldr	r3, [pc, #236]	@ (8000730 <main+0x158>)
 8000642:	801a      	strh	r2, [r3, #0]

		 data_crc[0]=data[3];
 8000644:	4b37      	ldr	r3, [pc, #220]	@ (8000724 <main+0x14c>)
 8000646:	78da      	ldrb	r2, [r3, #3]
 8000648:	4b3a      	ldr	r3, [pc, #232]	@ (8000734 <main+0x15c>)
 800064a:	701a      	strb	r2, [r3, #0]
		 data_crc[1]=data[4];
 800064c:	4b35      	ldr	r3, [pc, #212]	@ (8000724 <main+0x14c>)
 800064e:	791a      	ldrb	r2, [r3, #4]
 8000650:	4b38      	ldr	r3, [pc, #224]	@ (8000734 <main+0x15c>)
 8000652:	705a      	strb	r2, [r3, #1]

		uint16_t combined = ((uint16_t)data_crc[0] << 8) | (uint16_t)data_crc[1];
 8000654:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <main+0x15c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	b21a      	sxth	r2, r3
 800065c:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <main+0x15c>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
		uint8_t data1=0x31;
 8000668:	2331      	movs	r3, #49	@ 0x31
 800066a:	757b      	strb	r3, [r7, #21]
		uint8_t data2=0x32;
 800066c:	2332      	movs	r3, #50	@ 0x32
 800066e:	753b      	strb	r3, [r7, #20]
		uint8_t data3=0x33;
 8000670:	2333      	movs	r3, #51	@ 0x33
 8000672:	74fb      	strb	r3, [r7, #19]
		uint8_t data4=0x30;
 8000674:	2330      	movs	r3, #48	@ 0x30
 8000676:	74bb      	strb	r3, [r7, #18]



		 if (combined == calculated_crc) {
 8000678:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <main+0x158>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	8afa      	ldrh	r2, [r7, #22]
 800067e:	429a      	cmp	r2, r3
 8000680:	d13c      	bne.n	80006fc <main+0x124>
		     const char* true_msg = "No error, selected action is being performed...\n";
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <main+0x160>)
 8000684:	60bb      	str	r3, [r7, #8]
		     HAL_UART_Transmit(&huart2, true_msg, strlen(true_msg), 1000);
 8000686:	68b8      	ldr	r0, [r7, #8]
 8000688:	f7ff fe26 	bl	80002d8 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	4824      	ldr	r0, [pc, #144]	@ (8000728 <main+0x150>)
 8000698:	f007 f9e0 	bl	8007a5c <HAL_UART_Transmit>

		      if(data[1]==data1){
 800069c:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <main+0x14c>)
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	7d7a      	ldrb	r2, [r7, #21]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d103      	bne.n	80006ae <main+0xd6>
		    	  function1(data_V);
 80006a6:	4821      	ldr	r0, [pc, #132]	@ (800072c <main+0x154>)
 80006a8:	f000 fc8a 	bl	8000fc0 <function1>
 80006ac:	e7ae      	b.n	800060c <main+0x34>
		        //fuction1();
		      }
		      else if(data[1]==data2){
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <main+0x14c>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	7d3a      	ldrb	r2, [r7, #20]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d102      	bne.n	80006be <main+0xe6>
		    	   function2();
 80006b8:	f000 fcf2 	bl	80010a0 <function2>
 80006bc:	e7a6      	b.n	800060c <main+0x34>
		    	  //function2();
		      }
		      else if(data[1]==data3){
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <main+0x14c>)
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	7cfa      	ldrb	r2, [r7, #19]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d103      	bne.n	80006d0 <main+0xf8>
		    	  function3(data);
 80006c8:	4816      	ldr	r0, [pc, #88]	@ (8000724 <main+0x14c>)
 80006ca:	f000 fcf3 	bl	80010b4 <function3>
 80006ce:	e79d      	b.n	800060c <main+0x34>
		    	  //function3();
		      }
		      else if(data[1]==data4){
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <main+0x14c>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	7cba      	ldrb	r2, [r7, #18]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d102      	bne.n	80006e0 <main+0x108>
		    	  function4();
 80006da:	f000 fd0b 	bl	80010f4 <function4>
 80006de:	e795      	b.n	800060c <main+0x34>

		    }
		      else{
		    	  const char* false_msg = "Please choose an option in the menu...\n";
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <main+0x164>)
 80006e2:	607b      	str	r3, [r7, #4]
		    	  HAL_UART_Transmit(&huart2, (uint8_t*)false_msg, strlen(false_msg), 1000);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff fdf7 	bl	80002d8 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <main+0x150>)
 80006f6:	f007 f9b1 	bl	8007a5c <HAL_UART_Transmit>
 80006fa:	e787      	b.n	800060c <main+0x34>
		      }


		 } else if (combined != calculated_crc) {
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <main+0x158>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	8afa      	ldrh	r2, [r7, #22]
 8000702:	429a      	cmp	r2, r3
 8000704:	d082      	beq.n	800060c <main+0x34>
		     const char* false_msg = "There is an error, check the entered data or crc value...\n";
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <main+0x168>)
 8000708:	60fb      	str	r3, [r7, #12]
		     HAL_UART_Transmit(&huart2, (uint8_t*)false_msg, strlen(false_msg), 1000);
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff fde4 	bl	80002d8 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	4803      	ldr	r0, [pc, #12]	@ (8000728 <main+0x150>)
 800071c:	f007 f99e 	bl	8007a5c <HAL_UART_Transmit>
  {
 8000720:	e774      	b.n	800060c <main+0x34>
 8000722:	bf00      	nop
 8000724:	24000878 	.word	0x24000878
 8000728:	2400026c 	.word	0x2400026c
 800072c:	24000880 	.word	0x24000880
 8000730:	24000886 	.word	0x24000886
 8000734:	24000884 	.word	0x24000884
 8000738:	0800a898 	.word	0x0800a898
 800073c:	0800a8cc 	.word	0x0800a8cc
 8000740:	0800a8f4 	.word	0x0800a8f4

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	@ 0x70
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074e:	224c      	movs	r2, #76	@ 0x4c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f00a f867 	bl	800a826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00a f861 	bl	800a826 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000764:	2002      	movs	r0, #2
 8000766:	f002 ffa1 	bl	80036ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b33      	ldr	r3, [pc, #204]	@ (800083c <SystemClock_Config+0xf8>)
 8000770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000772:	4a32      	ldr	r2, [pc, #200]	@ (800083c <SystemClock_Config+0xf8>)
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800077a:	4b30      	ldr	r3, [pc, #192]	@ (800083c <SystemClock_Config+0xf8>)
 800077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <SystemClock_Config+0xfc>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800078c:	4a2c      	ldr	r2, [pc, #176]	@ (8000840 <SystemClock_Config+0xfc>)
 800078e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <SystemClock_Config+0xfc>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a0:	bf00      	nop
 80007a2:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <SystemClock_Config+0xfc>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ae:	d1f8      	bne.n	80007a2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007b0:	2303      	movs	r3, #3
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007be:	2340      	movs	r3, #64	@ 0x40
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007ce:	2318      	movs	r3, #24
 80007d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007de:	230c      	movs	r3, #12
 80007e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 ffa6 	bl	8003740 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007fa:	f000 fcc9 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	233f      	movs	r3, #63	@ 0x3f
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fbe6 	bl	8003ff4 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800082e:	f000 fcaf 	bl	8001190 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3770      	adds	r7, #112	@ 0x70
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58000400 	.word	0x58000400
 8000840:	58024800 	.word	0x58024800

08000844 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000848:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <MX_ETH_Init+0x80>)
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <MX_ETH_Init+0x84>)
 800084c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_ETH_Init+0x88>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_ETH_Init+0x88>)
 8000856:	2280      	movs	r2, #128	@ 0x80
 8000858:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_ETH_Init+0x88>)
 800085c:	22e1      	movs	r2, #225	@ 0xe1
 800085e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_ETH_Init+0x88>)
 8000862:	2200      	movs	r2, #0
 8000864:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_ETH_Init+0x88>)
 8000868:	2200      	movs	r2, #0
 800086a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <MX_ETH_Init+0x88>)
 800086e:	2200      	movs	r2, #0
 8000870:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_ETH_Init+0x80>)
 8000874:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_ETH_Init+0x88>)
 8000876:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_ETH_Init+0x80>)
 800087a:	2201      	movs	r2, #1
 800087c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_ETH_Init+0x80>)
 8000880:	4a13      	ldr	r2, [pc, #76]	@ (80008d0 <MX_ETH_Init+0x8c>)
 8000882:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_ETH_Init+0x80>)
 8000886:	4a13      	ldr	r2, [pc, #76]	@ (80008d4 <MX_ETH_Init+0x90>)
 8000888:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_ETH_Init+0x80>)
 800088c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000890:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_ETH_Init+0x80>)
 8000894:	f001 ffdc 	bl	8002850 <HAL_ETH_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800089e:	f000 fc77 	bl	8001190 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008a2:	2238      	movs	r2, #56	@ 0x38
 80008a4:	2100      	movs	r1, #0
 80008a6:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_ETH_Init+0x94>)
 80008a8:	f009 ffbd 	bl	800a826 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_ETH_Init+0x94>)
 80008ae:	2221      	movs	r2, #33	@ 0x21
 80008b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_ETH_Init+0x94>)
 80008b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_ETH_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000124 	.word	0x24000124
 80008c8:	40028000 	.word	0x40028000
 80008cc:	24000888 	.word	0x24000888
 80008d0:	24000070 	.word	0x24000070
 80008d4:	24000010 	.word	0x24000010
 80008d8:	240000ec 	.word	0x240000ec

080008dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000916:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000918:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800091c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000924:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000926:	f242 720f 	movw	r2, #9999	@ 0x270f
 800092a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_TIM2_Init+0x100>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000938:	4828      	ldr	r0, [pc, #160]	@ (80009dc <MX_TIM2_Init+0x100>)
 800093a:	f005 fd13 	bl	8006364 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000944:	f000 fc24 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000952:	4619      	mov	r1, r3
 8000954:	4821      	ldr	r0, [pc, #132]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000956:	f006 fa25 	bl	8006da4 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000960:	f000 fc16 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000964:	481d      	ldr	r0, [pc, #116]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000966:	f005 fdfc 	bl	8006562 <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000970:	f000 fc0e 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4816      	ldr	r0, [pc, #88]	@ (80009dc <MX_TIM2_Init+0x100>)
 8000984:	f006 ff6e 	bl	8007864 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800098e:	f000 fbff 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	@ 0x60
 8000994:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_TIM2_Init+0x100>)
 80009aa:	f006 f8e7 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009b4:	f000 fbec 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_TIM2_Init+0x100>)
 80009c0:	f006 f8dc 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80009ca:	f000 fbe1 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <MX_TIM2_Init+0x100>)
 80009d0:	f000 fd12 	bl	80013f8 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	@ 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240001d4 	.word	0x240001d4

080009e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	@ 0x38
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a14:	4a2d      	ldr	r2, [pc, #180]	@ (8000acc <MX_TIM3_Init+0xec>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1280-1;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a1a:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8000a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000a26:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3a:	4823      	ldr	r0, [pc, #140]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a3c:	f005 fc92 	bl	8006364 <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a46:	f000 fba3 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a54:	4619      	mov	r1, r3
 8000a56:	481c      	ldr	r0, [pc, #112]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a58:	f006 f9a4 	bl	8006da4 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a62:	f000 fb95 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a66:	4818      	ldr	r0, [pc, #96]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a68:	f005 fd7b 	bl	8006562 <HAL_TIM_PWM_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a72:	f000 fb8d 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a86:	f006 feed 	bl	8007864 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a90:	f000 fb7e 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a94:	2360      	movs	r3, #96	@ 0x60
 8000a96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000aac:	f006 f866 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000ab6:	f000 fb6b 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aba:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <MX_TIM3_Init+0xe8>)
 8000abc:	f000 fc9c 	bl	80013f8 <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	@ 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000220 	.word	0x24000220
 8000acc:	40000400 	.word	0x40000400

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <MX_USART2_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000adc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b1a:	f006 ff4f 	bl	80079bc <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 fb34 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b2c:	f009 faa9 	bl	800a082 <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 fb2b 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b3e:	f009 fade 	bl	800a0fe <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 fb22 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f009 fa5f 	bl	800a010 <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 fb1a 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2400026c 	.word	0x2400026c
 8000b64:	40004400 	.word	0x40004400

08000b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b6e:	4a23      	ldr	r2, [pc, #140]	@ (8000bfc <MX_USART3_UART_Init+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bb2:	f006 ff03 	bl	80079bc <HAL_UART_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 fae8 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bc4:	f009 fa5d 	bl	800a082 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f000 fadf 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000bd6:	f009 fa92 	bl	800a0fe <HAL_UARTEx_SetRxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f000 fad6 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_USART3_UART_Init+0x90>)
 8000be6:	f009 fa13 	bl	800a010 <HAL_UARTEx_DisableFifoMode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 face 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000300 	.word	0x24000300
 8000bfc:	40004800 	.word	0x40004800

08000c00 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c06:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0c:	2209      	movs	r2, #9
 8000c0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c48:	f002 fbff 	bl	800344a <HAL_PCD_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c52:	f000 fa9d 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24000394 	.word	0x24000394
 8000c60:	40080000 	.word	0x40080000

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b6b      	ldr	r3, [pc, #428]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	4a69      	ldr	r2, [pc, #420]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8a:	4b67      	ldr	r3, [pc, #412]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c98:	4b63      	ldr	r3, [pc, #396]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	4a62      	ldr	r2, [pc, #392]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	4a5a      	ldr	r2, [pc, #360]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc6:	4b58      	ldr	r3, [pc, #352]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b54      	ldr	r3, [pc, #336]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	4a53      	ldr	r2, [pc, #332]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce4:	4b50      	ldr	r3, [pc, #320]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d10:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a44      	ldr	r2, [pc, #272]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <MX_GPIO_Init+0x1c4>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(denemeled_GPIO_Port, denemeled_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2104      	movs	r1, #4
 8000d50:	4836      	ldr	r0, [pc, #216]	@ (8000e2c <MX_GPIO_Init+0x1c8>)
 8000d52:	f002 fb61 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d5c:	4834      	ldr	r0, [pc, #208]	@ (8000e30 <MX_GPIO_Init+0x1cc>)
 8000d5e:	f002 fb5b 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d68:	4832      	ldr	r0, [pc, #200]	@ (8000e34 <MX_GPIO_Init+0x1d0>)
 8000d6a:	f002 fb55 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4831      	ldr	r0, [pc, #196]	@ (8000e38 <MX_GPIO_Init+0x1d4>)
 8000d74:	f002 fb50 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4827      	ldr	r0, [pc, #156]	@ (8000e2c <MX_GPIO_Init+0x1c8>)
 8000d8e:	f002 f993 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : denemeled_Pin */
  GPIO_InitStruct.Pin = denemeled_Pin;
 8000d92:	2304      	movs	r3, #4
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(denemeled_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4820      	ldr	r0, [pc, #128]	@ (8000e2c <MX_GPIO_Init+0x1c8>)
 8000daa:	f002 f985 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dae:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481a      	ldr	r0, [pc, #104]	@ (8000e30 <MX_GPIO_Init+0x1cc>)
 8000dc8:	f002 f976 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4813      	ldr	r0, [pc, #76]	@ (8000e34 <MX_GPIO_Init+0x1d0>)
 8000de6:	f002 f967 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <MX_GPIO_Init+0x1d8>)
 8000e00:	f002 f95a 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	@ (8000e38 <MX_GPIO_Init+0x1d4>)
 8000e1c:	f002 f94c 	bl	80030b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	@ 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58020400 	.word	0x58020400
 8000e34:	58020c00 	.word	0x58020c00
 8000e38:	58021000 	.word	0x58021000
 8000e3c:	58021800 	.word	0x58021800

08000e40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 8000e48:	2205      	movs	r2, #5
 8000e4a:	4904      	ldr	r1, [pc, #16]	@ (8000e5c <HAL_UART_RxCpltCallback+0x1c>)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <HAL_UART_RxCpltCallback+0x20>)
 8000e4e:	f006 fe93 	bl	8007b78 <HAL_UART_Receive_IT>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000878 	.word	0x24000878
 8000e60:	2400026c 	.word	0x2400026c

08000e64 <menu>:

void menu(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
	char* menu1="*********************************\n";
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <menu+0xc4>)
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
	char* menu2="Enter 3 number with hex code,\n";
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <menu+0xc8>)
 8000e70:	623b      	str	r3, [r7, #32]
	char* menu3="And enter the their crc number:,\n";
 8000e72:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <menu+0xcc>)
 8000e74:	61fb      	str	r3, [r7, #28]
	char* menu4="            Menu:\n";
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <menu+0xd0>)
 8000e78:	61bb      	str	r3, [r7, #24]
	char* menu5="1-Light the LED with the PWM\n";
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <menu+0xd4>)
 8000e7c:	617b      	str	r3, [r7, #20]
	char* menu6="---(1) red,(2) blue,(3) both\n";
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <menu+0xd8>)
 8000e80:	613b      	str	r3, [r7, #16]
	char* menu7="2-Light the led with the timer\n";
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <menu+0xdc>)
 8000e84:	60fb      	str	r3, [r7, #12]
	char* menu8="3-Drive servo-motor\n";
 8000e86:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <menu+0xe0>)
 8000e88:	60bb      	str	r3, [r7, #8]
	char* menu9="0-Stop the timer\n";
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f48 <menu+0xe4>)
 8000e8c:	607b      	str	r3, [r7, #4]
	char* menu10="*********************************\n";
 8000e8e:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <menu+0xc4>)
 8000e90:	603b      	str	r3, [r7, #0]


	HAL_UART_Transmit(&huart2, menu1, 35,1000);
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	2223      	movs	r2, #35	@ 0x23
 8000e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e9a:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <menu+0xe8>)
 8000e9c:	f006 fdde 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu2, 31,1000);
 8000ea0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea4:	221f      	movs	r2, #31
 8000ea6:	6a39      	ldr	r1, [r7, #32]
 8000ea8:	4828      	ldr	r0, [pc, #160]	@ (8000f4c <menu+0xe8>)
 8000eaa:	f006 fdd7 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu3,34,1000);
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	2222      	movs	r2, #34	@ 0x22
 8000eb4:	69f9      	ldr	r1, [r7, #28]
 8000eb6:	4825      	ldr	r0, [pc, #148]	@ (8000f4c <menu+0xe8>)
 8000eb8:	f006 fdd0 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu4,19,1000);
 8000ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec0:	2213      	movs	r2, #19
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	4821      	ldr	r0, [pc, #132]	@ (8000f4c <menu+0xe8>)
 8000ec6:	f006 fdc9 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu5,29 ,1000);
 8000eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ece:	221d      	movs	r2, #29
 8000ed0:	6979      	ldr	r1, [r7, #20]
 8000ed2:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <menu+0xe8>)
 8000ed4:	f006 fdc2 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu6,29 ,1000);
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	221d      	movs	r2, #29
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <menu+0xe8>)
 8000ee2:	f006 fdbb 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu7,31,1000);
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	221f      	movs	r2, #31
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <menu+0xe8>)
 8000ef0:	f006 fdb4 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu8,20,1000);
 8000ef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef8:	2214      	movs	r2, #20
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <menu+0xe8>)
 8000efe:	f006 fdad 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu9,18 ,1000);
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	2212      	movs	r2, #18
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4810      	ldr	r0, [pc, #64]	@ (8000f4c <menu+0xe8>)
 8000f0c:	f006 fda6 	bl	8007a5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, menu10,35 ,1000);
 8000f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f14:	2223      	movs	r2, #35	@ 0x23
 8000f16:	6839      	ldr	r1, [r7, #0]
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <menu+0xe8>)
 8000f1a:	f006 fd9f 	bl	8007a5c <HAL_UART_Transmit>

	return 1;
 8000f1e:	bf00      	nop

}
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	0800a930 	.word	0x0800a930
 8000f2c:	0800a954 	.word	0x0800a954
 8000f30:	0800a974 	.word	0x0800a974
 8000f34:	0800a998 	.word	0x0800a998
 8000f38:	0800a9ac 	.word	0x0800a9ac
 8000f3c:	0800a9cc 	.word	0x0800a9cc
 8000f40:	0800a9ec 	.word	0x0800a9ec
 8000f44:	0800aa0c 	.word	0x0800aa0c
 8000f48:	0800aa24 	.word	0x0800aa24
 8000f4c:	2400026c 	.word	0x2400026c

08000f50 <wait>:
void wait(uint8_t data[5]){
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	uint8_t exp[5];
	exp[0]= data[0];
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	723b      	strb	r3, [r7, #8]
	exp[1]= data[1];
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	727b      	strb	r3, [r7, #9]
	exp[2]= data[2];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	72bb      	strb	r3, [r7, #10]
	exp[3]= data[3];
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	78db      	ldrb	r3, [r3, #3]
 8000f6e:	72fb      	strb	r3, [r7, #11]
	exp[4]= data[4];
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	733b      	strb	r3, [r7, #12]
	while(data[0]==exp[0] && data[1]== exp[1] && data[2]==exp[2]&& data[3]==exp[3]&& data[4]==exp[4]){
 8000f76:	bf00      	nop
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	7a3b      	ldrb	r3, [r7, #8]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d118      	bne.n	8000fb4 <wait+0x64>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	7a7b      	ldrb	r3, [r7, #9]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d112      	bne.n	8000fb4 <wait+0x64>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3302      	adds	r3, #2
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d10c      	bne.n	8000fb4 <wait+0x64>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d106      	bne.n	8000fb4 <wait+0x64>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	7b3b      	ldrb	r3, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d0e2      	beq.n	8000f78 <wait+0x28>

	}
	return 1;
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
}
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <function1>:

void function1(uint8_t data[3]){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	uint8_t exp[3]={0x31 ,0x32 ,0x33};
 8000fc8:	4a25      	ldr	r2, [pc, #148]	@ (8001060 <function1+0xa0>)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	8019      	strh	r1, [r3, #0]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	0c12      	lsrs	r2, r2, #16
 8000fd8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4821      	ldr	r0, [pc, #132]	@ (8001064 <function1+0xa4>)
 8000fde:	f005 fc2f 	bl	8006840 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	481f      	ldr	r0, [pc, #124]	@ (8001064 <function1+0xa4>)
 8000fe6:	f005 fc2b 	bl	8006840 <HAL_TIM_PWM_Stop>

	if(data[2]==exp[0]){
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3302      	adds	r3, #2
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d108      	bne.n	8001008 <function1+0x48>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	481a      	ldr	r0, [pc, #104]	@ (8001064 <function1+0xa4>)
 8000ffa:	f005 fb13 	bl	8006624 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,5000);
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <function1+0xa4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(data[2]==exp[1]){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3302      	adds	r3, #2
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	429a      	cmp	r2, r3
 8001012:	d108      	bne.n	8001026 <function1+0x66>
	 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4813      	ldr	r0, [pc, #76]	@ (8001064 <function1+0xa4>)
 8001018:	f005 fb04 	bl	8006624 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,5000);
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <function1+0xa4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(data[2]==exp[2]){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3302      	adds	r3, #2
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	429a      	cmp	r2, r3
 8001030:	d112      	bne.n	8001058 <function1+0x98>
	 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001032:	2104      	movs	r1, #4
 8001034:	480b      	ldr	r0, [pc, #44]	@ (8001064 <function1+0xa4>)
 8001036:	f005 faf5 	bl	8006624 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,5000);
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <function1+0xa4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001042:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001044:	2100      	movs	r1, #0
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <function1+0xa4>)
 8001048:	f005 faec 	bl	8006624 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,5000);
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <function1+0xa4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001054:	635a      	str	r2, [r3, #52]	@ 0x34

	}

	return 1;
 8001056:	bf00      	nop
 8001058:	bf00      	nop
}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0800aa38 	.word	0x0800aa38
 8001064:	240001d4 	.word	0x240001d4

08001068 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001070:	2104      	movs	r1, #4
 8001072:	480a      	ldr	r0, [pc, #40]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001074:	f005 fad6 	bl	8006624 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,9000);
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001080:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001082:	2100      	movs	r1, #0
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001086:	f005 facd 	bl	8006624 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,9000);
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f242 3228 	movw	r2, #9000	@ 0x2328
 8001092:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	240001d4 	.word	0x240001d4

080010a0 <function2>:
void function2(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <function2+0x10>)
 80010a6:	f005 f9b5 	bl	8006414 <HAL_TIM_Base_Start_IT>
	return 1;
 80010aa:	bf00      	nop


}
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	240001d4 	.word	0x240001d4

080010b4 <function3>:
void function3(uint8_t data[5]){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010bc:	2100      	movs	r1, #0
 80010be:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <function3+0x3c>)
 80010c0:	f005 fab0 	bl	8006624 <HAL_TIM_PWM_Start>

	uint8_t exp=0x33;
 80010c4:	2333      	movs	r3, #51	@ 0x33
 80010c6:	72fb      	strb	r3, [r7, #11]

	for(int i =0; i<130;i++){
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e009      	b.n	80010e2 <function3+0x2e>

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,i);
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <function3+0x3c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(60);
 80010d6:	203c      	movs	r0, #60	@ 0x3c
 80010d8:	f000 fd02 	bl	8001ae0 <HAL_Delay>
	for(int i =0; i<130;i++){
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3301      	adds	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b81      	cmp	r3, #129	@ 0x81
 80010e6:	ddf2      	ble.n	80010ce <function3+0x1a>

	}


	return 1;
 80010e8:	bf00      	nop


}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24000220 	.word	0x24000220

080010f4 <function4>:

void function4(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0


	HAL_TIM_Base_Stop_IT(&htim2);
 80010f8:	4806      	ldr	r0, [pc, #24]	@ (8001114 <function4+0x20>)
 80010fa:	f005 fa03 	bl	8006504 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80010fe:	2100      	movs	r1, #0
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <function4+0x20>)
 8001102:	f005 fb9d 	bl	8006840 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001106:	2104      	movs	r1, #4
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <function4+0x20>)
 800110a:	f005 fb99 	bl	8006840 <HAL_TIM_PWM_Stop>

	return 1;
 800110e:	bf00      	nop
}
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	240001d4 	.word	0x240001d4

08001118 <crc16_ibm>:



uint16_t crc16_ibm(const uint8_t* data, uint16_t length) {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0x0000;  // Initial value
 8001124:	2300      	movs	r3, #0
 8001126:	81fb      	strh	r3, [r7, #14]
    uint16_t polynomial = 0x8005;  // CRC-16-IBM polynomial
 8001128:	f248 0305 	movw	r3, #32773	@ 0x8005
 800112c:	813b      	strh	r3, [r7, #8]

    for (uint16_t i = 0; i < length; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	81bb      	strh	r3, [r7, #12]
 8001132:	e022      	b.n	800117a <crc16_ibm+0x62>
        crc ^= (data[i]);  // XOR byte into low byte of crc
 8001134:	89bb      	ldrh	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	4053      	eors	r3, r2
 8001142:	81fb      	strh	r3, [r7, #14]

        for (uint8_t j = 0; j < 8; j++) {
 8001144:	2300      	movs	r3, #0
 8001146:	72fb      	strb	r3, [r7, #11]
 8001148:	e011      	b.n	800116e <crc16_ibm+0x56>
            if (crc & 0x0001) {
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <crc16_ibm+0x4a>
                crc = (crc >> 1) ^ polynomial;
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	893b      	ldrh	r3, [r7, #8]
 800115c:	4053      	eors	r3, r2
 800115e:	81fb      	strh	r3, [r7, #14]
 8001160:	e002      	b.n	8001168 <crc16_ibm+0x50>
            } else {
                crc = crc >> 1;
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	085b      	lsrs	r3, r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	3301      	adds	r3, #1
 800116c:	72fb      	strb	r3, [r7, #11]
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	2b07      	cmp	r3, #7
 8001172:	d9ea      	bls.n	800114a <crc16_ibm+0x32>
    for (uint16_t i = 0; i < length; i++) {
 8001174:	89bb      	ldrh	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	81bb      	strh	r3, [r7, #12]
 800117a:	89ba      	ldrh	r2, [r7, #12]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3d8      	bcc.n	8001134 <crc16_ibm+0x1c>
            }
        }
    }

    return crc;
 8001182:	89fb      	ldrh	r3, [r7, #14]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_MspInit+0x30>)
 80011a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a8:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x30>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x30>)
 80011b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	58024400 	.word	0x58024400

080011d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	@ 0x38
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a59      	ldr	r2, [pc, #356]	@ (8001354 <HAL_ETH_MspInit+0x184>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	f040 80ab 	bne.w	800134a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 80011f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011fa:	4a57      	ldr	r2, [pc, #348]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 80011fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001200:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001204:	4b54      	ldr	r3, [pc, #336]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800120a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001212:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001218:	4a4f      	ldr	r2, [pc, #316]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 800121a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001222:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001230:	4b49      	ldr	r3, [pc, #292]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001236:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001240:	4b45      	ldr	r3, [pc, #276]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001242:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	4a40      	ldr	r2, [pc, #256]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125e:	4b3e      	ldr	r3, [pc, #248]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b3a      	ldr	r3, [pc, #232]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001272:	4a39      	ldr	r2, [pc, #228]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127c:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	4a31      	ldr	r2, [pc, #196]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129a:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 80012b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_ETH_MspInit+0x188>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012c6:	2332      	movs	r3, #50	@ 0x32
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d6:	230b      	movs	r3, #11
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	481e      	ldr	r0, [pc, #120]	@ (800135c <HAL_ETH_MspInit+0x18c>)
 80012e2:	f001 fee9 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012e6:	2386      	movs	r3, #134	@ 0x86
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012f6:	230b      	movs	r3, #11
 80012f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4817      	ldr	r0, [pc, #92]	@ (8001360 <HAL_ETH_MspInit+0x190>)
 8001302:	f001 fed9 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001318:	230b      	movs	r3, #11
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4810      	ldr	r0, [pc, #64]	@ (8001364 <HAL_ETH_MspInit+0x194>)
 8001324:	f001 fec8 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001328:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133a:	230b      	movs	r3, #11
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <HAL_ETH_MspInit+0x198>)
 8001346:	f001 feb7 	bl	80030b8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	@ 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40028000 	.word	0x40028000
 8001358:	58024400 	.word	0x58024400
 800135c:	58020800 	.word	0x58020800
 8001360:	58020000 	.word	0x58020000
 8001364:	58020400 	.word	0x58020400
 8001368:	58021800 	.word	0x58021800

0800136c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800137c:	d117      	bne.n	80013ae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001384:	4a1a      	ldr	r2, [pc, #104]	@ (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	201c      	movs	r0, #28
 80013a2:	f000 fcbc 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a6:	201c      	movs	r0, #28
 80013a8:	f000 fcd3 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ac:	e01b      	b.n	80013e6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a10      	ldr	r2, [pc, #64]	@ (80013f4 <HAL_TIM_Base_MspInit+0x88>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d116      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013be:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_TIM_Base_MspInit+0x84>)
 80013ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201d      	movs	r0, #29
 80013dc:	f000 fc9f 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e0:	201d      	movs	r0, #29
 80013e2:	f000 fcb6 	bl	8001d52 <HAL_NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	58024400 	.word	0x58024400
 80013f4:	40000400 	.word	0x40000400

080013f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001418:	d13e      	bne.n	8001498 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001420:	4a31      	ldr	r2, [pc, #196]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142a:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143e:	4a2a      	ldr	r2, [pc, #168]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = led1_Pin;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	481e      	ldr	r0, [pc, #120]	@ (80014ec <HAL_TIM_MspPostInit+0xf4>)
 8001472:	f001 fe21 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = led2_Pin;
 8001476:	2308      	movs	r3, #8
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4817      	ldr	r0, [pc, #92]	@ (80014f0 <HAL_TIM_MspPostInit+0xf8>)
 8001492:	f001 fe11 	bl	80030b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001496:	e023      	b.n	80014e0 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <HAL_TIM_MspPostInit+0xfc>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d11e      	bne.n	80014e0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a8:	4a0f      	ldr	r2, [pc, #60]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b2:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_TIM_MspPostInit+0xf0>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = servo_Pin;
 80014c0:	2340      	movs	r3, #64	@ 0x40
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014d0:	2302      	movs	r3, #2
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	@ (80014ec <HAL_TIM_MspPostInit+0xf4>)
 80014dc:	f001 fdec 	bl	80030b8 <HAL_GPIO_Init>
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	@ 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020000 	.word	0x58020000
 80014f0:	58020400 	.word	0x58020400
 80014f4:	40000400 	.word	0x40000400

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0be      	sub	sp, #248	@ 0xf8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	22c0      	movs	r2, #192	@ 0xc0
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f009 f984 	bl	800a826 <memset>
  if(huart->Instance==USART2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a63      	ldr	r2, [pc, #396]	@ (80016b0 <HAL_UART_MspInit+0x1b8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d172      	bne.n	800160e <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001528:	f04f 0202 	mov.w	r2, #2
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f8e4 	bl	800470c <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800154a:	f7ff fe21 	bl	8001190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154e:	4b59      	ldr	r3, [pc, #356]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001554:	4a57      	ldr	r2, [pc, #348]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	4a50      	ldr	r2, [pc, #320]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800157c:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001590:	4a48      	ldr	r2, [pc, #288]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159a:	4b46      	ldr	r3, [pc, #280]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015a8:	2308      	movs	r3, #8
 80015aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c0:	2307      	movs	r3, #7
 80015c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015ca:	4619      	mov	r1, r3
 80015cc:	483a      	ldr	r0, [pc, #232]	@ (80016b8 <HAL_UART_MspInit+0x1c0>)
 80015ce:	f001 fd73 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015d2:	2320      	movs	r3, #32
 80015d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ea:	2307      	movs	r3, #7
 80015ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4831      	ldr	r0, [pc, #196]	@ (80016bc <HAL_UART_MspInit+0x1c4>)
 80015f8:	f001 fd5e 	bl	80030b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2026      	movs	r0, #38	@ 0x26
 8001602:	f000 fb8c 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001606:	2026      	movs	r0, #38	@ 0x26
 8001608:	f000 fba3 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800160c:	e04b      	b.n	80016a6 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2b      	ldr	r2, [pc, #172]	@ (80016c0 <HAL_UART_MspInit+0x1c8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d146      	bne.n	80016a6 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001618:	f04f 0202 	mov.w	r2, #2
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	4618      	mov	r0, r3
 8001630:	f003 f86c 	bl	800470c <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x146>
      Error_Handler();
 800163a:	f7ff fda9 	bl	8001190 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001644:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_UART_MspInit+0x1bc>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800167a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001694:	2307      	movs	r3, #7
 8001696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800169e:	4619      	mov	r1, r3
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <HAL_UART_MspInit+0x1c4>)
 80016a2:	f001 fd09 	bl	80030b8 <HAL_GPIO_Init>
}
 80016a6:	bf00      	nop
 80016a8:	37f8      	adds	r7, #248	@ 0xf8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40004400 	.word	0x40004400
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58020000 	.word	0x58020000
 80016bc:	58020c00 	.word	0x58020c00
 80016c0:	40004800 	.word	0x40004800

080016c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ba      	sub	sp, #232	@ 0xe8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	22c0      	movs	r2, #192	@ 0xc0
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f009 f89e 	bl	800a826 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a30      	ldr	r2, [pc, #192]	@ (80017b0 <HAL_PCD_MspInit+0xec>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d159      	bne.n	80017a8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001700:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fffd 	bl	800470c <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001718:	f7ff fd3a 	bl	8001190 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800171c:	f002 f800 	bl	8003720 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <HAL_PCD_MspInit+0xf0>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001726:	4a23      	ldr	r2, [pc, #140]	@ (80017b4 <HAL_PCD_MspInit+0xf0>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001730:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_PCD_MspInit+0xf0>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800173e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001758:	230a      	movs	r3, #10
 800175a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <HAL_PCD_MspInit+0xf4>)
 8001766:	f001 fca7 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <HAL_PCD_MspInit+0xf4>)
 8001786:	f001 fc97 	bl	80030b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_PCD_MspInit+0xf0>)
 800178c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001790:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_PCD_MspInit+0xf0>)
 8001792:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001796:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_PCD_MspInit+0xf0>)
 800179c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017a8:	bf00      	nop
 80017aa:	37e8      	adds	r7, #232	@ 0xe8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40080000 	.word	0x40080000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020000 	.word	0x58020000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <NMI_Handler+0x4>

080017c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <MemManage_Handler+0x4>

080017d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 f945 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <TIM2_IRQHandler+0x10>)
 8001822:	f005 f8a3 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	240001d4 	.word	0x240001d4

08001830 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <TIM3_IRQHandler+0x10>)
 8001836:	f005 f899 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	24000220 	.word	0x24000220

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <USART2_IRQHandler+0x10>)
 800184a:	f006 f9e1 	bl	8007c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2400026c 	.word	0x2400026c

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800185c:	4b37      	ldr	r3, [pc, #220]	@ (800193c <SystemInit+0xe4>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001862:	4a36      	ldr	r2, [pc, #216]	@ (800193c <SystemInit+0xe4>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <SystemInit+0xe8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	2b06      	cmp	r3, #6
 8001876:	d807      	bhi.n	8001888 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001878:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <SystemInit+0xe8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 030f 	bic.w	r3, r3, #15
 8001880:	4a2f      	ldr	r2, [pc, #188]	@ (8001940 <SystemInit+0xe8>)
 8001882:	f043 0307 	orr.w	r3, r3, #7
 8001886:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001888:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <SystemInit+0xec>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2d      	ldr	r2, [pc, #180]	@ (8001944 <SystemInit+0xec>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <SystemInit+0xec>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800189a:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <SystemInit+0xec>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4929      	ldr	r1, [pc, #164]	@ (8001944 <SystemInit+0xec>)
 80018a0:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <SystemInit+0xf0>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <SystemInit+0xe8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b2:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <SystemInit+0xe8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 030f 	bic.w	r3, r3, #15
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <SystemInit+0xe8>)
 80018bc:	f043 0307 	orr.w	r3, r3, #7
 80018c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <SystemInit+0xec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <SystemInit+0xec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <SystemInit+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <SystemInit+0xec>)
 80018d6:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <SystemInit+0xf4>)
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018da:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <SystemInit+0xec>)
 80018dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <SystemInit+0xf8>)
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018e0:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <SystemInit+0xec>)
 80018e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <SystemInit+0xfc>)
 80018e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018e6:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <SystemInit+0xec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <SystemInit+0xec>)
 80018ee:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <SystemInit+0xfc>)
 80018f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <SystemInit+0xec>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <SystemInit+0xec>)
 80018fa:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <SystemInit+0xfc>)
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <SystemInit+0xec>)
 8001900:	2200      	movs	r2, #0
 8001902:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <SystemInit+0xec>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <SystemInit+0xec>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800190e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <SystemInit+0xec>)
 8001912:	2200      	movs	r2, #0
 8001914:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <SystemInit+0x100>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <SystemInit+0x104>)
 800191c:	4013      	ands	r3, r2
 800191e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001922:	d202      	bcs.n	800192a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <SystemInit+0x108>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <SystemInit+0x10c>)
 800192c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001930:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	52002000 	.word	0x52002000
 8001944:	58024400 	.word	0x58024400
 8001948:	eaf6ed7f 	.word	0xeaf6ed7f
 800194c:	02020200 	.word	0x02020200
 8001950:	01ff0000 	.word	0x01ff0000
 8001954:	01010280 	.word	0x01010280
 8001958:	5c001000 	.word	0x5c001000
 800195c:	ffff0000 	.word	0xffff0000
 8001960:	51008108 	.word	0x51008108
 8001964:	52004000 	.word	0x52004000

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800196c:	f7ff ff74 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f008 ff4f 	bl	800a838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7fe fe1d 	bl	80005d8 <main>
  bx  lr
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019a8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80019ac:	0800aa84 	.word	0x0800aa84
  ldr r2, =_sbss
 80019b0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80019b4:	24000894 	.word	0x24000894

080019b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC3_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f000 f9a0 	bl	8001d08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c8:	f002 fcca 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_Init+0x68>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	4913      	ldr	r1, [pc, #76]	@ (8001a28 <HAL_Init+0x6c>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <HAL_Init+0x68>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <HAL_Init+0x6c>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <HAL_Init+0x70>)
 80019fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_Init+0x74>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f814 	bl	8001a34 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e002      	b.n	8001a1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a16:	f7ff fbc1 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58024400 	.word	0x58024400
 8001a28:	0800aa3c 	.word	0x0800aa3c
 8001a2c:	24000004 	.word	0x24000004
 8001a30:	24000000 	.word	0x24000000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_InitTick+0x60>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e021      	b.n	8001a8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_InitTick+0x64>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_InitTick+0x60>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f985 	bl	8001d6e <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f94f 	bl	8001d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <HAL_InitTick+0x68>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2400000c 	.word	0x2400000c
 8001a98:	24000000 	.word	0x24000000
 8001a9c:	24000008 	.word	0x24000008

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2400000c 	.word	0x2400000c
 8001ac4:	24000890 	.word	0x24000890

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	24000890 	.word	0x24000890

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2400000c 	.word	0x2400000c

08001b28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_GetREVID+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0c1b      	lsrs	r3, r3, #16
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	5c001000 	.word	0x5c001000

08001b40 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001b50:	4904      	ldr	r1, [pc, #16]	@ (8001b64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	58000400 	.word	0x58000400

08001b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	05fa0000 	.word	0x05fa0000

08001bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4907      	ldr	r1, [pc, #28]	@ (8001c04 <__NVIC_EnableIRQ+0x38>)
 8001be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	@ (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	@ (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd4:	d301      	bcc.n	8001cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00f      	b.n	8001cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <SysTick_Config+0x40>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f7ff ff8e 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <SysTick_Config+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf2:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <SysTick_Config+0x40>)
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	e000e010 	.word	0xe000e010

08001d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff29 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff40 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff90 	bl	8001c5c <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5f 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff33 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffa4 	bl	8001cc4 <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff fe9a 	bl	8001ac8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e2dc      	b.n	800235a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d008      	beq.n	8001dbe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2280      	movs	r2, #128	@ 0x80
 8001db0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e2cd      	b.n	800235a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a76      	ldr	r2, [pc, #472]	@ (8001f9c <HAL_DMA_Abort+0x214>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04a      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a74      	ldr	r2, [pc, #464]	@ (8001fa0 <HAL_DMA_Abort+0x218>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d045      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a73      	ldr	r2, [pc, #460]	@ (8001fa4 <HAL_DMA_Abort+0x21c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d040      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a71      	ldr	r2, [pc, #452]	@ (8001fa8 <HAL_DMA_Abort+0x220>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d03b      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a70      	ldr	r2, [pc, #448]	@ (8001fac <HAL_DMA_Abort+0x224>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d036      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb0 <HAL_DMA_Abort+0x228>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8001fb4 <HAL_DMA_Abort+0x22c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d02c      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6b      	ldr	r2, [pc, #428]	@ (8001fb8 <HAL_DMA_Abort+0x230>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d027      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6a      	ldr	r2, [pc, #424]	@ (8001fbc <HAL_DMA_Abort+0x234>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a68      	ldr	r2, [pc, #416]	@ (8001fc0 <HAL_DMA_Abort+0x238>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01d      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a67      	ldr	r2, [pc, #412]	@ (8001fc4 <HAL_DMA_Abort+0x23c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d018      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a65      	ldr	r2, [pc, #404]	@ (8001fc8 <HAL_DMA_Abort+0x240>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a64      	ldr	r2, [pc, #400]	@ (8001fcc <HAL_DMA_Abort+0x244>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a62      	ldr	r2, [pc, #392]	@ (8001fd0 <HAL_DMA_Abort+0x248>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a61      	ldr	r2, [pc, #388]	@ (8001fd4 <HAL_DMA_Abort+0x24c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Abort+0xd6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd8 <HAL_DMA_Abort+0x250>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Abort+0xda>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_DMA_Abort+0xdc>
 8001e62:	2300      	movs	r3, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 021e 	bic.w	r2, r2, #30
 8001e76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e00a      	b.n	8001ea6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 020e 	bic.w	r2, r2, #14
 8001e9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a3c      	ldr	r2, [pc, #240]	@ (8001f9c <HAL_DMA_Abort+0x214>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d072      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa0 <HAL_DMA_Abort+0x218>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d06d      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a39      	ldr	r2, [pc, #228]	@ (8001fa4 <HAL_DMA_Abort+0x21c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d068      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a37      	ldr	r2, [pc, #220]	@ (8001fa8 <HAL_DMA_Abort+0x220>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d063      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a36      	ldr	r2, [pc, #216]	@ (8001fac <HAL_DMA_Abort+0x224>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d05e      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_DMA_Abort+0x228>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d059      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a33      	ldr	r2, [pc, #204]	@ (8001fb4 <HAL_DMA_Abort+0x22c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d054      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a31      	ldr	r2, [pc, #196]	@ (8001fb8 <HAL_DMA_Abort+0x230>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d04f      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a30      	ldr	r2, [pc, #192]	@ (8001fbc <HAL_DMA_Abort+0x234>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04a      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <HAL_DMA_Abort+0x238>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d045      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc4 <HAL_DMA_Abort+0x23c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d040      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc8 <HAL_DMA_Abort+0x240>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d03b      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2a      	ldr	r2, [pc, #168]	@ (8001fcc <HAL_DMA_Abort+0x244>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d036      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a28      	ldr	r2, [pc, #160]	@ (8001fd0 <HAL_DMA_Abort+0x248>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d031      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <HAL_DMA_Abort+0x24c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d02c      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <HAL_DMA_Abort+0x250>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d027      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a24      	ldr	r2, [pc, #144]	@ (8001fdc <HAL_DMA_Abort+0x254>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a22      	ldr	r2, [pc, #136]	@ (8001fe0 <HAL_DMA_Abort+0x258>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01d      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_DMA_Abort+0x25c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d018      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <HAL_DMA_Abort+0x260>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1e      	ldr	r2, [pc, #120]	@ (8001fec <HAL_DMA_Abort+0x264>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <HAL_DMA_Abort+0x268>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff4 <HAL_DMA_Abort+0x26c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Abort+0x20e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_DMA_Abort+0x270>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d132      	bne.n	8001ffc <HAL_DMA_Abort+0x274>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e031      	b.n	8001ffe <HAL_DMA_Abort+0x276>
 8001f9a:	bf00      	nop
 8001f9c:	40020010 	.word	0x40020010
 8001fa0:	40020028 	.word	0x40020028
 8001fa4:	40020040 	.word	0x40020040
 8001fa8:	40020058 	.word	0x40020058
 8001fac:	40020070 	.word	0x40020070
 8001fb0:	40020088 	.word	0x40020088
 8001fb4:	400200a0 	.word	0x400200a0
 8001fb8:	400200b8 	.word	0x400200b8
 8001fbc:	40020410 	.word	0x40020410
 8001fc0:	40020428 	.word	0x40020428
 8001fc4:	40020440 	.word	0x40020440
 8001fc8:	40020458 	.word	0x40020458
 8001fcc:	40020470 	.word	0x40020470
 8001fd0:	40020488 	.word	0x40020488
 8001fd4:	400204a0 	.word	0x400204a0
 8001fd8:	400204b8 	.word	0x400204b8
 8001fdc:	58025408 	.word	0x58025408
 8001fe0:	5802541c 	.word	0x5802541c
 8001fe4:	58025430 	.word	0x58025430
 8001fe8:	58025444 	.word	0x58025444
 8001fec:	58025458 	.word	0x58025458
 8001ff0:	5802546c 	.word	0x5802546c
 8001ff4:	58025480 	.word	0x58025480
 8001ff8:	58025494 	.word	0x58025494
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002010:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6d      	ldr	r2, [pc, #436]	@ (80021cc <HAL_DMA_Abort+0x444>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04a      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6b      	ldr	r2, [pc, #428]	@ (80021d0 <HAL_DMA_Abort+0x448>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d045      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6a      	ldr	r2, [pc, #424]	@ (80021d4 <HAL_DMA_Abort+0x44c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d040      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a68      	ldr	r2, [pc, #416]	@ (80021d8 <HAL_DMA_Abort+0x450>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d03b      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a67      	ldr	r2, [pc, #412]	@ (80021dc <HAL_DMA_Abort+0x454>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d036      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a65      	ldr	r2, [pc, #404]	@ (80021e0 <HAL_DMA_Abort+0x458>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a64      	ldr	r2, [pc, #400]	@ (80021e4 <HAL_DMA_Abort+0x45c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d02c      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a62      	ldr	r2, [pc, #392]	@ (80021e8 <HAL_DMA_Abort+0x460>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d027      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a61      	ldr	r2, [pc, #388]	@ (80021ec <HAL_DMA_Abort+0x464>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5f      	ldr	r2, [pc, #380]	@ (80021f0 <HAL_DMA_Abort+0x468>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5e      	ldr	r2, [pc, #376]	@ (80021f4 <HAL_DMA_Abort+0x46c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5c      	ldr	r2, [pc, #368]	@ (80021f8 <HAL_DMA_Abort+0x470>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5b      	ldr	r2, [pc, #364]	@ (80021fc <HAL_DMA_Abort+0x474>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00e      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <HAL_DMA_Abort+0x478>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_DMA_Abort+0x47c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_DMA_Abort+0x32a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a56      	ldr	r2, [pc, #344]	@ (8002208 <HAL_DMA_Abort+0x480>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <HAL_DMA_Abort+0x33c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e007      	b.n	80020d4 <HAL_DMA_Abort+0x34c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80020d4:	e013      	b.n	80020fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d6:	f7ff fcf7 	bl	8001ac8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d90c      	bls.n	80020fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e12d      	b.n	800235a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1e5      	bne.n	80020d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2f      	ldr	r2, [pc, #188]	@ (80021cc <HAL_DMA_Abort+0x444>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d04a      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <HAL_DMA_Abort+0x448>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d045      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2c      	ldr	r2, [pc, #176]	@ (80021d4 <HAL_DMA_Abort+0x44c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d040      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <HAL_DMA_Abort+0x450>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d03b      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a29      	ldr	r2, [pc, #164]	@ (80021dc <HAL_DMA_Abort+0x454>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d036      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <HAL_DMA_Abort+0x458>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d031      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <HAL_DMA_Abort+0x45c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d02c      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <HAL_DMA_Abort+0x460>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d027      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <HAL_DMA_Abort+0x464>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d022      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_DMA_Abort+0x468>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <HAL_DMA_Abort+0x46c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d018      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_DMA_Abort+0x470>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_DMA_Abort+0x474>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00e      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_DMA_Abort+0x478>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <HAL_DMA_Abort+0x47c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_DMA_Abort+0x422>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_DMA_Abort+0x480>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_DMA_Abort+0x426>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_DMA_Abort+0x428>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02b      	beq.n	800220c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	223f      	movs	r2, #63	@ 0x3f
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	e02a      	b.n	8002222 <HAL_DMA_Abort+0x49a>
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2201      	movs	r2, #1
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a4f      	ldr	r2, [pc, #316]	@ (8002364 <HAL_DMA_Abort+0x5dc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d072      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4d      	ldr	r2, [pc, #308]	@ (8002368 <HAL_DMA_Abort+0x5e0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d06d      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4c      	ldr	r2, [pc, #304]	@ (800236c <HAL_DMA_Abort+0x5e4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d068      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4a      	ldr	r2, [pc, #296]	@ (8002370 <HAL_DMA_Abort+0x5e8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d063      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a49      	ldr	r2, [pc, #292]	@ (8002374 <HAL_DMA_Abort+0x5ec>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d05e      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a47      	ldr	r2, [pc, #284]	@ (8002378 <HAL_DMA_Abort+0x5f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d059      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a46      	ldr	r2, [pc, #280]	@ (800237c <HAL_DMA_Abort+0x5f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d054      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a44      	ldr	r2, [pc, #272]	@ (8002380 <HAL_DMA_Abort+0x5f8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d04f      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a43      	ldr	r2, [pc, #268]	@ (8002384 <HAL_DMA_Abort+0x5fc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d04a      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a41      	ldr	r2, [pc, #260]	@ (8002388 <HAL_DMA_Abort+0x600>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d045      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a40      	ldr	r2, [pc, #256]	@ (800238c <HAL_DMA_Abort+0x604>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d040      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3e      	ldr	r2, [pc, #248]	@ (8002390 <HAL_DMA_Abort+0x608>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d03b      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a3d      	ldr	r2, [pc, #244]	@ (8002394 <HAL_DMA_Abort+0x60c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d036      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002398 <HAL_DMA_Abort+0x610>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d031      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3a      	ldr	r2, [pc, #232]	@ (800239c <HAL_DMA_Abort+0x614>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d02c      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a38      	ldr	r2, [pc, #224]	@ (80023a0 <HAL_DMA_Abort+0x618>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d027      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a37      	ldr	r2, [pc, #220]	@ (80023a4 <HAL_DMA_Abort+0x61c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a35      	ldr	r2, [pc, #212]	@ (80023a8 <HAL_DMA_Abort+0x620>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01d      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a34      	ldr	r2, [pc, #208]	@ (80023ac <HAL_DMA_Abort+0x624>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d018      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a32      	ldr	r2, [pc, #200]	@ (80023b0 <HAL_DMA_Abort+0x628>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a31      	ldr	r2, [pc, #196]	@ (80023b4 <HAL_DMA_Abort+0x62c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00e      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2f      	ldr	r2, [pc, #188]	@ (80023b8 <HAL_DMA_Abort+0x630>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d009      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2e      	ldr	r2, [pc, #184]	@ (80023bc <HAL_DMA_Abort+0x634>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Abort+0x58a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2c      	ldr	r2, [pc, #176]	@ (80023c0 <HAL_DMA_Abort+0x638>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_DMA_Abort+0x58e>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_DMA_Abort+0x590>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002324:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800233c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002346:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40020010 	.word	0x40020010
 8002368:	40020028 	.word	0x40020028
 800236c:	40020040 	.word	0x40020040
 8002370:	40020058 	.word	0x40020058
 8002374:	40020070 	.word	0x40020070
 8002378:	40020088 	.word	0x40020088
 800237c:	400200a0 	.word	0x400200a0
 8002380:	400200b8 	.word	0x400200b8
 8002384:	40020410 	.word	0x40020410
 8002388:	40020428 	.word	0x40020428
 800238c:	40020440 	.word	0x40020440
 8002390:	40020458 	.word	0x40020458
 8002394:	40020470 	.word	0x40020470
 8002398:	40020488 	.word	0x40020488
 800239c:	400204a0 	.word	0x400204a0
 80023a0:	400204b8 	.word	0x400204b8
 80023a4:	58025408 	.word	0x58025408
 80023a8:	5802541c 	.word	0x5802541c
 80023ac:	58025430 	.word	0x58025430
 80023b0:	58025444 	.word	0x58025444
 80023b4:	58025458 	.word	0x58025458
 80023b8:	5802546c 	.word	0x5802546c
 80023bc:	58025480 	.word	0x58025480
 80023c0:	58025494 	.word	0x58025494

080023c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e237      	b.n	8002846 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e22c      	b.n	8002846 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002564 <HAL_DMA_Abort_IT+0x1a0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d04a      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002568 <HAL_DMA_Abort_IT+0x1a4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d045      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a59      	ldr	r2, [pc, #356]	@ (800256c <HAL_DMA_Abort_IT+0x1a8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d040      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a58      	ldr	r2, [pc, #352]	@ (8002570 <HAL_DMA_Abort_IT+0x1ac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d03b      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a56      	ldr	r2, [pc, #344]	@ (8002574 <HAL_DMA_Abort_IT+0x1b0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d036      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a55      	ldr	r2, [pc, #340]	@ (8002578 <HAL_DMA_Abort_IT+0x1b4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d031      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a53      	ldr	r2, [pc, #332]	@ (800257c <HAL_DMA_Abort_IT+0x1b8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d02c      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a52      	ldr	r2, [pc, #328]	@ (8002580 <HAL_DMA_Abort_IT+0x1bc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d027      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a50      	ldr	r2, [pc, #320]	@ (8002584 <HAL_DMA_Abort_IT+0x1c0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d022      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a4f      	ldr	r2, [pc, #316]	@ (8002588 <HAL_DMA_Abort_IT+0x1c4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d01d      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4d      	ldr	r2, [pc, #308]	@ (800258c <HAL_DMA_Abort_IT+0x1c8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d018      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4c      	ldr	r2, [pc, #304]	@ (8002590 <HAL_DMA_Abort_IT+0x1cc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4a      	ldr	r2, [pc, #296]	@ (8002594 <HAL_DMA_Abort_IT+0x1d0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a49      	ldr	r2, [pc, #292]	@ (8002598 <HAL_DMA_Abort_IT+0x1d4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a47      	ldr	r2, [pc, #284]	@ (800259c <HAL_DMA_Abort_IT+0x1d8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_DMA_Abort_IT+0xc8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a46      	ldr	r2, [pc, #280]	@ (80025a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_DMA_Abort_IT+0xcc>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_DMA_Abort_IT+0xce>
 8002490:	2300      	movs	r3, #0
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8086 	beq.w	80025a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2204      	movs	r2, #4
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002564 <HAL_DMA_Abort_IT+0x1a0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d04a      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002568 <HAL_DMA_Abort_IT+0x1a4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d045      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2c      	ldr	r2, [pc, #176]	@ (800256c <HAL_DMA_Abort_IT+0x1a8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d040      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002570 <HAL_DMA_Abort_IT+0x1ac>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d03b      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <HAL_DMA_Abort_IT+0x1b0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d036      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <HAL_DMA_Abort_IT+0x1b4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d031      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <HAL_DMA_Abort_IT+0x1b8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a25      	ldr	r2, [pc, #148]	@ (8002580 <HAL_DMA_Abort_IT+0x1bc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d027      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a23      	ldr	r2, [pc, #140]	@ (8002584 <HAL_DMA_Abort_IT+0x1c0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d022      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a22      	ldr	r2, [pc, #136]	@ (8002588 <HAL_DMA_Abort_IT+0x1c4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d01d      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a20      	ldr	r2, [pc, #128]	@ (800258c <HAL_DMA_Abort_IT+0x1c8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d018      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_DMA_Abort_IT+0x1cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d013      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	@ (8002594 <HAL_DMA_Abort_IT+0x1d0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00e      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_DMA_Abort_IT+0x1d4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_DMA_Abort_IT+0x1d8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_DMA_Abort_IT+0x17c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_DMA_Abort_IT+0x1dc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d108      	bne.n	8002552 <HAL_DMA_Abort_IT+0x18e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e178      	b.n	8002844 <HAL_DMA_Abort_IT+0x480>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e16f      	b.n	8002844 <HAL_DMA_Abort_IT+0x480>
 8002564:	40020010 	.word	0x40020010
 8002568:	40020028 	.word	0x40020028
 800256c:	40020040 	.word	0x40020040
 8002570:	40020058 	.word	0x40020058
 8002574:	40020070 	.word	0x40020070
 8002578:	40020088 	.word	0x40020088
 800257c:	400200a0 	.word	0x400200a0
 8002580:	400200b8 	.word	0x400200b8
 8002584:	40020410 	.word	0x40020410
 8002588:	40020428 	.word	0x40020428
 800258c:	40020440 	.word	0x40020440
 8002590:	40020458 	.word	0x40020458
 8002594:	40020470 	.word	0x40020470
 8002598:	40020488 	.word	0x40020488
 800259c:	400204a0 	.word	0x400204a0
 80025a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 020e 	bic.w	r2, r2, #14
 80025b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6c      	ldr	r2, [pc, #432]	@ (800276c <HAL_DMA_Abort_IT+0x3a8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002770 <HAL_DMA_Abort_IT+0x3ac>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a69      	ldr	r2, [pc, #420]	@ (8002774 <HAL_DMA_Abort_IT+0x3b0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a68      	ldr	r2, [pc, #416]	@ (8002778 <HAL_DMA_Abort_IT+0x3b4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a66      	ldr	r2, [pc, #408]	@ (800277c <HAL_DMA_Abort_IT+0x3b8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a65      	ldr	r2, [pc, #404]	@ (8002780 <HAL_DMA_Abort_IT+0x3bc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a63      	ldr	r2, [pc, #396]	@ (8002784 <HAL_DMA_Abort_IT+0x3c0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a62      	ldr	r2, [pc, #392]	@ (8002788 <HAL_DMA_Abort_IT+0x3c4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a60      	ldr	r2, [pc, #384]	@ (800278c <HAL_DMA_Abort_IT+0x3c8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5f      	ldr	r2, [pc, #380]	@ (8002790 <HAL_DMA_Abort_IT+0x3cc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_DMA_Abort_IT+0x3d0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <HAL_DMA_Abort_IT+0x3d4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5a      	ldr	r2, [pc, #360]	@ (800279c <HAL_DMA_Abort_IT+0x3d8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a59      	ldr	r2, [pc, #356]	@ (80027a0 <HAL_DMA_Abort_IT+0x3dc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_DMA_Abort_IT+0x3e0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0x290>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_DMA_Abort_IT+0x3e4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <HAL_DMA_Abort_IT+0x2a2>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e007      	b.n	8002676 <HAL_DMA_Abort_IT+0x2b2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3c      	ldr	r2, [pc, #240]	@ (800276c <HAL_DMA_Abort_IT+0x3a8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d072      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3a      	ldr	r2, [pc, #232]	@ (8002770 <HAL_DMA_Abort_IT+0x3ac>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d06d      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a39      	ldr	r2, [pc, #228]	@ (8002774 <HAL_DMA_Abort_IT+0x3b0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d068      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a37      	ldr	r2, [pc, #220]	@ (8002778 <HAL_DMA_Abort_IT+0x3b4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d063      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a36      	ldr	r2, [pc, #216]	@ (800277c <HAL_DMA_Abort_IT+0x3b8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d05e      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a34      	ldr	r2, [pc, #208]	@ (8002780 <HAL_DMA_Abort_IT+0x3bc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d059      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a33      	ldr	r2, [pc, #204]	@ (8002784 <HAL_DMA_Abort_IT+0x3c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d054      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a31      	ldr	r2, [pc, #196]	@ (8002788 <HAL_DMA_Abort_IT+0x3c4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d04f      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a30      	ldr	r2, [pc, #192]	@ (800278c <HAL_DMA_Abort_IT+0x3c8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d04a      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002790 <HAL_DMA_Abort_IT+0x3cc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d045      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <HAL_DMA_Abort_IT+0x3d0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d040      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <HAL_DMA_Abort_IT+0x3d4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d03b      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2a      	ldr	r2, [pc, #168]	@ (800279c <HAL_DMA_Abort_IT+0x3d8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d036      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a28      	ldr	r2, [pc, #160]	@ (80027a0 <HAL_DMA_Abort_IT+0x3dc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d031      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <HAL_DMA_Abort_IT+0x3e0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d02c      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <HAL_DMA_Abort_IT+0x3e4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d027      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a24      	ldr	r2, [pc, #144]	@ (80027ac <HAL_DMA_Abort_IT+0x3e8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a22      	ldr	r2, [pc, #136]	@ (80027b0 <HAL_DMA_Abort_IT+0x3ec>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01d      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <HAL_DMA_Abort_IT+0x3f0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d018      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <HAL_DMA_Abort_IT+0x3f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <HAL_DMA_Abort_IT+0x3f8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00e      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_DMA_Abort_IT+0x3fc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <HAL_DMA_Abort_IT+0x400>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort_IT+0x3a2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	@ (80027c8 <HAL_DMA_Abort_IT+0x404>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d132      	bne.n	80027cc <HAL_DMA_Abort_IT+0x408>
 8002766:	2301      	movs	r3, #1
 8002768:	e031      	b.n	80027ce <HAL_DMA_Abort_IT+0x40a>
 800276a:	bf00      	nop
 800276c:	40020010 	.word	0x40020010
 8002770:	40020028 	.word	0x40020028
 8002774:	40020040 	.word	0x40020040
 8002778:	40020058 	.word	0x40020058
 800277c:	40020070 	.word	0x40020070
 8002780:	40020088 	.word	0x40020088
 8002784:	400200a0 	.word	0x400200a0
 8002788:	400200b8 	.word	0x400200b8
 800278c:	40020410 	.word	0x40020410
 8002790:	40020428 	.word	0x40020428
 8002794:	40020440 	.word	0x40020440
 8002798:	40020458 	.word	0x40020458
 800279c:	40020470 	.word	0x40020470
 80027a0:	40020488 	.word	0x40020488
 80027a4:	400204a0 	.word	0x400204a0
 80027a8:	400204b8 	.word	0x400204b8
 80027ac:	58025408 	.word	0x58025408
 80027b0:	5802541c 	.word	0x5802541c
 80027b4:	58025430 	.word	0x58025430
 80027b8:	58025444 	.word	0x58025444
 80027bc:	58025458 	.word	0x58025458
 80027c0:	5802546c 	.word	0x5802546c
 80027c4:	58025480 	.word	0x58025480
 80027c8:	58025494 	.word	0x58025494
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d028      	beq.n	8002824 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2201      	movs	r2, #1
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002800:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002818:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002822:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop

08002850 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0e3      	b.n	8002a2a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2223      	movs	r2, #35	@ 0x23
 8002870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7fe fcab 	bl	80011d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a34 <HAL_ETH_Init+0x1e4>)
 800287c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002880:	4a6c      	ldr	r2, [pc, #432]	@ (8002a34 <HAL_ETH_Init+0x1e4>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800288a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a34 <HAL_ETH_Init+0x1e4>)
 800288c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7a1b      	ldrb	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff f94d 	bl	8001b40 <HAL_SYSCFG_ETHInterfaceSelect>
 80028a6:	e003      	b.n	80028b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80028a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80028ac:	f7ff f948 	bl	8001b40 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80028b0:	4b61      	ldr	r3, [pc, #388]	@ (8002a38 <HAL_ETH_Init+0x1e8>)
 80028b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028cc:	f7ff f8fc 	bl	8001ac8 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80028d2:	e011      	b.n	80028f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028d4:	f7ff f8f8 	bl	8001ac8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028e2:	d909      	bls.n	80028f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2204      	movs	r2, #4
 80028e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	22e0      	movs	r2, #224	@ 0xe0
 80028f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e098      	b.n	8002a2a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e4      	bne.n	80028d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f89e 	bl	8002a4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002910:	f001 fea0 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8002914:	4603      	mov	r3, r0
 8002916:	4a49      	ldr	r2, [pc, #292]	@ (8002a3c <HAL_ETH_Init+0x1ec>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	0c9a      	lsrs	r2, r3, #18
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3a01      	subs	r2, #1
 8002924:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fa81 	bl	8002e30 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002936:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800293a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002946:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800294a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	22e0      	movs	r2, #224	@ 0xe0
 8002966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e05d      	b.n	8002a2a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002976:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800297a:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <HAL_ETH_Init+0x1f0>)
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6952      	ldr	r2, [r2, #20]
 8002982:	0051      	lsls	r1, r2, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	430b      	orrs	r3, r1
 800298a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800298e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fae9 	bl	8002f6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fb2f 	bl	8002ffc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	3305      	adds	r3, #5
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	021a      	lsls	r2, r3, #8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	3303      	adds	r3, #3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	061a      	lsls	r2, r3, #24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	3302      	adds	r3, #2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80029ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_ETH_Init+0x1f4>)
 80029fe:	430b      	orrs	r3, r1
 8002a00:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <HAL_ETH_Init+0x1f8>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2210      	movs	r2, #16
 8002a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58024400 	.word	0x58024400
 8002a38:	58000400 	.word	0x58000400
 8002a3c:	431bde83 	.word	0x431bde83
 8002a40:	ffff8001 	.word	0xffff8001
 8002a44:	0c020060 	.word	0x0c020060
 8002a48:	0c20c000 	.word	0x0c20c000

08002a4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a66:	f001 fdf5 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8002a6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d804      	bhi.n	8002a7e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e022      	b.n	8002ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4a16      	ldr	r2, [pc, #88]	@ (8002adc <HAL_ETH_SetMDIOClockRange+0x90>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d204      	bcs.n	8002a90 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e019      	b.n	8002ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4a13      	ldr	r2, [pc, #76]	@ (8002ae0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d915      	bls.n	8002ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d804      	bhi.n	8002aaa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e00c      	b.n	8002ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d804      	bhi.n	8002abc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e003      	b.n	8002ac4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	02160ebf 	.word	0x02160ebf
 8002adc:	03938700 	.word	0x03938700
 8002ae0:	05f5e0ff 	.word	0x05f5e0ff
 8002ae4:	08f0d17f 	.word	0x08f0d17f
 8002ae8:	0ee6b27f 	.word	0x0ee6b27f

08002aec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002afe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	791b      	ldrb	r3, [r3, #4]
 8002b04:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002b06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002b0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	7b5b      	ldrb	r3, [r3, #13]
 8002b14:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	7b9b      	ldrb	r3, [r3, #14]
 8002b1c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002b1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	7bdb      	ldrb	r3, [r3, #15]
 8002b24:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002b26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	7c12      	ldrb	r2, [r2, #16]
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d102      	bne.n	8002b36 <ETH_SetMACConfig+0x4a>
 8002b30:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002b34:	e000      	b.n	8002b38 <ETH_SetMACConfig+0x4c>
 8002b36:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	7c52      	ldrb	r2, [r2, #17]
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d102      	bne.n	8002b48 <ETH_SetMACConfig+0x5c>
 8002b42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b46:	e000      	b.n	8002b4a <ETH_SetMACConfig+0x5e>
 8002b48:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	7c9b      	ldrb	r3, [r3, #18]
 8002b50:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b52:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b58:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	7f1b      	ldrb	r3, [r3, #28]
 8002b64:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	7f5b      	ldrb	r3, [r3, #29]
 8002b6c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	7f92      	ldrb	r2, [r2, #30]
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d102      	bne.n	8002b7e <ETH_SetMACConfig+0x92>
 8002b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b7c:	e000      	b.n	8002b80 <ETH_SetMACConfig+0x94>
 8002b7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	7fdb      	ldrb	r3, [r3, #31]
 8002b86:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	d102      	bne.n	8002b9a <ETH_SetMACConfig+0xae>
 8002b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b98:	e000      	b.n	8002b9c <ETH_SetMACConfig+0xb0>
 8002b9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b9c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002baa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002bac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b56      	ldr	r3, [pc, #344]	@ (8002d18 <ETH_SetMACConfig+0x22c>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bd6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002be0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002be2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002bea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002bec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d102      	bne.n	8002bfe <ETH_SetMACConfig+0x112>
 8002bf8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bfc:	e000      	b.n	8002c00 <ETH_SetMACConfig+0x114>
 8002bfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002c00:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4b42      	ldr	r3, [pc, #264]	@ (8002d1c <ETH_SetMACConfig+0x230>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c24:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b3a      	ldr	r3, [pc, #232]	@ (8002d20 <ETH_SetMACConfig+0x234>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d101      	bne.n	8002c5e <ETH_SetMACConfig+0x172>
 8002c5a:	2280      	movs	r2, #128	@ 0x80
 8002c5c:	e000      	b.n	8002c60 <ETH_SetMACConfig+0x174>
 8002c5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c60:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c72:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002c88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002c90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f023 0103 	bic.w	r1, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002cb6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d101      	bne.n	8002cda <ETH_SetMACConfig+0x1ee>
 8002cd6:	2240      	movs	r2, #64	@ 0x40
 8002cd8:	e000      	b.n	8002cdc <ETH_SetMACConfig+0x1f0>
 8002cda:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002cdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002ce4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002cee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002cfc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	00048083 	.word	0x00048083
 8002d1c:	c0f88000 	.word	0xc0f88000
 8002d20:	fffffef0 	.word	0xfffffef0

08002d24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <ETH_SetDMAConfig+0xf8>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	6811      	ldr	r1, [r2, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d4a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d56:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	7b1b      	ldrb	r3, [r3, #12]
 8002d5c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e20 <ETH_SetDMAConfig+0xfc>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d7c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	7b5b      	ldrb	r3, [r3, #13]
 8002d82:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d94:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002d98:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <ETH_SetDMAConfig+0x100>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002da8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	7d1b      	ldrb	r3, [r3, #20]
 8002db4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002db6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	7f5b      	ldrb	r3, [r3, #29]
 8002dbc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002dce:	4b16      	ldr	r3, [pc, #88]	@ (8002e28 <ETH_SetDMAConfig+0x104>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	68f9      	ldr	r1, [r7, #12]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dde:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	7f1b      	ldrb	r3, [r3, #28]
 8002de6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <ETH_SetDMAConfig+0x108>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	430b      	orrs	r3, r1
 8002e08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e0c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	ffff87fd 	.word	0xffff87fd
 8002e20:	ffff2ffe 	.word	0xffff2ffe
 8002e24:	fffec000 	.word	0xfffec000
 8002e28:	ffc0efef 	.word	0xffc0efef
 8002e2c:	7fc0ffff 	.word	0x7fc0ffff

08002e30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0a4      	sub	sp, #144	@ 0x90
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e70:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002e88:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002e8c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e94:	2300      	movs	r3, #0
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002eda:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ee0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ee4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002eec:	2302      	movs	r3, #2
 8002eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fde6 	bl	8002aec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002f50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f56:	f107 0308 	add.w	r3, r7, #8
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fee1 	bl	8002d24 <ETH_SetDMAConfig>
}
 8002f62:	bf00      	nop
 8002f64:	3790      	adds	r7, #144	@ 0x90
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e01d      	b.n	8002fb4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68d9      	ldr	r1, [r3, #12]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	3206      	adds	r2, #6
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d9de      	bls.n	8002f78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2303      	movs	r3, #3
 8002fcc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fdc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e023      	b.n	8003052 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6919      	ldr	r1, [r3, #16]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	3212      	adds	r2, #18
 8003048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d9d8      	bls.n	800300a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800307e:	461a      	mov	r2, r3
 8003080:	2303      	movs	r3, #3
 8003082:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003092:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030c6:	4b89      	ldr	r3, [pc, #548]	@ (80032ec <HAL_GPIO_Init+0x234>)
 80030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ca:	e194      	b.n	80033f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8186 	beq.w	80033f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d005      	beq.n	80030fc <HAL_GPIO_Init+0x44>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d130      	bne.n	800315e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003132:	2201      	movs	r2, #1
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0201 	and.w	r2, r3, #1
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b03      	cmp	r3, #3
 8003168:	d017      	beq.n	800319a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d123      	bne.n	80031ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	08da      	lsrs	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3208      	adds	r2, #8
 80031ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	69b9      	ldr	r1, [r7, #24]
 80031ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0203 	and.w	r2, r3, #3
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80e0 	beq.w	80033f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003230:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <HAL_GPIO_Init+0x238>)
 8003232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003236:	4a2e      	ldr	r2, [pc, #184]	@ (80032f0 <HAL_GPIO_Init+0x238>)
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_GPIO_Init+0x238>)
 8003242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800324e:	4a29      	ldr	r2, [pc, #164]	@ (80032f4 <HAL_GPIO_Init+0x23c>)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a20      	ldr	r2, [pc, #128]	@ (80032f8 <HAL_GPIO_Init+0x240>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d052      	beq.n	8003320 <HAL_GPIO_Init+0x268>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <HAL_GPIO_Init+0x244>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d031      	beq.n	80032e6 <HAL_GPIO_Init+0x22e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1e      	ldr	r2, [pc, #120]	@ (8003300 <HAL_GPIO_Init+0x248>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02b      	beq.n	80032e2 <HAL_GPIO_Init+0x22a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HAL_GPIO_Init+0x24c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d025      	beq.n	80032de <HAL_GPIO_Init+0x226>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1c      	ldr	r2, [pc, #112]	@ (8003308 <HAL_GPIO_Init+0x250>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <HAL_GPIO_Init+0x222>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1b      	ldr	r2, [pc, #108]	@ (800330c <HAL_GPIO_Init+0x254>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x21e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_GPIO_Init+0x258>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x21a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <HAL_GPIO_Init+0x25c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x216>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a18      	ldr	r2, [pc, #96]	@ (8003318 <HAL_GPIO_Init+0x260>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x212>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a17      	ldr	r2, [pc, #92]	@ (800331c <HAL_GPIO_Init+0x264>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x20e>
 80032c2:	2309      	movs	r3, #9
 80032c4:	e02d      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032c6:	230a      	movs	r3, #10
 80032c8:	e02b      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032ca:	2308      	movs	r3, #8
 80032cc:	e029      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e027      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032d2:	2306      	movs	r3, #6
 80032d4:	e025      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032d6:	2305      	movs	r3, #5
 80032d8:	e023      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032da:	2304      	movs	r3, #4
 80032dc:	e021      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032de:	2303      	movs	r3, #3
 80032e0:	e01f      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e01d      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e01b      	b.n	8003322 <HAL_GPIO_Init+0x26a>
 80032ea:	bf00      	nop
 80032ec:	58000080 	.word	0x58000080
 80032f0:	58024400 	.word	0x58024400
 80032f4:	58000400 	.word	0x58000400
 80032f8:	58020000 	.word	0x58020000
 80032fc:	58020400 	.word	0x58020400
 8003300:	58020800 	.word	0x58020800
 8003304:	58020c00 	.word	0x58020c00
 8003308:	58021000 	.word	0x58021000
 800330c:	58021400 	.word	0x58021400
 8003310:	58021800 	.word	0x58021800
 8003314:	58021c00 	.word	0x58021c00
 8003318:	58022000 	.word	0x58022000
 800331c:	58022400 	.word	0x58022400
 8003320:	2300      	movs	r3, #0
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f002 0203 	and.w	r2, r2, #3
 8003328:	0092      	lsls	r2, r2, #2
 800332a:	4093      	lsls	r3, r2
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003332:	4938      	ldr	r1, [pc, #224]	@ (8003414 <HAL_GPIO_Init+0x35c>)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003366:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003394:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	f47f ae63 	bne.w	80030cc <HAL_GPIO_Init+0x14>
  }
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	3724      	adds	r7, #36	@ 0x24
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	58000400 	.word	0x58000400

08003418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
 8003424:	4613      	mov	r3, r2
 8003426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003434:	e003      	b.n	800343e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	619a      	str	r2, [r3, #24]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af02      	add	r7, sp, #8
 8003450:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0fe      	b.n	800365a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7fe f927 	bl	80016c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f006 ff3a 	bl	800a2fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7c1a      	ldrb	r2, [r3, #16]
 8003490:	f88d 2000 	strb.w	r2, [sp]
 8003494:	3304      	adds	r3, #4
 8003496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003498:	f006 febe 	bl	800a218 <USB_CoreInit>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0d5      	b.n	800365a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f006 ff32 	bl	800a31e <USB_SetCurrentMode>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0c6      	b.n	800365a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e04a      	b.n	8003568 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3315      	adds	r3, #21
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3314      	adds	r3, #20
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	b298      	uxth	r0, r3
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	332e      	adds	r3, #46	@ 0x2e
 800350e:	4602      	mov	r2, r0
 8003510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3318      	adds	r3, #24
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	331c      	adds	r3, #28
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3320      	adds	r3, #32
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3324      	adds	r3, #36	@ 0x24
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	3301      	adds	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	791b      	ldrb	r3, [r3, #4]
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	429a      	cmp	r2, r3
 8003570:	d3af      	bcc.n	80034d2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e044      	b.n	8003602 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	3301      	adds	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	429a      	cmp	r2, r3
 800360a:	d3b5      	bcc.n	8003578 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7c1a      	ldrb	r2, [r3, #16]
 8003614:	f88d 2000 	strb.w	r2, [sp]
 8003618:	3304      	adds	r3, #4
 800361a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800361c:	f006 fecc 	bl	800a3b8 <USB_DevInit>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e013      	b.n	800365a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7b1b      	ldrb	r3, [r3, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f80b 	bl	8003664 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f007 f887 	bl	800a766 <USB_DevDisconnect>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003694:	4313      	orrs	r3, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	10000003 	.word	0x10000003

080036ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036b4:	4b19      	ldr	r3, [pc, #100]	@ (800371c <HAL_PWREx_ConfigSupply+0x70>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d00a      	beq.n	80036d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_PWREx_ConfigSupply+0x70>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e01f      	b.n	8003712 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e01d      	b.n	8003712 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <HAL_PWREx_ConfigSupply+0x70>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 0207 	bic.w	r2, r3, #7
 80036de:	490f      	ldr	r1, [pc, #60]	@ (800371c <HAL_PWREx_ConfigSupply+0x70>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036e6:	f7fe f9ef 	bl	8001ac8 <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036ec:	e009      	b.n	8003702 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036ee:	f7fe f9eb 	bl	8001ac8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036fc:	d901      	bls.n	8003702 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e007      	b.n	8003712 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_PWREx_ConfigSupply+0x70>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370e:	d1ee      	bne.n	80036ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	58024800 	.word	0x58024800

08003720 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a04      	ldr	r2, [pc, #16]	@ (800373c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800372e:	60d3      	str	r3, [r2, #12]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	58024800 	.word	0x58024800

08003740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	@ 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f000 bc48 	b.w	8003fe4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8088 	beq.w	8003872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003762:	4b99      	ldr	r3, [pc, #612]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800376c:	4b96      	ldr	r3, [pc, #600]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003774:	2b10      	cmp	r3, #16
 8003776:	d007      	beq.n	8003788 <HAL_RCC_OscConfig+0x48>
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	2b18      	cmp	r3, #24
 800377c:	d111      	bne.n	80037a2 <HAL_RCC_OscConfig+0x62>
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	4b8f      	ldr	r3, [pc, #572]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d06d      	beq.n	8003870 <HAL_RCC_OscConfig+0x130>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d169      	bne.n	8003870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f000 bc21 	b.w	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x7a>
 80037ac:	4b86      	ldr	r3, [pc, #536]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a85      	ldr	r2, [pc, #532]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e02e      	b.n	8003818 <HAL_RCC_OscConfig+0xd8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x9c>
 80037c2:	4b81      	ldr	r3, [pc, #516]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a80      	ldr	r2, [pc, #512]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7d      	ldr	r2, [pc, #500]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xd8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0xc0>
 80037e6:	4b78      	ldr	r3, [pc, #480]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a77      	ldr	r2, [pc, #476]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b75      	ldr	r3, [pc, #468]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a74      	ldr	r2, [pc, #464]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xd8>
 8003800:	4b71      	ldr	r3, [pc, #452]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a70      	ldr	r2, [pc, #448]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b6e      	ldr	r3, [pc, #440]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a6d      	ldr	r2, [pc, #436]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fe f952 	bl	8001ac8 <HAL_GetTick>
 8003824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe f94e 	bl	8001ac8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	@ 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e3d4      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800383a:	4b63      	ldr	r3, [pc, #396]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xe8>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe f93e 	bl	8001ac8 <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe f93a 	bl	8001ac8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	@ 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e3c0      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003862:	4b59      	ldr	r3, [pc, #356]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x110>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80ca 	beq.w	8003a14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003880:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003888:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800388a:	4b4f      	ldr	r3, [pc, #316]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_RCC_OscConfig+0x166>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2b18      	cmp	r3, #24
 800389a:	d156      	bne.n	800394a <HAL_RCC_OscConfig+0x20a>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d151      	bne.n	800394a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a6:	4b48      	ldr	r3, [pc, #288]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x17e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e392      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038be:	4b42      	ldr	r3, [pc, #264]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0219 	bic.w	r2, r3, #25
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	493f      	ldr	r1, [pc, #252]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe f8fa 	bl	8001ac8 <HAL_GetTick>
 80038d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fe f8f6 	bl	8001ac8 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e37c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ea:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	f7fe f917 	bl	8001b28 <HAL_GetREVID>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003900:	4293      	cmp	r3, r2
 8003902:	d817      	bhi.n	8003934 <HAL_RCC_OscConfig+0x1f4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d108      	bne.n	800391e <HAL_RCC_OscConfig+0x1de>
 800390c:	4b2e      	ldr	r3, [pc, #184]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003914:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800391c:	e07a      	b.n	8003a14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	4926      	ldr	r1, [pc, #152]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003932:	e06f      	b.n	8003a14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003934:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	4921      	ldr	r1, [pc, #132]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003948:	e064      	b.n	8003a14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d047      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003952:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0219 	bic.w	r2, r3, #25
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	491a      	ldr	r1, [pc, #104]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe f8b0 	bl	8001ac8 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396c:	f7fe f8ac 	bl	8001ac8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e332      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397e:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	f7fe f8cd 	bl	8001b28 <HAL_GetREVID>
 800398e:	4603      	mov	r3, r0
 8003990:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003994:	4293      	cmp	r3, r2
 8003996:	d819      	bhi.n	80039cc <HAL_RCC_OscConfig+0x28c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b40      	cmp	r3, #64	@ 0x40
 800399e:	d108      	bne.n	80039b2 <HAL_RCC_OscConfig+0x272>
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039a8:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ae:	6053      	str	r3, [r2, #4]
 80039b0:	e030      	b.n	8003a14 <HAL_RCC_OscConfig+0x2d4>
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	031b      	lsls	r3, r3, #12
 80039c0:	4901      	ldr	r1, [pc, #4]	@ (80039c8 <HAL_RCC_OscConfig+0x288>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
 80039c6:	e025      	b.n	8003a14 <HAL_RCC_OscConfig+0x2d4>
 80039c8:	58024400 	.word	0x58024400
 80039cc:	4b9a      	ldr	r3, [pc, #616]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	4997      	ldr	r1, [pc, #604]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e018      	b.n	8003a14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b95      	ldr	r3, [pc, #596]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a94      	ldr	r2, [pc, #592]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fe f86b 	bl	8001ac8 <HAL_GetTick>
 80039f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fe f867 	bl	8001ac8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e2ed      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a08:	4b8b      	ldr	r3, [pc, #556]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a9 	beq.w	8003b74 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	4b85      	ldr	r3, [pc, #532]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a2c:	4b82      	ldr	r3, [pc, #520]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d007      	beq.n	8003a48 <HAL_RCC_OscConfig+0x308>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b18      	cmp	r3, #24
 8003a3c:	d13a      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x374>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d135      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a48:	4b7b      	ldr	r3, [pc, #492]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_OscConfig+0x320>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e2c1      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a60:	f7fe f862 	bl	8001b28 <HAL_GetREVID>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d817      	bhi.n	8003a9e <HAL_RCC_OscConfig+0x35e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d108      	bne.n	8003a88 <HAL_RCC_OscConfig+0x348>
 8003a76:	4b70      	ldr	r3, [pc, #448]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a84:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a86:	e075      	b.n	8003b74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a88:	4b6b      	ldr	r3, [pc, #428]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	069b      	lsls	r3, r3, #26
 8003a96:	4968      	ldr	r1, [pc, #416]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a9c:	e06a      	b.n	8003b74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a9e:	4b66      	ldr	r3, [pc, #408]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	4962      	ldr	r1, [pc, #392]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ab2:	e05f      	b.n	8003b74 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d042      	beq.n	8003b42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003abc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fffe 	bl	8001ac8 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ad0:	f7fd fffa 	bl	8001ac8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e280      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ae2:	4b55      	ldr	r3, [pc, #340]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aee:	f7fe f81b 	bl	8001b28 <HAL_GetREVID>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d817      	bhi.n	8003b2c <HAL_RCC_OscConfig+0x3ec>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d108      	bne.n	8003b16 <HAL_RCC_OscConfig+0x3d6>
 8003b04:	4b4c      	ldr	r3, [pc, #304]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b12:	6053      	str	r3, [r2, #4]
 8003b14:	e02e      	b.n	8003b74 <HAL_RCC_OscConfig+0x434>
 8003b16:	4b48      	ldr	r3, [pc, #288]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	069b      	lsls	r3, r3, #26
 8003b24:	4944      	ldr	r1, [pc, #272]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
 8003b2a:	e023      	b.n	8003b74 <HAL_RCC_OscConfig+0x434>
 8003b2c:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	493f      	ldr	r1, [pc, #252]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
 8003b40:	e018      	b.n	8003b74 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b42:	4b3d      	ldr	r3, [pc, #244]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a3c      	ldr	r2, [pc, #240]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd ffbb 	bl	8001ac8 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b56:	f7fd ffb7 	bl	8001ac8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e23d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b68:	4b33      	ldr	r3, [pc, #204]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d036      	beq.n	8003bee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d019      	beq.n	8003bbc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b88:	4b2b      	ldr	r3, [pc, #172]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fd ff98 	bl	8001ac8 <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fd ff94 	bl	8001ac8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e21a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bae:	4b22      	ldr	r3, [pc, #136]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x45c>
 8003bba:	e018      	b.n	8003bee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd ff7e 	bl	8001ac8 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fd ff7a 	bl	8001ac8 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e200      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003be2:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d039      	beq.n	8003c6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a0c      	ldr	r2, [pc, #48]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003c08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd ff5b 	bl	8001ac8 <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c16:	f7fd ff57 	bl	8001ac8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1dd      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c28:	4b03      	ldr	r3, [pc, #12]	@ (8003c38 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4d6>
 8003c34:	e01b      	b.n	8003c6e <HAL_RCC_OscConfig+0x52e>
 8003c36:	bf00      	nop
 8003c38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c3c:	4b9b      	ldr	r3, [pc, #620]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a9a      	ldr	r2, [pc, #616]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c48:	f7fd ff3e 	bl	8001ac8 <HAL_GetTick>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c50:	f7fd ff3a 	bl	8001ac8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1c0      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c62:	4b92      	ldr	r3, [pc, #584]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8081 	beq.w	8003d7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8003eb0 <HAL_RCC_OscConfig+0x770>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a8b      	ldr	r2, [pc, #556]	@ (8003eb0 <HAL_RCC_OscConfig+0x770>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c88:	f7fd ff1e 	bl	8001ac8 <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fd ff1a 	bl	8001ac8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e1a0      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca2:	4b83      	ldr	r3, [pc, #524]	@ (8003eb0 <HAL_RCC_OscConfig+0x770>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d106      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x584>
 8003cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	4a7c      	ldr	r2, [pc, #496]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc2:	e02d      	b.n	8003d20 <HAL_RCC_OscConfig+0x5e0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x5a6>
 8003ccc:	4b77      	ldr	r3, [pc, #476]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	4a76      	ldr	r2, [pc, #472]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd8:	4b74      	ldr	r3, [pc, #464]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	4a73      	ldr	r2, [pc, #460]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cde:	f023 0304 	bic.w	r3, r3, #4
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCC_OscConfig+0x5e0>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5c8>
 8003cee:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0x5e0>
 8003d08:	4b68      	ldr	r3, [pc, #416]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	4a67      	ldr	r2, [pc, #412]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d14:	4b65      	ldr	r3, [pc, #404]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4a64      	ldr	r2, [pc, #400]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d1a:	f023 0304 	bic.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fd fece 	bl	8001ac8 <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fd feca 	bl	8001ac8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e14e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d46:	4b59      	ldr	r3, [pc, #356]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0ee      	beq.n	8003d30 <HAL_RCC_OscConfig+0x5f0>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd feb8 	bl	8001ac8 <HAL_GetTick>
 8003d58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7fd feb4 	bl	8001ac8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e138      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d72:	4b4e      	ldr	r3, [pc, #312]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 812d 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d88:	4b48      	ldr	r3, [pc, #288]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d90:	2b18      	cmp	r3, #24
 8003d92:	f000 80bd 	beq.w	8003f10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	f040 809e 	bne.w	8003edc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da0:	4b42      	ldr	r3, [pc, #264]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a41      	ldr	r2, [pc, #260]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd fe8c 	bl	8001ac8 <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fe88 	bl	8001ac8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e10e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dc6:	4b39      	ldr	r3, [pc, #228]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd2:	4b36      	ldr	r3, [pc, #216]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dd6:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCC_OscConfig+0x774>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	430a      	orrs	r2, r1
 8003de6:	4931      	ldr	r1, [pc, #196]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	3b01      	subs	r3, #1
 8003df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	3b01      	subs	r3, #1
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e1c:	4923      	ldr	r1, [pc, #140]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e22:	4b22      	ldr	r3, [pc, #136]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	4a21      	ldr	r2, [pc, #132]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e32:	4b21      	ldr	r3, [pc, #132]	@ (8003eb8 <HAL_RCC_OscConfig+0x778>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e3a:	00d2      	lsls	r2, r2, #3
 8003e3c:	491b      	ldr	r1, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e42:	4b1a      	ldr	r3, [pc, #104]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	f023 020c 	bic.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4917      	ldr	r1, [pc, #92]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e54:	4b15      	ldr	r3, [pc, #84]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	f023 0202 	bic.w	r2, r3, #2
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	4912      	ldr	r1, [pc, #72]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e66:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	4a10      	ldr	r2, [pc, #64]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	4a0d      	ldr	r2, [pc, #52]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4a0a      	ldr	r2, [pc, #40]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e8a:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	4a07      	ldr	r2, [pc, #28]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e96:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <HAL_RCC_OscConfig+0x76c>)
 8003e9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fd fe11 	bl	8001ac8 <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea8:	e011      	b.n	8003ece <HAL_RCC_OscConfig+0x78e>
 8003eaa:	bf00      	nop
 8003eac:	58024400 	.word	0x58024400
 8003eb0:	58024800 	.word	0x58024800
 8003eb4:	fffffc0c 	.word	0xfffffc0c
 8003eb8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fe04 	bl	8001ac8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e08a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ece:	4b47      	ldr	r3, [pc, #284]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x77c>
 8003eda:	e082      	b.n	8003fe2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003edc:	4b43      	ldr	r3, [pc, #268]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a42      	ldr	r2, [pc, #264]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fdee 	bl	8001ac8 <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fdea 	bl	8001ac8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e070      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f02:	4b3a      	ldr	r3, [pc, #232]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x7b0>
 8003f0e:	e068      	b.n	8003fe2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f10:	4b36      	ldr	r3, [pc, #216]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f16:	4b35      	ldr	r3, [pc, #212]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d031      	beq.n	8003f88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 0203 	and.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d12a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d122      	bne.n	8003f88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d11a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0a5b      	lsrs	r3, r3, #9
 8003f56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d111      	bne.n	8003f88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	0c1b      	lsrs	r3, r3, #16
 8003f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d108      	bne.n	8003f88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0e1b      	lsrs	r3, r3, #24
 8003f7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e02b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f8c:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d01f      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003fa2:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fae:	f7fd fd8b 	bl	8001ac8 <HAL_GetTick>
 8003fb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003fb4:	bf00      	nop
 8003fb6:	f7fd fd87 	bl	8001ac8 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d0f9      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <HAL_RCC_OscConfig+0x8b0>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fce:	00d2      	lsls	r2, r2, #3
 8003fd0:	4906      	ldr	r1, [pc, #24]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_RCC_OscConfig+0x8ac>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3730      	adds	r7, #48	@ 0x30
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	58024400 	.word	0x58024400
 8003ff0:	ffff0007 	.word	0xffff0007

08003ff4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e19c      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b87      	ldr	r3, [pc, #540]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 020f 	bic.w	r2, r3, #15
 800401e:	4985      	ldr	r1, [pc, #532]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b83      	ldr	r3, [pc, #524]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e184      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d010      	beq.n	8004066 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	4b7b      	ldr	r3, [pc, #492]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004050:	429a      	cmp	r2, r3
 8004052:	d908      	bls.n	8004066 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004054:	4b78      	ldr	r3, [pc, #480]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4975      	ldr	r1, [pc, #468]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004062:	4313      	orrs	r3, r2
 8004064:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d010      	beq.n	8004094 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	4b70      	ldr	r3, [pc, #448]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800407e:	429a      	cmp	r2, r3
 8004080:	d908      	bls.n	8004094 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004082:	4b6d      	ldr	r3, [pc, #436]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	496a      	ldr	r1, [pc, #424]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004090:	4313      	orrs	r3, r2
 8004092:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	4b64      	ldr	r3, [pc, #400]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d908      	bls.n	80040c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040b0:	4b61      	ldr	r3, [pc, #388]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	495e      	ldr	r1, [pc, #376]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d010      	beq.n	80040f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	4b59      	ldr	r3, [pc, #356]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040da:	429a      	cmp	r2, r3
 80040dc:	d908      	bls.n	80040f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040de:	4b56      	ldr	r3, [pc, #344]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4953      	ldr	r1, [pc, #332]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	4b4d      	ldr	r3, [pc, #308]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b4a      	ldr	r3, [pc, #296]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f023 020f 	bic.w	r2, r3, #15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4947      	ldr	r1, [pc, #284]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 800411a:	4313      	orrs	r3, r2
 800411c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d055      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800412a:	4b43      	ldr	r3, [pc, #268]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4940      	ldr	r1, [pc, #256]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004138:	4313      	orrs	r3, r2
 800413a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004144:	4b3c      	ldr	r3, [pc, #240]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d121      	bne.n	8004194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0f6      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d107      	bne.n	800416c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415c:	4b36      	ldr	r3, [pc, #216]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0ea      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004174:	4b30      	ldr	r3, [pc, #192]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0de      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004184:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0d6      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004194:	4b28      	ldr	r3, [pc, #160]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f023 0207 	bic.w	r2, r3, #7
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4925      	ldr	r1, [pc, #148]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fd fc8f 	bl	8001ac8 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ae:	f7fd fc8b 	bl	8001ac8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e0be      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d1eb      	bne.n	80041ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d208      	bcs.n	8004204 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f2:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	490e      	ldr	r1, [pc, #56]	@ (8004238 <HAL_RCC_ClockConfig+0x244>)
 8004200:	4313      	orrs	r3, r2
 8004202:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d214      	bcs.n	800423c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	4906      	ldr	r1, [pc, #24]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <HAL_RCC_ClockConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e086      	b.n	8004342 <HAL_RCC_ClockConfig+0x34e>
 8004234:	52002000 	.word	0x52002000
 8004238:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	4b3f      	ldr	r3, [pc, #252]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004254:	429a      	cmp	r2, r3
 8004256:	d208      	bcs.n	800426a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004258:	4b3c      	ldr	r3, [pc, #240]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4939      	ldr	r1, [pc, #228]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 8004266:	4313      	orrs	r3, r2
 8004268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d010      	beq.n	8004298 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	4b34      	ldr	r3, [pc, #208]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004282:	429a      	cmp	r2, r3
 8004284:	d208      	bcs.n	8004298 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004286:	4b31      	ldr	r3, [pc, #196]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	492e      	ldr	r1, [pc, #184]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 8004294:	4313      	orrs	r3, r2
 8004296:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	4b28      	ldr	r3, [pc, #160]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d208      	bcs.n	80042c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042b4:	4b25      	ldr	r3, [pc, #148]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	4922      	ldr	r1, [pc, #136]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042de:	429a      	cmp	r2, r3
 80042e0:	d208      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042e2:	4b1a      	ldr	r3, [pc, #104]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	4917      	ldr	r1, [pc, #92]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042f4:	f000 f834 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b14      	ldr	r3, [pc, #80]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	4912      	ldr	r1, [pc, #72]	@ (8004350 <HAL_RCC_ClockConfig+0x35c>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
 8004310:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004312:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <HAL_RCC_ClockConfig+0x358>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	4a0d      	ldr	r2, [pc, #52]	@ (8004350 <HAL_RCC_ClockConfig+0x35c>)
 800431c:	5cd3      	ldrb	r3, [r2, r3]
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <HAL_RCC_ClockConfig+0x360>)
 800432a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800432c:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <HAL_RCC_ClockConfig+0x364>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <HAL_RCC_ClockConfig+0x368>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fb7c 	bl	8001a34 <HAL_InitTick>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
 8004350:	0800aa3c 	.word	0x0800aa3c
 8004354:	24000004 	.word	0x24000004
 8004358:	24000000 	.word	0x24000000
 800435c:	24000008 	.word	0x24000008

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	b089      	sub	sp, #36	@ 0x24
 8004364:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004366:	4bb3      	ldr	r3, [pc, #716]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800436e:	2b18      	cmp	r3, #24
 8004370:	f200 8155 	bhi.w	800461e <HAL_RCC_GetSysClockFreq+0x2be>
 8004374:	a201      	add	r2, pc, #4	@ (adr r2, 800437c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043e1 	.word	0x080043e1
 8004380:	0800461f 	.word	0x0800461f
 8004384:	0800461f 	.word	0x0800461f
 8004388:	0800461f 	.word	0x0800461f
 800438c:	0800461f 	.word	0x0800461f
 8004390:	0800461f 	.word	0x0800461f
 8004394:	0800461f 	.word	0x0800461f
 8004398:	0800461f 	.word	0x0800461f
 800439c:	08004407 	.word	0x08004407
 80043a0:	0800461f 	.word	0x0800461f
 80043a4:	0800461f 	.word	0x0800461f
 80043a8:	0800461f 	.word	0x0800461f
 80043ac:	0800461f 	.word	0x0800461f
 80043b0:	0800461f 	.word	0x0800461f
 80043b4:	0800461f 	.word	0x0800461f
 80043b8:	0800461f 	.word	0x0800461f
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	0800461f 	.word	0x0800461f
 80043c4:	0800461f 	.word	0x0800461f
 80043c8:	0800461f 	.word	0x0800461f
 80043cc:	0800461f 	.word	0x0800461f
 80043d0:	0800461f 	.word	0x0800461f
 80043d4:	0800461f 	.word	0x0800461f
 80043d8:	0800461f 	.word	0x0800461f
 80043dc:	08004413 	.word	0x08004413
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043e0:	4b94      	ldr	r3, [pc, #592]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043ec:	4b91      	ldr	r3, [pc, #580]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	08db      	lsrs	r3, r3, #3
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	4a90      	ldr	r2, [pc, #576]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043fe:	e111      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004400:	4b8d      	ldr	r3, [pc, #564]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004402:	61bb      	str	r3, [r7, #24]
      break;
 8004404:	e10e      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004406:	4b8d      	ldr	r3, [pc, #564]	@ (800463c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004408:	61bb      	str	r3, [r7, #24]
      break;
 800440a:	e10b      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800440c:	4b8c      	ldr	r3, [pc, #560]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800440e:	61bb      	str	r3, [r7, #24]
      break;
 8004410:	e108      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004412:	4b88      	ldr	r3, [pc, #544]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800441c:	4b85      	ldr	r3, [pc, #532]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004426:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004428:	4b82      	ldr	r3, [pc, #520]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004432:	4b80      	ldr	r3, [pc, #512]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004436:	08db      	lsrs	r3, r3, #3
 8004438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80e1 	beq.w	8004618 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b02      	cmp	r3, #2
 800445a:	f000 8083 	beq.w	8004564 <HAL_RCC_GetSysClockFreq+0x204>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b02      	cmp	r3, #2
 8004462:	f200 80a1 	bhi.w	80045a8 <HAL_RCC_GetSysClockFreq+0x248>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x114>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d056      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004472:	e099      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004474:	4b6f      	ldr	r3, [pc, #444]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004480:	4b6c      	ldr	r3, [pc, #432]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	08db      	lsrs	r3, r3, #3
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	4a6b      	ldr	r2, [pc, #428]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b62      	ldr	r3, [pc, #392]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80044be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004644 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80044da:	e087      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004648 <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b51      	ldr	r3, [pc, #324]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004502:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004644 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800451e:	e065      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800464c <HAL_RCC_GetSysClockFreq+0x2ec>
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b40      	ldr	r3, [pc, #256]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a02 	vldr	s12, [r7, #8]
 8004546:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004562:	e043      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004650 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004576:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	ed97 6a02 	vldr	s12, [r7, #8]
 800458a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800458e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045a6:	e021      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800464c <HAL_RCC_GetSysClockFreq+0x2ec>
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004644 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045ec:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	0a5b      	lsrs	r3, r3, #9
 80045f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f6:	3301      	adds	r3, #1
 80045f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004604:	edd7 6a07 	vldr	s13, [r7, #28]
 8004608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004610:	ee17 3a90 	vmov	r3, s15
 8004614:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004616:	e005      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	61bb      	str	r3, [r7, #24]
      break;
 800461c:	e002      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800461e:	4b07      	ldr	r3, [pc, #28]	@ (800463c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004620:	61bb      	str	r3, [r7, #24]
      break;
 8004622:	bf00      	nop
  }

  return sysclockfreq;
 8004624:	69bb      	ldr	r3, [r7, #24]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	@ 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400
 8004638:	03d09000 	.word	0x03d09000
 800463c:	003d0900 	.word	0x003d0900
 8004640:	007a1200 	.word	0x007a1200
 8004644:	46000000 	.word	0x46000000
 8004648:	4c742400 	.word	0x4c742400
 800464c:	4a742400 	.word	0x4a742400
 8004650:	4af42400 	.word	0x4af42400

08004654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800465a:	f7ff fe81 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490f      	ldr	r1, [pc, #60]	@ (80046a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004678:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	4a09      	ldr	r2, [pc, #36]	@ (80046a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a07      	ldr	r2, [pc, #28]	@ (80046ac <HAL_RCC_GetHCLKFreq+0x58>)
 8004690:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004692:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004698:	4b04      	ldr	r3, [pc, #16]	@ (80046ac <HAL_RCC_GetHCLKFreq+0x58>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	58024400 	.word	0x58024400
 80046a8:	0800aa3c 	.word	0x0800aa3c
 80046ac:	24000004 	.word	0x24000004
 80046b0:	24000000 	.word	0x24000000

080046b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046b8:	f7ff ffcc 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4904      	ldr	r1, [pc, #16]	@ (80046dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	58024400 	.word	0x58024400
 80046dc:	0800aa3c 	.word	0x0800aa3c

080046e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80046e4:	f7ff ffb6 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	@ (8004708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	58024400 	.word	0x58024400
 8004708:	0800aa3c 	.word	0x0800aa3c

0800470c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800470c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004710:	b0ca      	sub	sp, #296	@ 0x128
 8004712:	af00      	add	r7, sp, #0
 8004714:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004730:	2500      	movs	r5, #0
 8004732:	ea54 0305 	orrs.w	r3, r4, r5
 8004736:	d049      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800473e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004742:	d02f      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004744:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004748:	d828      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800474a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800474e:	d01a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004754:	d822      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800475e:	d007      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004760:	e01c      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004762:	4bb8      	ldr	r3, [pc, #736]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	4ab7      	ldr	r2, [pc, #732]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800476e:	e01a      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	3308      	adds	r3, #8
 8004776:	2102      	movs	r1, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fc8f 	bl	800609c <RCCEx_PLL2_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004784:	e00f      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	3328      	adds	r3, #40	@ 0x28
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fd36 	bl	8006200 <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800479a:	e004      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80047a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047ae:	4ba5      	ldr	r3, [pc, #660]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047bc:	4aa1      	ldr	r2, [pc, #644]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047be:	430b      	orrs	r3, r1
 80047c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80047c2:	e003      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80047d8:	f04f 0900 	mov.w	r9, #0
 80047dc:	ea58 0309 	orrs.w	r3, r8, r9
 80047e0:	d047      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d82a      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80047ec:	a201      	add	r2, pc, #4	@ (adr r2, 80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004809 	.word	0x08004809
 80047f8:	08004817 	.word	0x08004817
 80047fc:	0800482d 	.word	0x0800482d
 8004800:	0800484b 	.word	0x0800484b
 8004804:	0800484b 	.word	0x0800484b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004808:	4b8e      	ldr	r3, [pc, #568]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	4a8d      	ldr	r2, [pc, #564]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800480e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004814:	e01a      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3308      	adds	r3, #8
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fc3c 	bl	800609c <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800482a:	e00f      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	3328      	adds	r3, #40	@ 0x28
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f001 fce3 	bl	8006200 <RCCEx_PLL3_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004840:	e004      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800484a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800484c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004854:	4b7b      	ldr	r3, [pc, #492]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	f023 0107 	bic.w	r1, r3, #7
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	4a78      	ldr	r2, [pc, #480]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004864:	430b      	orrs	r3, r1
 8004866:	6513      	str	r3, [r2, #80]	@ 0x50
 8004868:	e003      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800487e:	f04f 0b00 	mov.w	fp, #0
 8004882:	ea5a 030b 	orrs.w	r3, sl, fp
 8004886:	d04c      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004892:	d030      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004898:	d829      	bhi.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800489a:	2bc0      	cmp	r3, #192	@ 0xc0
 800489c:	d02d      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800489e:	2bc0      	cmp	r3, #192	@ 0xc0
 80048a0:	d825      	bhi.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048a2:	2b80      	cmp	r3, #128	@ 0x80
 80048a4:	d018      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80048a6:	2b80      	cmp	r3, #128	@ 0x80
 80048a8:	d821      	bhi.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80048ae:	2b40      	cmp	r3, #64	@ 0x40
 80048b0:	d007      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80048b2:	e01c      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b4:	4b63      	ldr	r3, [pc, #396]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	4a62      	ldr	r2, [pc, #392]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048c0:	e01c      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	3308      	adds	r3, #8
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fbe6 	bl	800609c <RCCEx_PLL2_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048d6:	e011      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	3328      	adds	r3, #40	@ 0x28
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fc8d 	bl	8006200 <RCCEx_PLL3_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80048fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004904:	4b4f      	ldr	r3, [pc, #316]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004908:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	4a4c      	ldr	r2, [pc, #304]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004914:	430b      	orrs	r3, r1
 8004916:	6513      	str	r3, [r2, #80]	@ 0x50
 8004918:	e003      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800492e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004938:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d053      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800494a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800494e:	d035      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004954:	d82e      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004956:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800495a:	d031      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800495c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004960:	d828      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004966:	d01a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800496c:	d822      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004976:	d007      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004978:	e01c      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497a:	4b32      	ldr	r3, [pc, #200]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	4a31      	ldr	r2, [pc, #196]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004986:	e01c      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498c:	3308      	adds	r3, #8
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fb83 	bl	800609c <RCCEx_PLL2_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800499c:	e011      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	3328      	adds	r3, #40	@ 0x28
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fc2a 	bl	8006200 <RCCEx_PLL3_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b2:	e006      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80049c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049da:	4a1a      	ldr	r2, [pc, #104]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049dc:	430b      	orrs	r3, r1
 80049de:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e0:	e003      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80049f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049fa:	2300      	movs	r3, #0
 80049fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a04:	460b      	mov	r3, r1
 8004a06:	4313      	orrs	r3, r2
 8004a08:	d056      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a16:	d038      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a1c:	d831      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a22:	d034      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004a24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a28:	d82b      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a2e:	d01d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a34:	d825      	bhi.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d006      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004a3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a40:	e01f      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a48:	4ba2      	ldr	r3, [pc, #648]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	4aa1      	ldr	r2, [pc, #644]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a54:	e01c      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fb1c 	bl	800609c <RCCEx_PLL2_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a6a:	e011      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	3328      	adds	r3, #40	@ 0x28
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fbc3 	bl	8006200 <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a88:	e002      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a98:	4b8e      	ldr	r3, [pc, #568]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aa8:	4a8a      	ldr	r2, [pc, #552]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ace:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d03a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	2b30      	cmp	r3, #48	@ 0x30
 8004ae0:	d01f      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004ae2:	2b30      	cmp	r3, #48	@ 0x30
 8004ae4:	d819      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d00c      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d815      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d019      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d111      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af6:	4b77      	ldr	r3, [pc, #476]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	4a76      	ldr	r2, [pc, #472]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b02:	e011      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fac5 	bl	800609c <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b18:	e006      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b30:	4b68      	ldr	r3, [pc, #416]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b3e:	4a65      	ldr	r2, [pc, #404]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d051      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b78:	d035      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7e:	d82e      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b84:	d031      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004b86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b8a:	d828      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b90:	d01a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b96:	d822      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba0:	d007      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ba2:	e01c      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bb0:	e01c      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fa6e 	bl	800609c <RCCEx_PLL2_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bc6:	e011      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	3328      	adds	r3, #40	@ 0x28
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fb15 	bl	8006200 <RCCEx_PLL3_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bf4:	4b37      	ldr	r3, [pc, #220]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c02:	4a34      	ldr	r2, [pc, #208]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d056      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c3c:	d033      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c42:	d82c      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c48:	d02f      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c4e:	d826      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c54:	d02b      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004c56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c5a:	d820      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c60:	d012      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c66:	d81a      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d022      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c70:	d115      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	3308      	adds	r3, #8
 8004c78:	2101      	movs	r1, #1
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fa0e 	bl	800609c <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c86:	e015      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	3328      	adds	r3, #40	@ 0x28
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 fab5 	bl	8006200 <RCCEx_PLL3_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e004      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cbc:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cca:	4a02      	ldr	r2, [pc, #8]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004cec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cf6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d055      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d0c:	d033      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d12:	d82c      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d18:	d02f      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1e:	d826      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d24:	d02b      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d2a:	d820      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d30:	d012      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d36:	d81a      	bhi.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d022      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d40:	d115      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	3308      	adds	r3, #8
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 f9a6 	bl	800609c <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d56:	e015      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5c:	3328      	adds	r3, #40	@ 0x28
 8004d5e:	2101      	movs	r1, #1
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fa4d 	bl	8006200 <RCCEx_PLL3_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d74:	e006      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d8c:	4ba3      	ldr	r3, [pc, #652]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d9c:	4a9f      	ldr	r2, [pc, #636]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004db8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d037      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd6:	d00e      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ddc:	d816      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d018      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de6:	d111      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de8:	4b8c      	ldr	r3, [pc, #560]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	4a8b      	ldr	r2, [pc, #556]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004df4:	e00f      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f94c 	bl	800609c <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e0a:	e004      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	4a7b      	ldr	r2, [pc, #492]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d039      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d81c      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ea9 	.word	0x08004ea9
 8004e70:	08004e7d 	.word	0x08004e7d
 8004e74:	08004e8b 	.word	0x08004e8b
 8004e78:	08004ea9 	.word	0x08004ea9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7c:	4b67      	ldr	r3, [pc, #412]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	4a66      	ldr	r2, [pc, #408]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	3308      	adds	r3, #8
 8004e90:	2102      	movs	r1, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 f902 	bl	800609c <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb6:	f023 0103 	bic.w	r1, r3, #3
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec0:	4a56      	ldr	r2, [pc, #344]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ee6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f000 809f 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efe:	f7fc fde3 	bl	8001ac8 <HAL_GetTick>
 8004f02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f06:	e00b      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fc fdde 	bl	8001ac8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	@ 0x64
 8004f16:	d903      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1e:	e005      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f20:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ed      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d179      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f34:	4b39      	ldr	r3, [pc, #228]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f40:	4053      	eors	r3, r2
 8004f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d015      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f4a:	4b34      	ldr	r3, [pc, #208]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f56:	4b31      	ldr	r3, [pc, #196]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a30      	ldr	r2, [pc, #192]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f62:	4b2e      	ldr	r3, [pc, #184]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a2d      	ldr	r2, [pc, #180]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f82:	d118      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc fda0 	bl	8001ac8 <HAL_GetTick>
 8004f88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f8c:	e00d      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fc fd9b 	bl	8001ac8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d903      	bls.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004fa8:	e005      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004faa:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0eb      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d129      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fce:	d10e      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004fd0:	4b12      	ldr	r3, [pc, #72]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fe0:	091a      	lsrs	r2, r3, #4
 8004fe2:	4b10      	ldr	r3, [pc, #64]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6113      	str	r3, [r2, #16]
 8004fec:	e005      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004fee:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ff8:	6113      	str	r3, [r2, #16]
 8004ffa:	4b08      	ldr	r3, [pc, #32]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ffc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	4a04      	ldr	r2, [pc, #16]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800500c:	430b      	orrs	r3, r1
 800500e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005010:	e00e      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800501a:	e009      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800501c:	58024400 	.word	0x58024400
 8005020:	58024800 	.word	0x58024800
 8005024:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800502c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f002 0301 	and.w	r3, r2, #1
 800503c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005046:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	f000 8089 	beq.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005058:	2b28      	cmp	r3, #40	@ 0x28
 800505a:	d86b      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	0800513d 	.word	0x0800513d
 8005068:	08005135 	.word	0x08005135
 800506c:	08005135 	.word	0x08005135
 8005070:	08005135 	.word	0x08005135
 8005074:	08005135 	.word	0x08005135
 8005078:	08005135 	.word	0x08005135
 800507c:	08005135 	.word	0x08005135
 8005080:	08005135 	.word	0x08005135
 8005084:	08005109 	.word	0x08005109
 8005088:	08005135 	.word	0x08005135
 800508c:	08005135 	.word	0x08005135
 8005090:	08005135 	.word	0x08005135
 8005094:	08005135 	.word	0x08005135
 8005098:	08005135 	.word	0x08005135
 800509c:	08005135 	.word	0x08005135
 80050a0:	08005135 	.word	0x08005135
 80050a4:	0800511f 	.word	0x0800511f
 80050a8:	08005135 	.word	0x08005135
 80050ac:	08005135 	.word	0x08005135
 80050b0:	08005135 	.word	0x08005135
 80050b4:	08005135 	.word	0x08005135
 80050b8:	08005135 	.word	0x08005135
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005135 	.word	0x08005135
 80050c4:	0800513d 	.word	0x0800513d
 80050c8:	08005135 	.word	0x08005135
 80050cc:	08005135 	.word	0x08005135
 80050d0:	08005135 	.word	0x08005135
 80050d4:	08005135 	.word	0x08005135
 80050d8:	08005135 	.word	0x08005135
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005135 	.word	0x08005135
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	08005135 	.word	0x08005135
 80050ec:	08005135 	.word	0x08005135
 80050f0:	08005135 	.word	0x08005135
 80050f4:	08005135 	.word	0x08005135
 80050f8:	08005135 	.word	0x08005135
 80050fc:	08005135 	.word	0x08005135
 8005100:	08005135 	.word	0x08005135
 8005104:	0800513d 	.word	0x0800513d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510c:	3308      	adds	r3, #8
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f000 ffc3 	bl	800609c <RCCEx_PLL2_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800511c:	e00f      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	3328      	adds	r3, #40	@ 0x28
 8005124:	2101      	movs	r1, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f86a 	bl	8006200 <RCCEx_PLL3_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005146:	4bbf      	ldr	r3, [pc, #764]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005154:	4abb      	ldr	r2, [pc, #748]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6553      	str	r3, [r2, #84]	@ 0x54
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f002 0302 	and.w	r3, r2, #2
 8005170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800517a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800517e:	460b      	mov	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	d041      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800518a:	2b05      	cmp	r3, #5
 800518c:	d824      	bhi.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800518e:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051e1 	.word	0x080051e1
 8005198:	080051ad 	.word	0x080051ad
 800519c:	080051c3 	.word	0x080051c3
 80051a0:	080051e1 	.word	0x080051e1
 80051a4:	080051e1 	.word	0x080051e1
 80051a8:	080051e1 	.word	0x080051e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b0:	3308      	adds	r3, #8
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 ff71 	bl	800609c <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051c0:	e00f      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c6:	3328      	adds	r3, #40	@ 0x28
 80051c8:	2101      	movs	r1, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 f818 	bl	8006200 <RCCEx_PLL3_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051d6:	e004      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051de:	e000      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80051e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ea:	4b96      	ldr	r3, [pc, #600]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ee:	f023 0107 	bic.w	r1, r3, #7
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051f8:	4a92      	ldr	r2, [pc, #584]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f002 0304 	and.w	r3, r2, #4
 8005214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800521e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d044      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005230:	2b05      	cmp	r3, #5
 8005232:	d825      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005234:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005289 	.word	0x08005289
 8005240:	08005255 	.word	0x08005255
 8005244:	0800526b 	.word	0x0800526b
 8005248:	08005289 	.word	0x08005289
 800524c:	08005289 	.word	0x08005289
 8005250:	08005289 	.word	0x08005289
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005258:	3308      	adds	r3, #8
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 ff1d 	bl	800609c <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	2101      	movs	r1, #1
 8005272:	4618      	mov	r0, r3
 8005274:	f000 ffc4 	bl	8006200 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005292:	4b6c      	ldr	r3, [pc, #432]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	f023 0107 	bic.w	r1, r3, #7
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a2:	4a68      	ldr	r2, [pc, #416]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f002 0320 	and.w	r3, r2, #32
 80052be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052cc:	460b      	mov	r3, r1
 80052ce:	4313      	orrs	r3, r2
 80052d0:	d055      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052de:	d033      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80052e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052e4:	d82c      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ea:	d02f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f0:	d826      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052f6:	d02b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80052f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052fc:	d820      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80052fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005302:	d012      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005308:	d81a      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d022      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800530e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005312:	d115      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	3308      	adds	r3, #8
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f000 febd 	bl	800609c <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005328:	e015      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	3328      	adds	r3, #40	@ 0x28
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f000 ff64 	bl	8006200 <RCCEx_PLL3_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800533e:	e00a      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005346:	e006      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005348:	bf00      	nop
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800535e:	4b39      	ldr	r3, [pc, #228]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536e:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005370:	430b      	orrs	r3, r1
 8005372:	6553      	str	r3, [r2, #84]	@ 0x54
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800538a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005394:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d058      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800539e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053aa:	d033      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80053ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053b0:	d82c      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b6:	d02f      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053bc:	d826      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053c2:	d02b      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80053c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053c8:	d820      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ce:	d012      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80053d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d4:	d81a      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d022      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053de:	d115      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e4:	3308      	adds	r3, #8
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fe57 	bl	800609c <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053f4:	e015      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	3328      	adds	r3, #40	@ 0x28
 80053fc:	2102      	movs	r1, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fefe 	bl	8006200 <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800540a:	e00a      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005412:	e006      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005414:	bf00      	nop
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005418:	bf00      	nop
 800541a:	e002      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10e      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800542a:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800543a:	4a02      	ldr	r2, [pc, #8]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800543c:	430b      	orrs	r3, r1
 800543e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005442:	bf00      	nop
 8005444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005466:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d055      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005478:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800547c:	d033      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800547e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005482:	d82c      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005488:	d02f      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800548a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800548e:	d826      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005490:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005494:	d02b      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005496:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800549a:	d820      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800549c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a0:	d012      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80054a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a6:	d81a      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d022      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80054ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b0:	d115      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	3308      	adds	r3, #8
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fdee 	bl	800609c <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054c6:	e015      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054cc:	3328      	adds	r3, #40	@ 0x28
 80054ce:	2102      	movs	r1, #2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fe95 	bl	8006200 <RCCEx_PLL3_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054dc:	e00a      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054e4:	e006      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054e6:	bf00      	nop
 80054e8:	e004      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80054f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005500:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800550c:	4a9d      	ldr	r2, [pc, #628]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6593      	str	r3, [r2, #88]	@ 0x58
 8005512:	e003      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800551c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f002 0308 	and.w	r3, r2, #8
 8005528:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005532:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005536:	460b      	mov	r3, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	d01e      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005548:	d10c      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fe54 	bl	8006200 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005564:	4b87      	ldr	r3, [pc, #540]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800556c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005574:	4a83      	ldr	r2, [pc, #524]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005576:	430b      	orrs	r3, r1
 8005578:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f002 0310 	and.w	r3, r2, #16
 8005586:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005590:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d01e      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a6:	d10c      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ac:	3328      	adds	r3, #40	@ 0x28
 80055ae:	2102      	movs	r1, #2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fe25 	bl	8006200 <RCCEx_PLL3_Config>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055c2:	4b70      	ldr	r3, [pc, #448]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80055e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80055f2:	460b      	mov	r3, r1
 80055f4:	4313      	orrs	r3, r2
 80055f6:	d03e      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005604:	d022      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800560a:	d81b      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005614:	d00b      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005616:	e015      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	3308      	adds	r3, #8
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fd3b 	bl	800609c <RCCEx_PLL2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800562c:	e00f      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	3328      	adds	r3, #40	@ 0x28
 8005634:	2102      	movs	r1, #2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fde2 	bl	8006200 <RCCEx_PLL3_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005642:	e004      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800564a:	e000      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800564c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005656:	4b4b      	ldr	r3, [pc, #300]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005662:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005666:	4a47      	ldr	r2, [pc, #284]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005668:	430b      	orrs	r3, r1
 800566a:	6593      	str	r3, [r2, #88]	@ 0x58
 800566c:	e003      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005682:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005684:	2300      	movs	r3, #0
 8005686:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005688:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800568c:	460b      	mov	r3, r1
 800568e:	4313      	orrs	r3, r2
 8005690:	d03b      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800569e:	d01f      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80056a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056a4:	d818      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056aa:	d003      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80056ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056b0:	d007      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80056b2:	e011      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b4:	4b33      	ldr	r3, [pc, #204]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	4a32      	ldr	r2, [pc, #200]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80056c0:	e00f      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	3328      	adds	r3, #40	@ 0x28
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fd98 	bl	8006200 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80056e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ea:	4b26      	ldr	r3, [pc, #152]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	4a22      	ldr	r2, [pc, #136]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005716:	673b      	str	r3, [r7, #112]	@ 0x70
 8005718:	2300      	movs	r3, #0
 800571a:	677b      	str	r3, [r7, #116]	@ 0x74
 800571c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005720:	460b      	mov	r3, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	d034      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005734:	d007      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005736:	e011      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4b12      	ldr	r3, [pc, #72]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	4a11      	ldr	r2, [pc, #68]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005744:	e00e      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	3308      	adds	r3, #8
 800574c:	2102      	movs	r1, #2
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fca4 	bl	800609c <RCCEx_PLL2_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800575a:	e003      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10d      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	4a02      	ldr	r2, [pc, #8]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800577c:	430b      	orrs	r3, r1
 800577e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005780:	e006      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800579c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800579e:	2300      	movs	r3, #0
 80057a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d00c      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	3328      	adds	r3, #40	@ 0x28
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fd23 	bl	8006200 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80057d4:	2300      	movs	r3, #0
 80057d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80057d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d038      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ee:	d018      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80057f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057f4:	d811      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80057f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057fa:	d014      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80057fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005800:	d80b      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d011      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580a:	d106      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800580c:	4bc3      	ldr	r3, [pc, #780]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4ac2      	ldr	r2, [pc, #776]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005818:	e008      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005820:	e004      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800582a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005834:	4bb9      	ldr	r3, [pc, #740]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005838:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005844:	4ab5      	ldr	r2, [pc, #724]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005846:	430b      	orrs	r3, r1
 8005848:	6553      	str	r3, [r2, #84]	@ 0x54
 800584a:	e003      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005860:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005862:	2300      	movs	r3, #0
 8005864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005866:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005870:	4baa      	ldr	r3, [pc, #680]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005874:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587e:	4aa7      	ldr	r2, [pc, #668]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005880:	430b      	orrs	r3, r1
 8005882:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005890:	653b      	str	r3, [r7, #80]	@ 0x50
 8005892:	2300      	movs	r3, #0
 8005894:	657b      	str	r3, [r7, #84]	@ 0x54
 8005896:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058a0:	4b9e      	ldr	r3, [pc, #632]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058b0:	4a9a      	ldr	r2, [pc, #616]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058c4:	2300      	movs	r3, #0
 80058c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058d2:	4b92      	ldr	r3, [pc, #584]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e0:	4a8e      	ldr	r2, [pc, #568]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80058f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80058f4:	2300      	movs	r3, #0
 80058f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005902:	4b86      	ldr	r3, [pc, #536]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	4a85      	ldr	r2, [pc, #532]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005908:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800590c:	6113      	str	r3, [r2, #16]
 800590e:	4b83      	ldr	r3, [pc, #524]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005910:	6919      	ldr	r1, [r3, #16]
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800591a:	4a80      	ldr	r2, [pc, #512]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800591c:	430b      	orrs	r3, r1
 800591e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800592c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800592e:	2300      	movs	r3, #0
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005932:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800593c:	4b77      	ldr	r3, [pc, #476]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800593e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005940:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594a:	4a74      	ldr	r2, [pc, #464]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800594c:	430b      	orrs	r3, r1
 800594e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
 8005962:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800596c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800596e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005970:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800597c:	4a67      	ldr	r2, [pc, #412]	@ (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597e:	430b      	orrs	r3, r1
 8005980:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	2100      	movs	r1, #0
 800598c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005994:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d011      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	3308      	adds	r3, #8
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fb78 	bl	800609c <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	2100      	movs	r1, #0
 80059cc:	6239      	str	r1, [r7, #32]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059d8:	460b      	mov	r3, r1
 80059da:	4313      	orrs	r3, r2
 80059dc:	d011      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e2:	3308      	adds	r3, #8
 80059e4:	2101      	movs	r1, #1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fb58 	bl	800609c <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	61b9      	str	r1, [r7, #24]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d011      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	3308      	adds	r3, #8
 8005a24:	2102      	movs	r1, #2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fb38 	bl	800609c <RCCEx_PLL2_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	6139      	str	r1, [r7, #16]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d011      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	3328      	adds	r3, #40	@ 0x28
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fbca 	bl	8006200 <RCCEx_PLL3_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d011      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	3328      	adds	r3, #40	@ 0x28
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fbaa 	bl	8006200 <RCCEx_PLL3_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	2100      	movs	r1, #0
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4313      	orrs	r3, r2
 8005adc:	d011      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	3328      	adds	r3, #40	@ 0x28
 8005ae4:	2102      	movs	r1, #2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fb8a 	bl	8006200 <RCCEx_PLL3_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005b02:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1c:	58024400 	.word	0x58024400

08005b20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b24:	f7fe fd96 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4904      	ldr	r1, [pc, #16]	@ (8005b48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	58024400 	.word	0x58024400
 8005b48:	0800aa3c 	.word	0x0800aa3c

08005b4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b089      	sub	sp, #36	@ 0x24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b54:	4ba1      	ldr	r3, [pc, #644]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	0b1b      	lsrs	r3, r3, #12
 8005b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b6a:	4b9c      	ldr	r3, [pc, #624]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b76:	4b99      	ldr	r3, [pc, #612]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7a:	08db      	lsrs	r3, r3, #3
 8005b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8111 	beq.w	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	f000 8083 	beq.w	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	f200 80a1 	bhi.w	8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d056      	beq.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bb6:	e099      	b.n	8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb8:	4b88      	ldr	r3, [pc, #544]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02d      	beq.n	8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bc4:	4b85      	ldr	r3, [pc, #532]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	08db      	lsrs	r3, r3, #3
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	4a84      	ldr	r2, [pc, #528]	@ (8005de0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b7b      	ldr	r3, [pc, #492]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c1e:	e087      	b.n	8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b6a      	ldr	r3, [pc, #424]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c62:	e065      	b.n	8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b59      	ldr	r3, [pc, #356]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca6:	e043      	b.n	8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cba:	4b48      	ldr	r3, [pc, #288]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cea:	e021      	b.n	8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfe:	4b37      	ldr	r3, [pc, #220]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d30:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d34:	0a5b      	lsrs	r3, r3, #9
 8005d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d56:	ee17 2a90 	vmov	r2, s15
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d84:	ee17 2a90 	vmov	r2, s15
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d90:	0e1b      	lsrs	r3, r3, #24
 8005d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db2:	ee17 2a90 	vmov	r2, s15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dba:	e008      	b.n	8005dce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	609a      	str	r2, [r3, #8]
}
 8005dce:	bf00      	nop
 8005dd0:	3724      	adds	r7, #36	@ 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	58024400 	.word	0x58024400
 8005de0:	03d09000 	.word	0x03d09000
 8005de4:	46000000 	.word	0x46000000
 8005de8:	4c742400 	.word	0x4c742400
 8005dec:	4a742400 	.word	0x4a742400
 8005df0:	4af42400 	.word	0x4af42400

08005df4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	@ 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dfc:	4ba1      	ldr	r3, [pc, #644]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e06:	4b9f      	ldr	r3, [pc, #636]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	0d1b      	lsrs	r3, r3, #20
 8005e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e12:	4b9c      	ldr	r3, [pc, #624]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e1e:	4b99      	ldr	r3, [pc, #612]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	08db      	lsrs	r3, r3, #3
 8005e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8111 	beq.w	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	f000 8083 	beq.w	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	f200 80a1 	bhi.w	8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d056      	beq.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e5e:	e099      	b.n	8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e60:	4b88      	ldr	r3, [pc, #544]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d02d      	beq.n	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e6c:	4b85      	ldr	r3, [pc, #532]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	08db      	lsrs	r3, r3, #3
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	4a84      	ldr	r2, [pc, #528]	@ (8006088 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b7b      	ldr	r3, [pc, #492]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ec6:	e087      	b.n	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b6a      	ldr	r3, [pc, #424]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f0a:	e065      	b.n	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b59      	ldr	r3, [pc, #356]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4e:	e043      	b.n	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006098 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f62:	4b48      	ldr	r3, [pc, #288]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f92:	e021      	b.n	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa6:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800608c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	0a5b      	lsrs	r3, r3, #9
 8005fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffe:	ee17 2a90 	vmov	r2, s15
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006006:	4b1f      	ldr	r3, [pc, #124]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	0c1b      	lsrs	r3, r3, #16
 800600c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800601c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006020:	edd7 6a07 	vldr	s13, [r7, #28]
 8006024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800602c:	ee17 2a90 	vmov	r2, s15
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006034:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	0e1b      	lsrs	r3, r3, #24
 800603a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800604a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800604e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 2a90 	vmov	r2, s15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006062:	e008      	b.n	8006076 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
}
 8006076:	bf00      	nop
 8006078:	3724      	adds	r7, #36	@ 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	58024400 	.word	0x58024400
 8006088:	03d09000 	.word	0x03d09000
 800608c:	46000000 	.word	0x46000000
 8006090:	4c742400 	.word	0x4c742400
 8006094:	4a742400 	.word	0x4a742400
 8006098:	4af42400 	.word	0x4af42400

0800609c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060aa:	4b53      	ldr	r3, [pc, #332]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d101      	bne.n	80060ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e099      	b.n	80061ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060ba:	4b4f      	ldr	r3, [pc, #316]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a4e      	ldr	r2, [pc, #312]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80060c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c6:	f7fb fcff 	bl	8001ac8 <HAL_GetTick>
 80060ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060cc:	e008      	b.n	80060e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060ce:	f7fb fcfb 	bl	8001ac8 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e086      	b.n	80061ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060e0:	4b45      	ldr	r3, [pc, #276]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060ec:	4b42      	ldr	r3, [pc, #264]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	031b      	lsls	r3, r3, #12
 80060fa:	493f      	ldr	r1, [pc, #252]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	3b01      	subs	r3, #1
 8006106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	3b01      	subs	r3, #1
 8006110:	025b      	lsls	r3, r3, #9
 8006112:	b29b      	uxth	r3, r3
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	3b01      	subs	r3, #1
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	3b01      	subs	r3, #1
 800612a:	061b      	lsls	r3, r3, #24
 800612c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006130:	4931      	ldr	r1, [pc, #196]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006136:	4b30      	ldr	r3, [pc, #192]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	492d      	ldr	r1, [pc, #180]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006144:	4313      	orrs	r3, r2
 8006146:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006148:	4b2b      	ldr	r3, [pc, #172]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	f023 0220 	bic.w	r2, r3, #32
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	4928      	ldr	r1, [pc, #160]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006156:	4313      	orrs	r3, r2
 8006158:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800615a:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	4a26      	ldr	r2, [pc, #152]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006160:	f023 0310 	bic.w	r3, r3, #16
 8006164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006166:	4b24      	ldr	r3, [pc, #144]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800616a:	4b24      	ldr	r3, [pc, #144]	@ (80061fc <RCCEx_PLL2_Config+0x160>)
 800616c:	4013      	ands	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	69d2      	ldr	r2, [r2, #28]
 8006172:	00d2      	lsls	r2, r2, #3
 8006174:	4920      	ldr	r1, [pc, #128]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006176:	4313      	orrs	r3, r2
 8006178:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800617a:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	4a1e      	ldr	r2, [pc, #120]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006180:	f043 0310 	orr.w	r3, r3, #16
 8006184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d106      	bne.n	800619a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800618c:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 8006192:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006198:	e00f      	b.n	80061ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d106      	bne.n	80061ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061a0:	4b15      	ldr	r3, [pc, #84]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a14      	ldr	r2, [pc, #80]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061ac:	e005      	b.n	80061ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ae:	4b12      	ldr	r3, [pc, #72]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	4a11      	ldr	r2, [pc, #68]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061ba:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a0e      	ldr	r2, [pc, #56]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c6:	f7fb fc7f 	bl	8001ac8 <HAL_GetTick>
 80061ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061cc:	e008      	b.n	80061e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061ce:	f7fb fc7b 	bl	8001ac8 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e006      	b.n	80061ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
 80061fc:	ffff0007 	.word	0xffff0007

08006200 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800620e:	4b53      	ldr	r3, [pc, #332]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d101      	bne.n	800621e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e099      	b.n	8006352 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800621e:	4b4f      	ldr	r3, [pc, #316]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a4e      	ldr	r2, [pc, #312]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622a:	f7fb fc4d 	bl	8001ac8 <HAL_GetTick>
 800622e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006230:	e008      	b.n	8006244 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006232:	f7fb fc49 	bl	8001ac8 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e086      	b.n	8006352 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006244:	4b45      	ldr	r3, [pc, #276]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006250:	4b42      	ldr	r3, [pc, #264]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	051b      	lsls	r3, r3, #20
 800625e:	493f      	ldr	r1, [pc, #252]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006260:	4313      	orrs	r3, r2
 8006262:	628b      	str	r3, [r1, #40]	@ 0x28
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	3b01      	subs	r3, #1
 800626a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	3b01      	subs	r3, #1
 8006274:	025b      	lsls	r3, r3, #9
 8006276:	b29b      	uxth	r3, r3
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	3b01      	subs	r3, #1
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006294:	4931      	ldr	r1, [pc, #196]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800629a:	4b30      	ldr	r3, [pc, #192]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	492d      	ldr	r1, [pc, #180]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	4928      	ldr	r1, [pc, #160]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062be:	4b27      	ldr	r3, [pc, #156]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	4a26      	ldr	r2, [pc, #152]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062ca:	4b24      	ldr	r3, [pc, #144]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ce:	4b24      	ldr	r3, [pc, #144]	@ (8006360 <RCCEx_PLL3_Config+0x160>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	69d2      	ldr	r2, [r2, #28]
 80062d6:	00d2      	lsls	r2, r2, #3
 80062d8:	4920      	ldr	r1, [pc, #128]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062de:	4b1f      	ldr	r3, [pc, #124]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	4a1e      	ldr	r2, [pc, #120]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062f0:	4b1a      	ldr	r3, [pc, #104]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	4a19      	ldr	r2, [pc, #100]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 80062f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062fc:	e00f      	b.n	800631e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d106      	bne.n	8006312 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006304:	4b15      	ldr	r3, [pc, #84]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	4a14      	ldr	r2, [pc, #80]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 800630a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800630e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006310:	e005      	b.n	800631e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006316:	4a11      	ldr	r2, [pc, #68]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800631c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800631e:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a0e      	ldr	r2, [pc, #56]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632a:	f7fb fbcd 	bl	8001ac8 <HAL_GetTick>
 800632e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006330:	e008      	b.n	8006344 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006332:	f7fb fbc9 	bl	8001ac8 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e006      	b.n	8006352 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006344:	4b05      	ldr	r3, [pc, #20]	@ (800635c <RCCEx_PLL3_Config+0x15c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	58024400 	.word	0x58024400
 8006360:	ffff0007 	.word	0xffff0007

08006364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e049      	b.n	800640a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fa ffee 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f000 fe1e 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	d001      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e054      	b.n	80064d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a26      	ldr	r2, [pc, #152]	@ (80064e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d022      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006456:	d01d      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a22      	ldr	r2, [pc, #136]	@ (80064e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d018      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1f      	ldr	r2, [pc, #124]	@ (80064f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00e      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1e      	ldr	r2, [pc, #120]	@ (80064f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d009      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1c      	ldr	r2, [pc, #112]	@ (80064f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x80>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1b      	ldr	r2, [pc, #108]	@ (80064fc <HAL_TIM_Base_Start_IT+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d115      	bne.n	80064c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	4b19      	ldr	r3, [pc, #100]	@ (8006500 <HAL_TIM_Base_Start_IT+0xec>)
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b06      	cmp	r3, #6
 80064a4:	d015      	beq.n	80064d2 <HAL_TIM_Base_Start_IT+0xbe>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ac:	d011      	beq.n	80064d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0201 	orr.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	e008      	b.n	80064d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e000      	b.n	80064d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40000c00 	.word	0x40000c00
 80064f4:	40010400 	.word	0x40010400
 80064f8:	40001800 	.word	0x40001800
 80064fc:	40014000 	.word	0x40014000
 8006500:	00010007 	.word	0x00010007

08006504 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006526:	4013      	ands	r3, r2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10f      	bne.n	800654c <HAL_TIM_Base_Stop_IT+0x48>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	f240 4344 	movw	r3, #1092	@ 0x444
 8006536:	4013      	ands	r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d107      	bne.n	800654c <HAL_TIM_Base_Stop_IT+0x48>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0201 	bic.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e049      	b.n	8006608 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f841 	bl	8006610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f000 fd1f 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <HAL_TIM_PWM_Start+0x24>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	bf14      	ite	ne
 8006640:	2301      	movne	r3, #1
 8006642:	2300      	moveq	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e03c      	b.n	80066c2 <HAL_TIM_PWM_Start+0x9e>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d109      	bne.n	8006662 <HAL_TIM_PWM_Start+0x3e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b01      	cmp	r3, #1
 8006658:	bf14      	ite	ne
 800665a:	2301      	movne	r3, #1
 800665c:	2300      	moveq	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	e02f      	b.n	80066c2 <HAL_TIM_PWM_Start+0x9e>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d109      	bne.n	800667c <HAL_TIM_PWM_Start+0x58>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	e022      	b.n	80066c2 <HAL_TIM_PWM_Start+0x9e>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b0c      	cmp	r3, #12
 8006680:	d109      	bne.n	8006696 <HAL_TIM_PWM_Start+0x72>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b01      	cmp	r3, #1
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	e015      	b.n	80066c2 <HAL_TIM_PWM_Start+0x9e>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b10      	cmp	r3, #16
 800669a:	d109      	bne.n	80066b0 <HAL_TIM_PWM_Start+0x8c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e008      	b.n	80066c2 <HAL_TIM_PWM_Start+0x9e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e0a1      	b.n	800680e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0xb6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066d8:	e023      	b.n	8006722 <HAL_TIM_PWM_Start+0xfe>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xc6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e8:	e01b      	b.n	8006722 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xd6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f8:	e013      	b.n	8006722 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	d104      	bne.n	800670a <HAL_TIM_PWM_Start+0xe6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006708:	e00b      	b.n	8006722 <HAL_TIM_PWM_Start+0xfe>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b10      	cmp	r3, #16
 800670e:	d104      	bne.n	800671a <HAL_TIM_PWM_Start+0xf6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006718:	e003      	b.n	8006722 <HAL_TIM_PWM_Start+0xfe>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2201      	movs	r2, #1
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f001 f874 	bl	8007818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a38      	ldr	r2, [pc, #224]	@ (8006818 <HAL_TIM_PWM_Start+0x1f4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_TIM_PWM_Start+0x13e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a37      	ldr	r2, [pc, #220]	@ (800681c <HAL_TIM_PWM_Start+0x1f8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00e      	beq.n	8006762 <HAL_TIM_PWM_Start+0x13e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a35      	ldr	r2, [pc, #212]	@ (8006820 <HAL_TIM_PWM_Start+0x1fc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d009      	beq.n	8006762 <HAL_TIM_PWM_Start+0x13e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a34      	ldr	r2, [pc, #208]	@ (8006824 <HAL_TIM_PWM_Start+0x200>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d004      	beq.n	8006762 <HAL_TIM_PWM_Start+0x13e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a32      	ldr	r2, [pc, #200]	@ (8006828 <HAL_TIM_PWM_Start+0x204>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d101      	bne.n	8006766 <HAL_TIM_PWM_Start+0x142>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <HAL_TIM_PWM_Start+0x144>
 8006766:	2300      	movs	r3, #0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800677a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a25      	ldr	r2, [pc, #148]	@ (8006818 <HAL_TIM_PWM_Start+0x1f4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d022      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678e:	d01d      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a25      	ldr	r2, [pc, #148]	@ (800682c <HAL_TIM_PWM_Start+0x208>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d018      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a24      	ldr	r2, [pc, #144]	@ (8006830 <HAL_TIM_PWM_Start+0x20c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a22      	ldr	r2, [pc, #136]	@ (8006834 <HAL_TIM_PWM_Start+0x210>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00e      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1a      	ldr	r2, [pc, #104]	@ (800681c <HAL_TIM_PWM_Start+0x1f8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d009      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006838 <HAL_TIM_PWM_Start+0x214>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d004      	beq.n	80067cc <HAL_TIM_PWM_Start+0x1a8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a16      	ldr	r2, [pc, #88]	@ (8006820 <HAL_TIM_PWM_Start+0x1fc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d115      	bne.n	80067f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	4b1a      	ldr	r3, [pc, #104]	@ (800683c <HAL_TIM_PWM_Start+0x218>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b06      	cmp	r3, #6
 80067dc:	d015      	beq.n	800680a <HAL_TIM_PWM_Start+0x1e6>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e4:	d011      	beq.n	800680a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0201 	orr.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f6:	e008      	b.n	800680a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	e000      	b.n	800680c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40010000 	.word	0x40010000
 800681c:	40010400 	.word	0x40010400
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40001800 	.word	0x40001800
 800683c:	00010007 	.word	0x00010007

08006840 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ffe0 	bl	8007818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a3e      	ldr	r2, [pc, #248]	@ (8006958 <HAL_TIM_PWM_Stop+0x118>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_TIM_PWM_Stop+0x4a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a3d      	ldr	r2, [pc, #244]	@ (800695c <HAL_TIM_PWM_Stop+0x11c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_TIM_PWM_Stop+0x4a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a3b      	ldr	r2, [pc, #236]	@ (8006960 <HAL_TIM_PWM_Stop+0x120>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_TIM_PWM_Stop+0x4a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a3a      	ldr	r2, [pc, #232]	@ (8006964 <HAL_TIM_PWM_Stop+0x124>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_TIM_PWM_Stop+0x4a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a38      	ldr	r2, [pc, #224]	@ (8006968 <HAL_TIM_PWM_Stop+0x128>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d101      	bne.n	800688e <HAL_TIM_PWM_Stop+0x4e>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <HAL_TIM_PWM_Stop+0x50>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10f      	bne.n	80068c4 <HAL_TIM_PWM_Stop+0x84>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d107      	bne.n	80068c4 <HAL_TIM_PWM_Stop+0x84>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10f      	bne.n	80068f4 <HAL_TIM_PWM_Stop+0xb4>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	f240 4344 	movw	r3, #1092	@ 0x444
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d107      	bne.n	80068f4 <HAL_TIM_PWM_Stop+0xb4>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d104      	bne.n	8006904 <HAL_TIM_PWM_Stop+0xc4>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006902:	e023      	b.n	800694c <HAL_TIM_PWM_Stop+0x10c>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d104      	bne.n	8006914 <HAL_TIM_PWM_Stop+0xd4>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006912:	e01b      	b.n	800694c <HAL_TIM_PWM_Stop+0x10c>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b08      	cmp	r3, #8
 8006918:	d104      	bne.n	8006924 <HAL_TIM_PWM_Stop+0xe4>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006922:	e013      	b.n	800694c <HAL_TIM_PWM_Stop+0x10c>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d104      	bne.n	8006934 <HAL_TIM_PWM_Stop+0xf4>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006932:	e00b      	b.n	800694c <HAL_TIM_PWM_Stop+0x10c>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b10      	cmp	r3, #16
 8006938:	d104      	bne.n	8006944 <HAL_TIM_PWM_Stop+0x104>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006942:	e003      	b.n	800694c <HAL_TIM_PWM_Stop+0x10c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400
 8006960:	40014000 	.word	0x40014000
 8006964:	40014400 	.word	0x40014400
 8006968:	40014800 	.word	0x40014800

0800696c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d020      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01b      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0202 	mvn.w	r2, #2
 80069a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 faf6 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fae8 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 faf9 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d020      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0204 	mvn.w	r2, #4
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fad0 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fac2 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fad3 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0208 	mvn.w	r2, #8
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 faaa 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa9c 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 faad 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d020      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0210 	mvn.w	r2, #16
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa84 	bl	8006fa8 <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa76 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa87 	bl	8006fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0201 	mvn.w	r2, #1
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fa fac8 	bl	8001068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00c      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 ff47 	bl	8007994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00c      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 ff3f 	bl	80079a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00c      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa41 	bl	8006fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00c      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f06f 0220 	mvn.w	r2, #32
 8006b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 ff07 	bl	8007980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0ff      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b14      	cmp	r3, #20
 8006ba6:	f200 80f0 	bhi.w	8006d8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006baa:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c05 	.word	0x08006c05
 8006bb4:	08006d8b 	.word	0x08006d8b
 8006bb8:	08006d8b 	.word	0x08006d8b
 8006bbc:	08006d8b 	.word	0x08006d8b
 8006bc0:	08006c45 	.word	0x08006c45
 8006bc4:	08006d8b 	.word	0x08006d8b
 8006bc8:	08006d8b 	.word	0x08006d8b
 8006bcc:	08006d8b 	.word	0x08006d8b
 8006bd0:	08006c87 	.word	0x08006c87
 8006bd4:	08006d8b 	.word	0x08006d8b
 8006bd8:	08006d8b 	.word	0x08006d8b
 8006bdc:	08006d8b 	.word	0x08006d8b
 8006be0:	08006cc7 	.word	0x08006cc7
 8006be4:	08006d8b 	.word	0x08006d8b
 8006be8:	08006d8b 	.word	0x08006d8b
 8006bec:	08006d8b 	.word	0x08006d8b
 8006bf0:	08006d09 	.word	0x08006d09
 8006bf4:	08006d8b 	.word	0x08006d8b
 8006bf8:	08006d8b 	.word	0x08006d8b
 8006bfc:	08006d8b 	.word	0x08006d8b
 8006c00:	08006d49 	.word	0x08006d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fa90 	bl	8007130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0208 	orr.w	r2, r2, #8
 8006c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0204 	bic.w	r2, r2, #4
 8006c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6999      	ldr	r1, [r3, #24]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	619a      	str	r2, [r3, #24]
      break;
 8006c42:	e0a5      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fb00 	bl	8007250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6999      	ldr	r1, [r3, #24]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	619a      	str	r2, [r3, #24]
      break;
 8006c84:	e084      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fb69 	bl	8007364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0208 	orr.w	r2, r2, #8
 8006ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0204 	bic.w	r2, r2, #4
 8006cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	61da      	str	r2, [r3, #28]
      break;
 8006cc4:	e064      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fbd1 	bl	8007474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	021a      	lsls	r2, r3, #8
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	61da      	str	r2, [r3, #28]
      break;
 8006d06:	e043      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fc1a 	bl	8007548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0208 	orr.w	r2, r2, #8
 8006d22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d46:	e023      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fc5e 	bl	8007610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d88:	e002      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e0dc      	b.n	8006f7a <HAL_TIM_ConfigClockSource+0x1d6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	4b6a      	ldr	r3, [pc, #424]	@ (8006f84 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a64      	ldr	r2, [pc, #400]	@ (8006f88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	f000 80a9 	beq.w	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006dfc:	4a62      	ldr	r2, [pc, #392]	@ (8006f88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	f200 80ae 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e04:	4a61      	ldr	r2, [pc, #388]	@ (8006f8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	f000 80a1 	beq.w	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8006f8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	f200 80a6 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e14:	4a5e      	ldr	r2, [pc, #376]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f000 8099 	beq.w	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	f200 809e 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e28:	f000 8091 	beq.w	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e30:	f200 8096 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e38:	f000 8089 	beq.w	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e40:	f200 808e 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e48:	d03e      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0x124>
 8006e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4e:	f200 8087 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e56:	f000 8086 	beq.w	8006f66 <HAL_TIM_ConfigClockSource+0x1c2>
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5e:	d87f      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e60:	2b70      	cmp	r3, #112	@ 0x70
 8006e62:	d01a      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0xf6>
 8006e64:	2b70      	cmp	r3, #112	@ 0x70
 8006e66:	d87b      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e68:	2b60      	cmp	r3, #96	@ 0x60
 8006e6a:	d050      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x16a>
 8006e6c:	2b60      	cmp	r3, #96	@ 0x60
 8006e6e:	d877      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e70:	2b50      	cmp	r3, #80	@ 0x50
 8006e72:	d03c      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0x14a>
 8006e74:	2b50      	cmp	r3, #80	@ 0x50
 8006e76:	d873      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e78:	2b40      	cmp	r3, #64	@ 0x40
 8006e7a:	d058      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x18a>
 8006e7c:	2b40      	cmp	r3, #64	@ 0x40
 8006e7e:	d86f      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e80:	2b30      	cmp	r3, #48	@ 0x30
 8006e82:	d064      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e84:	2b30      	cmp	r3, #48	@ 0x30
 8006e86:	d86b      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d060      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d867      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d05a      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x1aa>
 8006e98:	e062      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eaa:	f000 fc95 	bl	80077d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	609a      	str	r2, [r3, #8]
      break;
 8006ec6:	e04f      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ed8:	f000 fc7e 	bl	80077d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eea:	609a      	str	r2, [r3, #8]
      break;
 8006eec:	e03c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	461a      	mov	r2, r3
 8006efc:	f000 fbee 	bl	80076dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2150      	movs	r1, #80	@ 0x50
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fc48 	bl	800779c <TIM_ITRx_SetConfig>
      break;
 8006f0c:	e02c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f000 fc0d 	bl	800773a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2160      	movs	r1, #96	@ 0x60
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fc38 	bl	800779c <TIM_ITRx_SetConfig>
      break;
 8006f2c:	e01c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f000 fbce 	bl	80076dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2140      	movs	r1, #64	@ 0x40
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fc28 	bl	800779c <TIM_ITRx_SetConfig>
      break;
 8006f4c:	e00c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f000 fc1f 	bl	800779c <TIM_ITRx_SetConfig>
      break;
 8006f5e:	e003      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e000      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	ffceff88 	.word	0xffceff88
 8006f88:	00100040 	.word	0x00100040
 8006f8c:	00100030 	.word	0x00100030
 8006f90:	00100020 	.word	0x00100020

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a46      	ldr	r2, [pc, #280]	@ (8007110 <TIM_Base_SetConfig+0x12c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	d00f      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a43      	ldr	r2, [pc, #268]	@ (8007114 <TIM_Base_SetConfig+0x130>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00b      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a42      	ldr	r2, [pc, #264]	@ (8007118 <TIM_Base_SetConfig+0x134>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d007      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a41      	ldr	r2, [pc, #260]	@ (800711c <TIM_Base_SetConfig+0x138>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a40      	ldr	r2, [pc, #256]	@ (8007120 <TIM_Base_SetConfig+0x13c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d108      	bne.n	8007036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a35      	ldr	r2, [pc, #212]	@ (8007110 <TIM_Base_SetConfig+0x12c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d01f      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007044:	d01b      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a32      	ldr	r2, [pc, #200]	@ (8007114 <TIM_Base_SetConfig+0x130>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d017      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a31      	ldr	r2, [pc, #196]	@ (8007118 <TIM_Base_SetConfig+0x134>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a30      	ldr	r2, [pc, #192]	@ (800711c <TIM_Base_SetConfig+0x138>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00f      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2f      	ldr	r2, [pc, #188]	@ (8007120 <TIM_Base_SetConfig+0x13c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00b      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2e      	ldr	r2, [pc, #184]	@ (8007124 <TIM_Base_SetConfig+0x140>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d007      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2d      	ldr	r2, [pc, #180]	@ (8007128 <TIM_Base_SetConfig+0x144>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d003      	beq.n	800707e <TIM_Base_SetConfig+0x9a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2c      	ldr	r2, [pc, #176]	@ (800712c <TIM_Base_SetConfig+0x148>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d108      	bne.n	8007090 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a16      	ldr	r2, [pc, #88]	@ (8007110 <TIM_Base_SetConfig+0x12c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00f      	beq.n	80070dc <TIM_Base_SetConfig+0xf8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a18      	ldr	r2, [pc, #96]	@ (8007120 <TIM_Base_SetConfig+0x13c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00b      	beq.n	80070dc <TIM_Base_SetConfig+0xf8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a17      	ldr	r2, [pc, #92]	@ (8007124 <TIM_Base_SetConfig+0x140>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d007      	beq.n	80070dc <TIM_Base_SetConfig+0xf8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <TIM_Base_SetConfig+0x144>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_Base_SetConfig+0xf8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a15      	ldr	r2, [pc, #84]	@ (800712c <TIM_Base_SetConfig+0x148>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d103      	bne.n	80070e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d105      	bne.n	8007102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f023 0201 	bic.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	611a      	str	r2, [r3, #16]
  }
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40010000 	.word	0x40010000
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40010400 	.word	0x40010400
 8007124:	40014000 	.word	0x40014000
 8007128:	40014400 	.word	0x40014400
 800712c:	40014800 	.word	0x40014800

08007130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f023 0201 	bic.w	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4b37      	ldr	r3, [pc, #220]	@ (8007238 <TIM_OC1_SetConfig+0x108>)
 800715c:	4013      	ands	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 0302 	bic.w	r3, r3, #2
 8007178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a2d      	ldr	r2, [pc, #180]	@ (800723c <TIM_OC1_SetConfig+0x10c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00f      	beq.n	80071ac <TIM_OC1_SetConfig+0x7c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a2c      	ldr	r2, [pc, #176]	@ (8007240 <TIM_OC1_SetConfig+0x110>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_OC1_SetConfig+0x7c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a2b      	ldr	r2, [pc, #172]	@ (8007244 <TIM_OC1_SetConfig+0x114>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_OC1_SetConfig+0x7c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a2a      	ldr	r2, [pc, #168]	@ (8007248 <TIM_OC1_SetConfig+0x118>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC1_SetConfig+0x7c>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a29      	ldr	r2, [pc, #164]	@ (800724c <TIM_OC1_SetConfig+0x11c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d10c      	bne.n	80071c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f023 0308 	bic.w	r3, r3, #8
 80071b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 0304 	bic.w	r3, r3, #4
 80071c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a1c      	ldr	r2, [pc, #112]	@ (800723c <TIM_OC1_SetConfig+0x10c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00f      	beq.n	80071ee <TIM_OC1_SetConfig+0xbe>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007240 <TIM_OC1_SetConfig+0x110>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00b      	beq.n	80071ee <TIM_OC1_SetConfig+0xbe>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007244 <TIM_OC1_SetConfig+0x114>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d007      	beq.n	80071ee <TIM_OC1_SetConfig+0xbe>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a19      	ldr	r2, [pc, #100]	@ (8007248 <TIM_OC1_SetConfig+0x118>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d003      	beq.n	80071ee <TIM_OC1_SetConfig+0xbe>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a18      	ldr	r2, [pc, #96]	@ (800724c <TIM_OC1_SetConfig+0x11c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d111      	bne.n	8007212 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	621a      	str	r2, [r3, #32]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	fffeff8f 	.word	0xfffeff8f
 800723c:	40010000 	.word	0x40010000
 8007240:	40010400 	.word	0x40010400
 8007244:	40014000 	.word	0x40014000
 8007248:	40014400 	.word	0x40014400
 800724c:	40014800 	.word	0x40014800

08007250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f023 0210 	bic.w	r2, r3, #16
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4b34      	ldr	r3, [pc, #208]	@ (800734c <TIM_OC2_SetConfig+0xfc>)
 800727c:	4013      	ands	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0320 	bic.w	r3, r3, #32
 800729a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a29      	ldr	r2, [pc, #164]	@ (8007350 <TIM_OC2_SetConfig+0x100>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC2_SetConfig+0x68>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a28      	ldr	r2, [pc, #160]	@ (8007354 <TIM_OC2_SetConfig+0x104>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10d      	bne.n	80072d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007350 <TIM_OC2_SetConfig+0x100>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00f      	beq.n	80072fc <TIM_OC2_SetConfig+0xac>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1d      	ldr	r2, [pc, #116]	@ (8007354 <TIM_OC2_SetConfig+0x104>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00b      	beq.n	80072fc <TIM_OC2_SetConfig+0xac>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007358 <TIM_OC2_SetConfig+0x108>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d007      	beq.n	80072fc <TIM_OC2_SetConfig+0xac>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1b      	ldr	r2, [pc, #108]	@ (800735c <TIM_OC2_SetConfig+0x10c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d003      	beq.n	80072fc <TIM_OC2_SetConfig+0xac>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007360 <TIM_OC2_SetConfig+0x110>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d113      	bne.n	8007324 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800730a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	feff8fff 	.word	0xfeff8fff
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800

08007364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4b33      	ldr	r3, [pc, #204]	@ (800745c <TIM_OC3_SetConfig+0xf8>)
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a28      	ldr	r2, [pc, #160]	@ (8007460 <TIM_OC3_SetConfig+0xfc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC3_SetConfig+0x66>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a27      	ldr	r2, [pc, #156]	@ (8007464 <TIM_OC3_SetConfig+0x100>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10d      	bne.n	80073e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <TIM_OC3_SetConfig+0xfc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00f      	beq.n	800740e <TIM_OC3_SetConfig+0xaa>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <TIM_OC3_SetConfig+0x100>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00b      	beq.n	800740e <TIM_OC3_SetConfig+0xaa>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007468 <TIM_OC3_SetConfig+0x104>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <TIM_OC3_SetConfig+0xaa>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a1a      	ldr	r2, [pc, #104]	@ (800746c <TIM_OC3_SetConfig+0x108>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_OC3_SetConfig+0xaa>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a19      	ldr	r2, [pc, #100]	@ (8007470 <TIM_OC3_SetConfig+0x10c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d113      	bne.n	8007436 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800741c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	621a      	str	r2, [r3, #32]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	fffeff8f 	.word	0xfffeff8f
 8007460:	40010000 	.word	0x40010000
 8007464:	40010400 	.word	0x40010400
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4b24      	ldr	r3, [pc, #144]	@ (8007530 <TIM_OC4_SetConfig+0xbc>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	031b      	lsls	r3, r3, #12
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a19      	ldr	r2, [pc, #100]	@ (8007534 <TIM_OC4_SetConfig+0xc0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00f      	beq.n	80074f4 <TIM_OC4_SetConfig+0x80>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a18      	ldr	r2, [pc, #96]	@ (8007538 <TIM_OC4_SetConfig+0xc4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00b      	beq.n	80074f4 <TIM_OC4_SetConfig+0x80>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a17      	ldr	r2, [pc, #92]	@ (800753c <TIM_OC4_SetConfig+0xc8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d007      	beq.n	80074f4 <TIM_OC4_SetConfig+0x80>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a16      	ldr	r2, [pc, #88]	@ (8007540 <TIM_OC4_SetConfig+0xcc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d003      	beq.n	80074f4 <TIM_OC4_SetConfig+0x80>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a15      	ldr	r2, [pc, #84]	@ (8007544 <TIM_OC4_SetConfig+0xd0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d109      	bne.n	8007508 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	019b      	lsls	r3, r3, #6
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	feff8fff 	.word	0xfeff8fff
 8007534:	40010000 	.word	0x40010000
 8007538:	40010400 	.word	0x40010400
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400
 8007544:	40014800 	.word	0x40014800

08007548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4b21      	ldr	r3, [pc, #132]	@ (80075f8 <TIM_OC5_SetConfig+0xb0>)
 8007574:	4013      	ands	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007588:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a18      	ldr	r2, [pc, #96]	@ (80075fc <TIM_OC5_SetConfig+0xb4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00f      	beq.n	80075be <TIM_OC5_SetConfig+0x76>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a17      	ldr	r2, [pc, #92]	@ (8007600 <TIM_OC5_SetConfig+0xb8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_OC5_SetConfig+0x76>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a16      	ldr	r2, [pc, #88]	@ (8007604 <TIM_OC5_SetConfig+0xbc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_OC5_SetConfig+0x76>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a15      	ldr	r2, [pc, #84]	@ (8007608 <TIM_OC5_SetConfig+0xc0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_OC5_SetConfig+0x76>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a14      	ldr	r2, [pc, #80]	@ (800760c <TIM_OC5_SetConfig+0xc4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d109      	bne.n	80075d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	021b      	lsls	r3, r3, #8
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	621a      	str	r2, [r3, #32]
}
 80075ec:	bf00      	nop
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	fffeff8f 	.word	0xfffeff8f
 80075fc:	40010000 	.word	0x40010000
 8007600:	40010400 	.word	0x40010400
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800

08007610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4b22      	ldr	r3, [pc, #136]	@ (80076c4 <TIM_OC6_SetConfig+0xb4>)
 800763c:	4013      	ands	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	051b      	lsls	r3, r3, #20
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a19      	ldr	r2, [pc, #100]	@ (80076c8 <TIM_OC6_SetConfig+0xb8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00f      	beq.n	8007688 <TIM_OC6_SetConfig+0x78>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a18      	ldr	r2, [pc, #96]	@ (80076cc <TIM_OC6_SetConfig+0xbc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00b      	beq.n	8007688 <TIM_OC6_SetConfig+0x78>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a17      	ldr	r2, [pc, #92]	@ (80076d0 <TIM_OC6_SetConfig+0xc0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_OC6_SetConfig+0x78>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a16      	ldr	r2, [pc, #88]	@ (80076d4 <TIM_OC6_SetConfig+0xc4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC6_SetConfig+0x78>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a15      	ldr	r2, [pc, #84]	@ (80076d8 <TIM_OC6_SetConfig+0xc8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d109      	bne.n	800769c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800768e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	feff8fff 	.word	0xfeff8fff
 80076c8:	40010000 	.word	0x40010000
 80076cc:	40010400 	.word	0x40010400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40014400 	.word	0x40014400
 80076d8:	40014800 	.word	0x40014800

080076dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f023 030a 	bic.w	r3, r3, #10
 8007718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800773a:	b480      	push	{r7}
 800773c:	b087      	sub	sp, #28
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f023 0210 	bic.w	r2, r3, #16
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	031b      	lsls	r3, r3, #12
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007776:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	621a      	str	r2, [r3, #32]
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <TIM_ITRx_SetConfig+0x38>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f043 0307 	orr.w	r3, r3, #7
 80077be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	609a      	str	r2, [r3, #8]
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	ffcfff8f 	.word	0xffcfff8f

080077d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	021a      	lsls	r2, r3, #8
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4313      	orrs	r3, r2
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	609a      	str	r2, [r3, #8]
}
 800780c:	bf00      	nop
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	2201      	movs	r2, #1
 800782c:	fa02 f303 	lsl.w	r3, r2, r3
 8007830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	43db      	mvns	r3, r3
 800783a:	401a      	ands	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f003 031f 	and.w	r3, r3, #31
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	fa01 f303 	lsl.w	r3, r1, r3
 8007850:	431a      	orrs	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
	...

08007864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007878:	2302      	movs	r3, #2
 800787a:	e06d      	b.n	8007958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a30      	ldr	r2, [pc, #192]	@ (8007964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a20      	ldr	r2, [pc, #128]	@ (8007964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d022      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ee:	d01d      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	@ (800796c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1a      	ldr	r2, [pc, #104]	@ (8007974 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a15      	ldr	r2, [pc, #84]	@ (8007968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a16      	ldr	r2, [pc, #88]	@ (8007978 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a15      	ldr	r2, [pc, #84]	@ (800797c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d10c      	bne.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	4313      	orrs	r3, r2
 800793c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40010000 	.word	0x40010000
 8007968:	40010400 	.word	0x40010400
 800796c:	40000400 	.word	0x40000400
 8007970:	40000800 	.word	0x40000800
 8007974:	40000c00 	.word	0x40000c00
 8007978:	40001800 	.word	0x40001800
 800797c:	40014000 	.word	0x40014000

08007980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e042      	b.n	8007a54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7f9 fd89 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2224      	movs	r2, #36	@ 0x24
 80079ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fa44 	bl	8008e94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fcd9 	bl	80083c4 <UART_SetConfig>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e01b      	b.n	8007a54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 fac3 	bl	8008fd8 <UART_CheckIdleState>
 8007a52:	4603      	mov	r3, r0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	@ 0x28
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d17b      	bne.n	8007b6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_UART_Transmit+0x26>
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e074      	b.n	8007b70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2221      	movs	r2, #33	@ 0x21
 8007a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a96:	f7fa f817 	bl	8001ac8 <HAL_GetTick>
 8007a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	88fa      	ldrh	r2, [r7, #6]
 8007aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ab4:	d108      	bne.n	8007ac8 <HAL_UART_Transmit+0x6c>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	e003      	b.n	8007ad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ad0:	e030      	b.n	8007b34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2180      	movs	r1, #128	@ 0x80
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 fb25 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e03d      	b.n	8007b70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	61bb      	str	r3, [r7, #24]
 8007b10:	e007      	b.n	8007b22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1c8      	bne.n	8007ad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	2140      	movs	r1, #64	@ 0x40
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f001 faee 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e006      	b.n	8007b70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	@ 0x28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d137      	bne.n	8007c00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_UART_Receive_IT+0x24>
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e030      	b.n	8007c02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <HAL_UART_Receive_IT+0x94>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d01f      	beq.n	8007bf0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	613b      	str	r3, [r7, #16]
   return(result);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	623b      	str	r3, [r7, #32]
 8007bde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	69f9      	ldr	r1, [r7, #28]
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e6      	bne.n	8007bbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f001 fb06 	bl	8009208 <UART_Start_Receive_IT>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	e000      	b.n	8007c02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c00:	2302      	movs	r3, #2
  }
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3728      	adds	r7, #40	@ 0x28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	58000c00 	.word	0x58000c00

08007c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b0ba      	sub	sp, #232	@ 0xe8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c3e:	4013      	ands	r3, r2
 8007c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11b      	bne.n	8007c84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d015      	beq.n	8007c84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	f003 0320 	and.w	r3, r3, #32
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8377 	beq.w	8008368 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      }
      return;
 8007c82:	e371      	b.n	8008368 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8123 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c92:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec8 <HAL_UART_IRQHandler+0x2b8>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8007ecc <HAL_UART_IRQHandler+0x2bc>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 8116 	beq.w	8007ed4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d011      	beq.n	8007cd8 <HAL_UART_IRQHandler+0xc8>
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cce:	f043 0201 	orr.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d011      	beq.n	8007d08 <HAL_UART_IRQHandler+0xf8>
 8007ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfe:	f043 0204 	orr.w	r2, r3, #4
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d011      	beq.n	8007d38 <HAL_UART_IRQHandler+0x128>
 8007d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2204      	movs	r2, #4
 8007d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2e:	f043 0202 	orr.w	r2, r3, #2
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d3c:	f003 0308 	and.w	r3, r3, #8
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d105      	bne.n	8007d5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d54:	4b5c      	ldr	r3, [pc, #368]	@ (8007ec8 <HAL_UART_IRQHandler+0x2b8>)
 8007d56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2208      	movs	r2, #8
 8007d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6a:	f043 0208 	orr.w	r2, r3, #8
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d012      	beq.n	8007da6 <HAL_UART_IRQHandler+0x196>
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00c      	beq.n	8007da6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 82dd 	beq.w	800836c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d013      	beq.n	8007de6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfa:	2b40      	cmp	r3, #64	@ 0x40
 8007dfc:	d005      	beq.n	8007e0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d054      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fb1e 	bl	800944c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d146      	bne.n	8007eac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1d9      	bne.n	8007e1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e7a:	4a15      	ldr	r2, [pc, #84]	@ (8007ed0 <HAL_UART_IRQHandler+0x2c0>)
 8007e7c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fa fa9d 	bl	80023c4 <HAL_DMA_Abort_IT>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d019      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea2:	e00f      	b.n	8007ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa77 	bl	8008398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eaa:	e00b      	b.n	8007ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fa73 	bl	8008398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb2:	e007      	b.n	8007ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fa6f 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ec2:	e253      	b.n	800836c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec4:	bf00      	nop
    return;
 8007ec6:	e251      	b.n	800836c <HAL_UART_IRQHandler+0x75c>
 8007ec8:	10000001 	.word	0x10000001
 8007ecc:	04000120 	.word	0x04000120
 8007ed0:	08009519 	.word	0x08009519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	f040 81e7 	bne.w	80082ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 81e0 	beq.w	80082ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 81d9 	beq.w	80082ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2210      	movs	r2, #16
 8007f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	f040 8151 	bne.w	80081b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a96      	ldr	r2, [pc, #600]	@ (8008174 <HAL_UART_IRQHandler+0x564>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d068      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a93      	ldr	r2, [pc, #588]	@ (8008178 <HAL_UART_IRQHandler+0x568>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d061      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a91      	ldr	r2, [pc, #580]	@ (800817c <HAL_UART_IRQHandler+0x56c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d05a      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a8e      	ldr	r2, [pc, #568]	@ (8008180 <HAL_UART_IRQHandler+0x570>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d053      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a8c      	ldr	r2, [pc, #560]	@ (8008184 <HAL_UART_IRQHandler+0x574>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d04c      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a89      	ldr	r2, [pc, #548]	@ (8008188 <HAL_UART_IRQHandler+0x578>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d045      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a87      	ldr	r2, [pc, #540]	@ (800818c <HAL_UART_IRQHandler+0x57c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d03e      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a84      	ldr	r2, [pc, #528]	@ (8008190 <HAL_UART_IRQHandler+0x580>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d037      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a82      	ldr	r2, [pc, #520]	@ (8008194 <HAL_UART_IRQHandler+0x584>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d030      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a7f      	ldr	r2, [pc, #508]	@ (8008198 <HAL_UART_IRQHandler+0x588>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d029      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a7d      	ldr	r2, [pc, #500]	@ (800819c <HAL_UART_IRQHandler+0x58c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a7a      	ldr	r2, [pc, #488]	@ (80081a0 <HAL_UART_IRQHandler+0x590>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01b      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a78      	ldr	r2, [pc, #480]	@ (80081a4 <HAL_UART_IRQHandler+0x594>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d014      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a75      	ldr	r2, [pc, #468]	@ (80081a8 <HAL_UART_IRQHandler+0x598>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00d      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a73      	ldr	r2, [pc, #460]	@ (80081ac <HAL_UART_IRQHandler+0x59c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d006      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x3e2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a70      	ldr	r2, [pc, #448]	@ (80081b0 <HAL_UART_IRQHandler+0x5a0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d106      	bne.n	8008000 <HAL_UART_IRQHandler+0x3f0>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	e005      	b.n	800800c <HAL_UART_IRQHandler+0x3fc>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 81ab 	beq.w	8008370 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008020:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008024:	429a      	cmp	r2, r3
 8008026:	f080 81a3 	bcs.w	8008370 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008030:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008040:	f000 8087 	beq.w	8008152 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800805c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800806e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008072:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800807a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1da      	bne.n	8008044 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800809e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080a0:	f023 0301 	bic.w	r3, r3, #1
 80080a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e1      	bne.n	800808e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e3      	bne.n	80080ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800811e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008120:	f023 0310 	bic.w	r3, r3, #16
 8008124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008132:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008134:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008138:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e4      	bne.n	8008110 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800814c:	4618      	mov	r0, r3
 800814e:	f7f9 fe1b 	bl	8001d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008164:	b29b      	uxth	r3, r3
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	b29b      	uxth	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f91d 	bl	80083ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008172:	e0fd      	b.n	8008370 <HAL_UART_IRQHandler+0x760>
 8008174:	40020010 	.word	0x40020010
 8008178:	40020028 	.word	0x40020028
 800817c:	40020040 	.word	0x40020040
 8008180:	40020058 	.word	0x40020058
 8008184:	40020070 	.word	0x40020070
 8008188:	40020088 	.word	0x40020088
 800818c:	400200a0 	.word	0x400200a0
 8008190:	400200b8 	.word	0x400200b8
 8008194:	40020410 	.word	0x40020410
 8008198:	40020428 	.word	0x40020428
 800819c:	40020440 	.word	0x40020440
 80081a0:	40020458 	.word	0x40020458
 80081a4:	40020470 	.word	0x40020470
 80081a8:	40020488 	.word	0x40020488
 80081ac:	400204a0 	.word	0x400204a0
 80081b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80cf 	beq.w	8008374 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80081d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80ca 	beq.w	8008374 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008202:	647b      	str	r3, [r7, #68]	@ 0x44
 8008204:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e4      	bne.n	80081e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	623b      	str	r3, [r7, #32]
   return(result);
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	4b55      	ldr	r3, [pc, #340]	@ (8008380 <HAL_UART_IRQHandler+0x770>)
 800822a:	4013      	ands	r3, r2
 800822c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800823a:	633a      	str	r2, [r7, #48]	@ 0x30
 800823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e3      	bne.n	8008216 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0310 	bic.w	r3, r3, #16
 8008276:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008284:	61fb      	str	r3, [r7, #28]
 8008286:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008288:	69b9      	ldr	r1, [r7, #24]
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	e841 2300 	strex	r3, r2, [r1]
 8008290:	617b      	str	r3, [r7, #20]
   return(result);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e4      	bne.n	8008262 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800829e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f881 	bl	80083ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082aa:	e063      	b.n	8008374 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <HAL_UART_IRQHandler+0x6c6>
 80082b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d008      	beq.n	80082d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80082cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fe80 	bl	8009fd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082d4:	e051      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d014      	beq.n	800830c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80082ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d03a      	beq.n	8008378 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
    }
    return;
 800830a:	e035      	b.n	8008378 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <HAL_UART_IRQHandler+0x71c>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f90d 	bl	8009544 <UART_EndTransmit_IT>
    return;
 800832a:	e026      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800832c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <HAL_UART_IRQHandler+0x73c>
 8008338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800833c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fe59 	bl	8009ffc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800834a:	e016      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d010      	beq.n	800837a <HAL_UART_IRQHandler+0x76a>
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835c:	2b00      	cmp	r3, #0
 800835e:	da0c      	bge.n	800837a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fe41 	bl	8009fe8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008366:	e008      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
      return;
 8008368:	bf00      	nop
 800836a:	e006      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
    return;
 800836c:	bf00      	nop
 800836e:	e004      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
      return;
 8008370:	bf00      	nop
 8008372:	e002      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
      return;
 8008374:	bf00      	nop
 8008376:	e000      	b.n	800837a <HAL_UART_IRQHandler+0x76a>
    return;
 8008378:	bf00      	nop
  }
}
 800837a:	37e8      	adds	r7, #232	@ 0xe8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	effffffe 	.word	0xeffffffe

08008384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083c8:	b092      	sub	sp, #72	@ 0x48
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	431a      	orrs	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4bbe      	ldr	r3, [pc, #760]	@ (80086ec <UART_SetConfig+0x328>)
 80083f4:	4013      	ands	r3, r2
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	6812      	ldr	r2, [r2, #0]
 80083fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083fc:	430b      	orrs	r3, r1
 80083fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4ab3      	ldr	r2, [pc, #716]	@ (80086f0 <UART_SetConfig+0x32c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800842c:	4313      	orrs	r3, r2
 800842e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	4baf      	ldr	r3, [pc, #700]	@ (80086f4 <UART_SetConfig+0x330>)
 8008438:	4013      	ands	r3, r2
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008440:	430b      	orrs	r3, r1
 8008442:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844a:	f023 010f 	bic.w	r1, r3, #15
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4aa6      	ldr	r2, [pc, #664]	@ (80086f8 <UART_SetConfig+0x334>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d177      	bne.n	8008554 <UART_SetConfig+0x190>
 8008464:	4ba5      	ldr	r3, [pc, #660]	@ (80086fc <UART_SetConfig+0x338>)
 8008466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008468:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800846c:	2b28      	cmp	r3, #40	@ 0x28
 800846e:	d86d      	bhi.n	800854c <UART_SetConfig+0x188>
 8008470:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <UART_SetConfig+0xb4>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	0800851d 	.word	0x0800851d
 800847c:	0800854d 	.word	0x0800854d
 8008480:	0800854d 	.word	0x0800854d
 8008484:	0800854d 	.word	0x0800854d
 8008488:	0800854d 	.word	0x0800854d
 800848c:	0800854d 	.word	0x0800854d
 8008490:	0800854d 	.word	0x0800854d
 8008494:	0800854d 	.word	0x0800854d
 8008498:	08008525 	.word	0x08008525
 800849c:	0800854d 	.word	0x0800854d
 80084a0:	0800854d 	.word	0x0800854d
 80084a4:	0800854d 	.word	0x0800854d
 80084a8:	0800854d 	.word	0x0800854d
 80084ac:	0800854d 	.word	0x0800854d
 80084b0:	0800854d 	.word	0x0800854d
 80084b4:	0800854d 	.word	0x0800854d
 80084b8:	0800852d 	.word	0x0800852d
 80084bc:	0800854d 	.word	0x0800854d
 80084c0:	0800854d 	.word	0x0800854d
 80084c4:	0800854d 	.word	0x0800854d
 80084c8:	0800854d 	.word	0x0800854d
 80084cc:	0800854d 	.word	0x0800854d
 80084d0:	0800854d 	.word	0x0800854d
 80084d4:	0800854d 	.word	0x0800854d
 80084d8:	08008535 	.word	0x08008535
 80084dc:	0800854d 	.word	0x0800854d
 80084e0:	0800854d 	.word	0x0800854d
 80084e4:	0800854d 	.word	0x0800854d
 80084e8:	0800854d 	.word	0x0800854d
 80084ec:	0800854d 	.word	0x0800854d
 80084f0:	0800854d 	.word	0x0800854d
 80084f4:	0800854d 	.word	0x0800854d
 80084f8:	0800853d 	.word	0x0800853d
 80084fc:	0800854d 	.word	0x0800854d
 8008500:	0800854d 	.word	0x0800854d
 8008504:	0800854d 	.word	0x0800854d
 8008508:	0800854d 	.word	0x0800854d
 800850c:	0800854d 	.word	0x0800854d
 8008510:	0800854d 	.word	0x0800854d
 8008514:	0800854d 	.word	0x0800854d
 8008518:	08008545 	.word	0x08008545
 800851c:	2301      	movs	r3, #1
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e222      	b.n	800896a <UART_SetConfig+0x5a6>
 8008524:	2304      	movs	r3, #4
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e21e      	b.n	800896a <UART_SetConfig+0x5a6>
 800852c:	2308      	movs	r3, #8
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e21a      	b.n	800896a <UART_SetConfig+0x5a6>
 8008534:	2310      	movs	r3, #16
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e216      	b.n	800896a <UART_SetConfig+0x5a6>
 800853c:	2320      	movs	r3, #32
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e212      	b.n	800896a <UART_SetConfig+0x5a6>
 8008544:	2340      	movs	r3, #64	@ 0x40
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e20e      	b.n	800896a <UART_SetConfig+0x5a6>
 800854c:	2380      	movs	r3, #128	@ 0x80
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e20a      	b.n	800896a <UART_SetConfig+0x5a6>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a69      	ldr	r2, [pc, #420]	@ (8008700 <UART_SetConfig+0x33c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d130      	bne.n	80085c0 <UART_SetConfig+0x1fc>
 800855e:	4b67      	ldr	r3, [pc, #412]	@ (80086fc <UART_SetConfig+0x338>)
 8008560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	2b05      	cmp	r3, #5
 8008568:	d826      	bhi.n	80085b8 <UART_SetConfig+0x1f4>
 800856a:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <UART_SetConfig+0x1ac>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008589 	.word	0x08008589
 8008574:	08008591 	.word	0x08008591
 8008578:	08008599 	.word	0x08008599
 800857c:	080085a1 	.word	0x080085a1
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085b1 	.word	0x080085b1
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e1ec      	b.n	800896a <UART_SetConfig+0x5a6>
 8008590:	2304      	movs	r3, #4
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e1e8      	b.n	800896a <UART_SetConfig+0x5a6>
 8008598:	2308      	movs	r3, #8
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e1e4      	b.n	800896a <UART_SetConfig+0x5a6>
 80085a0:	2310      	movs	r3, #16
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e1e0      	b.n	800896a <UART_SetConfig+0x5a6>
 80085a8:	2320      	movs	r3, #32
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e1dc      	b.n	800896a <UART_SetConfig+0x5a6>
 80085b0:	2340      	movs	r3, #64	@ 0x40
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e1d8      	b.n	800896a <UART_SetConfig+0x5a6>
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e1d4      	b.n	800896a <UART_SetConfig+0x5a6>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a4f      	ldr	r2, [pc, #316]	@ (8008704 <UART_SetConfig+0x340>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d130      	bne.n	800862c <UART_SetConfig+0x268>
 80085ca:	4b4c      	ldr	r3, [pc, #304]	@ (80086fc <UART_SetConfig+0x338>)
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d826      	bhi.n	8008624 <UART_SetConfig+0x260>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <UART_SetConfig+0x218>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	080085f5 	.word	0x080085f5
 80085e0:	080085fd 	.word	0x080085fd
 80085e4:	08008605 	.word	0x08008605
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	08008615 	.word	0x08008615
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e1b6      	b.n	800896a <UART_SetConfig+0x5a6>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e1b2      	b.n	800896a <UART_SetConfig+0x5a6>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e1ae      	b.n	800896a <UART_SetConfig+0x5a6>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e1aa      	b.n	800896a <UART_SetConfig+0x5a6>
 8008614:	2320      	movs	r3, #32
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e1a6      	b.n	800896a <UART_SetConfig+0x5a6>
 800861c:	2340      	movs	r3, #64	@ 0x40
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e1a2      	b.n	800896a <UART_SetConfig+0x5a6>
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e19e      	b.n	800896a <UART_SetConfig+0x5a6>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a35      	ldr	r2, [pc, #212]	@ (8008708 <UART_SetConfig+0x344>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d130      	bne.n	8008698 <UART_SetConfig+0x2d4>
 8008636:	4b31      	ldr	r3, [pc, #196]	@ (80086fc <UART_SetConfig+0x338>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b05      	cmp	r3, #5
 8008640:	d826      	bhi.n	8008690 <UART_SetConfig+0x2cc>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <UART_SetConfig+0x284>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008661 	.word	0x08008661
 800864c:	08008669 	.word	0x08008669
 8008650:	08008671 	.word	0x08008671
 8008654:	08008679 	.word	0x08008679
 8008658:	08008681 	.word	0x08008681
 800865c:	08008689 	.word	0x08008689
 8008660:	2300      	movs	r3, #0
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e180      	b.n	800896a <UART_SetConfig+0x5a6>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e17c      	b.n	800896a <UART_SetConfig+0x5a6>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e178      	b.n	800896a <UART_SetConfig+0x5a6>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e174      	b.n	800896a <UART_SetConfig+0x5a6>
 8008680:	2320      	movs	r3, #32
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e170      	b.n	800896a <UART_SetConfig+0x5a6>
 8008688:	2340      	movs	r3, #64	@ 0x40
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e16c      	b.n	800896a <UART_SetConfig+0x5a6>
 8008690:	2380      	movs	r3, #128	@ 0x80
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e168      	b.n	800896a <UART_SetConfig+0x5a6>
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <UART_SetConfig+0x348>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d142      	bne.n	8008728 <UART_SetConfig+0x364>
 80086a2:	4b16      	ldr	r3, [pc, #88]	@ (80086fc <UART_SetConfig+0x338>)
 80086a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d838      	bhi.n	8008720 <UART_SetConfig+0x35c>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <UART_SetConfig+0x2f0>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	08008711 	.word	0x08008711
 80086c8:	08008719 	.word	0x08008719
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e14a      	b.n	800896a <UART_SetConfig+0x5a6>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e146      	b.n	800896a <UART_SetConfig+0x5a6>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e142      	b.n	800896a <UART_SetConfig+0x5a6>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e13e      	b.n	800896a <UART_SetConfig+0x5a6>
 80086ec:	cfff69f3 	.word	0xcfff69f3
 80086f0:	58000c00 	.word	0x58000c00
 80086f4:	11fff4ff 	.word	0x11fff4ff
 80086f8:	40011000 	.word	0x40011000
 80086fc:	58024400 	.word	0x58024400
 8008700:	40004400 	.word	0x40004400
 8008704:	40004800 	.word	0x40004800
 8008708:	40004c00 	.word	0x40004c00
 800870c:	40005000 	.word	0x40005000
 8008710:	2320      	movs	r3, #32
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e128      	b.n	800896a <UART_SetConfig+0x5a6>
 8008718:	2340      	movs	r3, #64	@ 0x40
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e124      	b.n	800896a <UART_SetConfig+0x5a6>
 8008720:	2380      	movs	r3, #128	@ 0x80
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e120      	b.n	800896a <UART_SetConfig+0x5a6>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4acb      	ldr	r2, [pc, #812]	@ (8008a5c <UART_SetConfig+0x698>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d176      	bne.n	8008820 <UART_SetConfig+0x45c>
 8008732:	4bcb      	ldr	r3, [pc, #812]	@ (8008a60 <UART_SetConfig+0x69c>)
 8008734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800873a:	2b28      	cmp	r3, #40	@ 0x28
 800873c:	d86c      	bhi.n	8008818 <UART_SetConfig+0x454>
 800873e:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <UART_SetConfig+0x380>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	080087e9 	.word	0x080087e9
 8008748:	08008819 	.word	0x08008819
 800874c:	08008819 	.word	0x08008819
 8008750:	08008819 	.word	0x08008819
 8008754:	08008819 	.word	0x08008819
 8008758:	08008819 	.word	0x08008819
 800875c:	08008819 	.word	0x08008819
 8008760:	08008819 	.word	0x08008819
 8008764:	080087f1 	.word	0x080087f1
 8008768:	08008819 	.word	0x08008819
 800876c:	08008819 	.word	0x08008819
 8008770:	08008819 	.word	0x08008819
 8008774:	08008819 	.word	0x08008819
 8008778:	08008819 	.word	0x08008819
 800877c:	08008819 	.word	0x08008819
 8008780:	08008819 	.word	0x08008819
 8008784:	080087f9 	.word	0x080087f9
 8008788:	08008819 	.word	0x08008819
 800878c:	08008819 	.word	0x08008819
 8008790:	08008819 	.word	0x08008819
 8008794:	08008819 	.word	0x08008819
 8008798:	08008819 	.word	0x08008819
 800879c:	08008819 	.word	0x08008819
 80087a0:	08008819 	.word	0x08008819
 80087a4:	08008801 	.word	0x08008801
 80087a8:	08008819 	.word	0x08008819
 80087ac:	08008819 	.word	0x08008819
 80087b0:	08008819 	.word	0x08008819
 80087b4:	08008819 	.word	0x08008819
 80087b8:	08008819 	.word	0x08008819
 80087bc:	08008819 	.word	0x08008819
 80087c0:	08008819 	.word	0x08008819
 80087c4:	08008809 	.word	0x08008809
 80087c8:	08008819 	.word	0x08008819
 80087cc:	08008819 	.word	0x08008819
 80087d0:	08008819 	.word	0x08008819
 80087d4:	08008819 	.word	0x08008819
 80087d8:	08008819 	.word	0x08008819
 80087dc:	08008819 	.word	0x08008819
 80087e0:	08008819 	.word	0x08008819
 80087e4:	08008811 	.word	0x08008811
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e0bc      	b.n	800896a <UART_SetConfig+0x5a6>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e0b8      	b.n	800896a <UART_SetConfig+0x5a6>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e0b4      	b.n	800896a <UART_SetConfig+0x5a6>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e0b0      	b.n	800896a <UART_SetConfig+0x5a6>
 8008808:	2320      	movs	r3, #32
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e0ac      	b.n	800896a <UART_SetConfig+0x5a6>
 8008810:	2340      	movs	r3, #64	@ 0x40
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e0a8      	b.n	800896a <UART_SetConfig+0x5a6>
 8008818:	2380      	movs	r3, #128	@ 0x80
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e0a4      	b.n	800896a <UART_SetConfig+0x5a6>
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a8f      	ldr	r2, [pc, #572]	@ (8008a64 <UART_SetConfig+0x6a0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d130      	bne.n	800888c <UART_SetConfig+0x4c8>
 800882a:	4b8d      	ldr	r3, [pc, #564]	@ (8008a60 <UART_SetConfig+0x69c>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b05      	cmp	r3, #5
 8008834:	d826      	bhi.n	8008884 <UART_SetConfig+0x4c0>
 8008836:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <UART_SetConfig+0x478>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008855 	.word	0x08008855
 8008840:	0800885d 	.word	0x0800885d
 8008844:	08008865 	.word	0x08008865
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008875 	.word	0x08008875
 8008850:	0800887d 	.word	0x0800887d
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e086      	b.n	800896a <UART_SetConfig+0x5a6>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e082      	b.n	800896a <UART_SetConfig+0x5a6>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e07e      	b.n	800896a <UART_SetConfig+0x5a6>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e07a      	b.n	800896a <UART_SetConfig+0x5a6>
 8008874:	2320      	movs	r3, #32
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e076      	b.n	800896a <UART_SetConfig+0x5a6>
 800887c:	2340      	movs	r3, #64	@ 0x40
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e072      	b.n	800896a <UART_SetConfig+0x5a6>
 8008884:	2380      	movs	r3, #128	@ 0x80
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e06e      	b.n	800896a <UART_SetConfig+0x5a6>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a75      	ldr	r2, [pc, #468]	@ (8008a68 <UART_SetConfig+0x6a4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d130      	bne.n	80088f8 <UART_SetConfig+0x534>
 8008896:	4b72      	ldr	r3, [pc, #456]	@ (8008a60 <UART_SetConfig+0x69c>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d826      	bhi.n	80088f0 <UART_SetConfig+0x52c>
 80088a2:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <UART_SetConfig+0x4e4>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088e1 	.word	0x080088e1
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e050      	b.n	800896a <UART_SetConfig+0x5a6>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e04c      	b.n	800896a <UART_SetConfig+0x5a6>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e048      	b.n	800896a <UART_SetConfig+0x5a6>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e044      	b.n	800896a <UART_SetConfig+0x5a6>
 80088e0:	2320      	movs	r3, #32
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e040      	b.n	800896a <UART_SetConfig+0x5a6>
 80088e8:	2340      	movs	r3, #64	@ 0x40
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e03c      	b.n	800896a <UART_SetConfig+0x5a6>
 80088f0:	2380      	movs	r3, #128	@ 0x80
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e038      	b.n	800896a <UART_SetConfig+0x5a6>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a5b      	ldr	r2, [pc, #364]	@ (8008a6c <UART_SetConfig+0x6a8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d130      	bne.n	8008964 <UART_SetConfig+0x5a0>
 8008902:	4b57      	ldr	r3, [pc, #348]	@ (8008a60 <UART_SetConfig+0x69c>)
 8008904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b05      	cmp	r3, #5
 800890c:	d826      	bhi.n	800895c <UART_SetConfig+0x598>
 800890e:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <UART_SetConfig+0x550>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	0800892d 	.word	0x0800892d
 8008918:	08008935 	.word	0x08008935
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008945 	.word	0x08008945
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008955 	.word	0x08008955
 800892c:	2302      	movs	r3, #2
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e01a      	b.n	800896a <UART_SetConfig+0x5a6>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e016      	b.n	800896a <UART_SetConfig+0x5a6>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e012      	b.n	800896a <UART_SetConfig+0x5a6>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e00e      	b.n	800896a <UART_SetConfig+0x5a6>
 800894c:	2320      	movs	r3, #32
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e00a      	b.n	800896a <UART_SetConfig+0x5a6>
 8008954:	2340      	movs	r3, #64	@ 0x40
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e006      	b.n	800896a <UART_SetConfig+0x5a6>
 800895c:	2380      	movs	r3, #128	@ 0x80
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e002      	b.n	800896a <UART_SetConfig+0x5a6>
 8008964:	2380      	movs	r3, #128	@ 0x80
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a6c <UART_SetConfig+0x6a8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	f040 80f8 	bne.w	8008b66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008976:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800897a:	2b20      	cmp	r3, #32
 800897c:	dc46      	bgt.n	8008a0c <UART_SetConfig+0x648>
 800897e:	2b02      	cmp	r3, #2
 8008980:	f2c0 8082 	blt.w	8008a88 <UART_SetConfig+0x6c4>
 8008984:	3b02      	subs	r3, #2
 8008986:	2b1e      	cmp	r3, #30
 8008988:	d87e      	bhi.n	8008a88 <UART_SetConfig+0x6c4>
 800898a:	a201      	add	r2, pc, #4	@ (adr r2, 8008990 <UART_SetConfig+0x5cc>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	08008a13 	.word	0x08008a13
 8008994:	08008a89 	.word	0x08008a89
 8008998:	08008a1b 	.word	0x08008a1b
 800899c:	08008a89 	.word	0x08008a89
 80089a0:	08008a89 	.word	0x08008a89
 80089a4:	08008a89 	.word	0x08008a89
 80089a8:	08008a2b 	.word	0x08008a2b
 80089ac:	08008a89 	.word	0x08008a89
 80089b0:	08008a89 	.word	0x08008a89
 80089b4:	08008a89 	.word	0x08008a89
 80089b8:	08008a89 	.word	0x08008a89
 80089bc:	08008a89 	.word	0x08008a89
 80089c0:	08008a89 	.word	0x08008a89
 80089c4:	08008a89 	.word	0x08008a89
 80089c8:	08008a3b 	.word	0x08008a3b
 80089cc:	08008a89 	.word	0x08008a89
 80089d0:	08008a89 	.word	0x08008a89
 80089d4:	08008a89 	.word	0x08008a89
 80089d8:	08008a89 	.word	0x08008a89
 80089dc:	08008a89 	.word	0x08008a89
 80089e0:	08008a89 	.word	0x08008a89
 80089e4:	08008a89 	.word	0x08008a89
 80089e8:	08008a89 	.word	0x08008a89
 80089ec:	08008a89 	.word	0x08008a89
 80089f0:	08008a89 	.word	0x08008a89
 80089f4:	08008a89 	.word	0x08008a89
 80089f8:	08008a89 	.word	0x08008a89
 80089fc:	08008a89 	.word	0x08008a89
 8008a00:	08008a89 	.word	0x08008a89
 8008a04:	08008a89 	.word	0x08008a89
 8008a08:	08008a7b 	.word	0x08008a7b
 8008a0c:	2b40      	cmp	r3, #64	@ 0x40
 8008a0e:	d037      	beq.n	8008a80 <UART_SetConfig+0x6bc>
 8008a10:	e03a      	b.n	8008a88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a12:	f7fd f885 	bl	8005b20 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a18:	e03c      	b.n	8008a94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fd f894 	bl	8005b4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e034      	b.n	8008a94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a2a:	f107 0318 	add.w	r3, r7, #24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fd f9e0 	bl	8005df4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a38:	e02c      	b.n	8008a94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3a:	4b09      	ldr	r3, [pc, #36]	@ (8008a60 <UART_SetConfig+0x69c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d016      	beq.n	8008a74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a46:	4b06      	ldr	r3, [pc, #24]	@ (8008a60 <UART_SetConfig+0x69c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	08db      	lsrs	r3, r3, #3
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	4a07      	ldr	r2, [pc, #28]	@ (8008a70 <UART_SetConfig+0x6ac>)
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a58:	e01c      	b.n	8008a94 <UART_SetConfig+0x6d0>
 8008a5a:	bf00      	nop
 8008a5c:	40011400 	.word	0x40011400
 8008a60:	58024400 	.word	0x58024400
 8008a64:	40007800 	.word	0x40007800
 8008a68:	40007c00 	.word	0x40007c00
 8008a6c:	58000c00 	.word	0x58000c00
 8008a70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a74:	4b9d      	ldr	r3, [pc, #628]	@ (8008cec <UART_SetConfig+0x928>)
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a78:	e00c      	b.n	8008a94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a7a:	4b9d      	ldr	r3, [pc, #628]	@ (8008cf0 <UART_SetConfig+0x92c>)
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7e:	e009      	b.n	8008a94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a86:	e005      	b.n	8008a94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 81de 	beq.w	8008e58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	4a94      	ldr	r2, [pc, #592]	@ (8008cf4 <UART_SetConfig+0x930>)
 8008aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	4413      	add	r3, r2
 8008aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d305      	bcc.n	8008acc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d903      	bls.n	8008ad4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ad2:	e1c1      	b.n	8008e58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	60bb      	str	r3, [r7, #8]
 8008ada:	60fa      	str	r2, [r7, #12]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	4a84      	ldr	r2, [pc, #528]	@ (8008cf4 <UART_SetConfig+0x930>)
 8008ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	2200      	movs	r2, #0
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008af6:	f7f7 fbf7 	bl	80002e8 <__aeabi_uldivmod>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4610      	mov	r0, r2
 8008b00:	4619      	mov	r1, r3
 8008b02:	f04f 0200 	mov.w	r2, #0
 8008b06:	f04f 0300 	mov.w	r3, #0
 8008b0a:	020b      	lsls	r3, r1, #8
 8008b0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b10:	0202      	lsls	r2, r0, #8
 8008b12:	6979      	ldr	r1, [r7, #20]
 8008b14:	6849      	ldr	r1, [r1, #4]
 8008b16:	0849      	lsrs	r1, r1, #1
 8008b18:	2000      	movs	r0, #0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	eb12 0804 	adds.w	r8, r2, r4
 8008b22:	eb43 0905 	adc.w	r9, r3, r5
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	469a      	mov	sl, r3
 8008b2e:	4693      	mov	fp, r2
 8008b30:	4652      	mov	r2, sl
 8008b32:	465b      	mov	r3, fp
 8008b34:	4640      	mov	r0, r8
 8008b36:	4649      	mov	r1, r9
 8008b38:	f7f7 fbd6 	bl	80002e8 <__aeabi_uldivmod>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4613      	mov	r3, r2
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b4a:	d308      	bcc.n	8008b5e <UART_SetConfig+0x79a>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b52:	d204      	bcs.n	8008b5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b5a:	60da      	str	r2, [r3, #12]
 8008b5c:	e17c      	b.n	8008e58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b64:	e178      	b.n	8008e58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b6e:	f040 80c5 	bne.w	8008cfc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b76:	2b20      	cmp	r3, #32
 8008b78:	dc48      	bgt.n	8008c0c <UART_SetConfig+0x848>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	db7b      	blt.n	8008c76 <UART_SetConfig+0x8b2>
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d879      	bhi.n	8008c76 <UART_SetConfig+0x8b2>
 8008b82:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <UART_SetConfig+0x7c4>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008c13 	.word	0x08008c13
 8008b8c:	08008c1b 	.word	0x08008c1b
 8008b90:	08008c77 	.word	0x08008c77
 8008b94:	08008c77 	.word	0x08008c77
 8008b98:	08008c23 	.word	0x08008c23
 8008b9c:	08008c77 	.word	0x08008c77
 8008ba0:	08008c77 	.word	0x08008c77
 8008ba4:	08008c77 	.word	0x08008c77
 8008ba8:	08008c33 	.word	0x08008c33
 8008bac:	08008c77 	.word	0x08008c77
 8008bb0:	08008c77 	.word	0x08008c77
 8008bb4:	08008c77 	.word	0x08008c77
 8008bb8:	08008c77 	.word	0x08008c77
 8008bbc:	08008c77 	.word	0x08008c77
 8008bc0:	08008c77 	.word	0x08008c77
 8008bc4:	08008c77 	.word	0x08008c77
 8008bc8:	08008c43 	.word	0x08008c43
 8008bcc:	08008c77 	.word	0x08008c77
 8008bd0:	08008c77 	.word	0x08008c77
 8008bd4:	08008c77 	.word	0x08008c77
 8008bd8:	08008c77 	.word	0x08008c77
 8008bdc:	08008c77 	.word	0x08008c77
 8008be0:	08008c77 	.word	0x08008c77
 8008be4:	08008c77 	.word	0x08008c77
 8008be8:	08008c77 	.word	0x08008c77
 8008bec:	08008c77 	.word	0x08008c77
 8008bf0:	08008c77 	.word	0x08008c77
 8008bf4:	08008c77 	.word	0x08008c77
 8008bf8:	08008c77 	.word	0x08008c77
 8008bfc:	08008c77 	.word	0x08008c77
 8008c00:	08008c77 	.word	0x08008c77
 8008c04:	08008c77 	.word	0x08008c77
 8008c08:	08008c69 	.word	0x08008c69
 8008c0c:	2b40      	cmp	r3, #64	@ 0x40
 8008c0e:	d02e      	beq.n	8008c6e <UART_SetConfig+0x8aa>
 8008c10:	e031      	b.n	8008c76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c12:	f7fb fd4f 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8008c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c18:	e033      	b.n	8008c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c1a:	f7fb fd61 	bl	80046e0 <HAL_RCC_GetPCLK2Freq>
 8008c1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c20:	e02f      	b.n	8008c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fc ff90 	bl	8005b4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c30:	e027      	b.n	8008c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c32:	f107 0318 	add.w	r3, r7, #24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fd f8dc 	bl	8005df4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c40:	e01f      	b.n	8008c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c42:	4b2d      	ldr	r3, [pc, #180]	@ (8008cf8 <UART_SetConfig+0x934>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8008cf8 <UART_SetConfig+0x934>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	08db      	lsrs	r3, r3, #3
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	4a24      	ldr	r2, [pc, #144]	@ (8008cec <UART_SetConfig+0x928>)
 8008c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c60:	e00f      	b.n	8008c82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c62:	4b22      	ldr	r3, [pc, #136]	@ (8008cec <UART_SetConfig+0x928>)
 8008c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c66:	e00c      	b.n	8008c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c68:	4b21      	ldr	r3, [pc, #132]	@ (8008cf0 <UART_SetConfig+0x92c>)
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c6c:	e009      	b.n	8008c82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c74:	e005      	b.n	8008c82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 80e7 	beq.w	8008e58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	4a19      	ldr	r2, [pc, #100]	@ (8008cf4 <UART_SetConfig+0x930>)
 8008c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c94:	461a      	mov	r2, r3
 8008c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c9c:	005a      	lsls	r2, r3, #1
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	441a      	add	r2, r3
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	2b0f      	cmp	r3, #15
 8008cb4:	d916      	bls.n	8008ce4 <UART_SetConfig+0x920>
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cbc:	d212      	bcs.n	8008ce4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f023 030f 	bic.w	r3, r3, #15
 8008cc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	e0b9      	b.n	8008e58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cea:	e0b5      	b.n	8008e58 <UART_SetConfig+0xa94>
 8008cec:	03d09000 	.word	0x03d09000
 8008cf0:	003d0900 	.word	0x003d0900
 8008cf4:	0800aa4c 	.word	0x0800aa4c
 8008cf8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cfc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	dc49      	bgt.n	8008d98 <UART_SetConfig+0x9d4>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	db7c      	blt.n	8008e02 <UART_SetConfig+0xa3e>
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d87a      	bhi.n	8008e02 <UART_SetConfig+0xa3e>
 8008d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0x950>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d9f 	.word	0x08008d9f
 8008d18:	08008da7 	.word	0x08008da7
 8008d1c:	08008e03 	.word	0x08008e03
 8008d20:	08008e03 	.word	0x08008e03
 8008d24:	08008daf 	.word	0x08008daf
 8008d28:	08008e03 	.word	0x08008e03
 8008d2c:	08008e03 	.word	0x08008e03
 8008d30:	08008e03 	.word	0x08008e03
 8008d34:	08008dbf 	.word	0x08008dbf
 8008d38:	08008e03 	.word	0x08008e03
 8008d3c:	08008e03 	.word	0x08008e03
 8008d40:	08008e03 	.word	0x08008e03
 8008d44:	08008e03 	.word	0x08008e03
 8008d48:	08008e03 	.word	0x08008e03
 8008d4c:	08008e03 	.word	0x08008e03
 8008d50:	08008e03 	.word	0x08008e03
 8008d54:	08008dcf 	.word	0x08008dcf
 8008d58:	08008e03 	.word	0x08008e03
 8008d5c:	08008e03 	.word	0x08008e03
 8008d60:	08008e03 	.word	0x08008e03
 8008d64:	08008e03 	.word	0x08008e03
 8008d68:	08008e03 	.word	0x08008e03
 8008d6c:	08008e03 	.word	0x08008e03
 8008d70:	08008e03 	.word	0x08008e03
 8008d74:	08008e03 	.word	0x08008e03
 8008d78:	08008e03 	.word	0x08008e03
 8008d7c:	08008e03 	.word	0x08008e03
 8008d80:	08008e03 	.word	0x08008e03
 8008d84:	08008e03 	.word	0x08008e03
 8008d88:	08008e03 	.word	0x08008e03
 8008d8c:	08008e03 	.word	0x08008e03
 8008d90:	08008e03 	.word	0x08008e03
 8008d94:	08008df5 	.word	0x08008df5
 8008d98:	2b40      	cmp	r3, #64	@ 0x40
 8008d9a:	d02e      	beq.n	8008dfa <UART_SetConfig+0xa36>
 8008d9c:	e031      	b.n	8008e02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d9e:	f7fb fc89 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8008da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008da4:	e033      	b.n	8008e0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da6:	f7fb fc9b 	bl	80046e0 <HAL_RCC_GetPCLK2Freq>
 8008daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dac:	e02f      	b.n	8008e0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fc feca 	bl	8005b4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	e027      	b.n	8008e0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbe:	f107 0318 	add.w	r3, r7, #24
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fd f816 	bl	8005df4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dcc:	e01f      	b.n	8008e0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dce:	4b2d      	ldr	r3, [pc, #180]	@ (8008e84 <UART_SetConfig+0xac0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dda:	4b2a      	ldr	r3, [pc, #168]	@ (8008e84 <UART_SetConfig+0xac0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	08db      	lsrs	r3, r3, #3
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	4a28      	ldr	r2, [pc, #160]	@ (8008e88 <UART_SetConfig+0xac4>)
 8008de6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dec:	e00f      	b.n	8008e0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008dee:	4b26      	ldr	r3, [pc, #152]	@ (8008e88 <UART_SetConfig+0xac4>)
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df2:	e00c      	b.n	8008e0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008df4:	4b25      	ldr	r3, [pc, #148]	@ (8008e8c <UART_SetConfig+0xac8>)
 8008df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df8:	e009      	b.n	8008e0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e00:	e005      	b.n	8008e0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e0c:	bf00      	nop
    }

    if (pclk != 0U)
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d021      	beq.n	8008e58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	4a1d      	ldr	r2, [pc, #116]	@ (8008e90 <UART_SetConfig+0xacc>)
 8008e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	441a      	add	r2, r3
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3a:	2b0f      	cmp	r3, #15
 8008e3c:	d909      	bls.n	8008e52 <UART_SetConfig+0xa8e>
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e44:	d205      	bcs.n	8008e52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60da      	str	r2, [r3, #12]
 8008e50:	e002      	b.n	8008e58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2200      	movs	r2, #0
 8008e72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3748      	adds	r7, #72	@ 0x48
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e82:	bf00      	nop
 8008e84:	58024400 	.word	0x58024400
 8008e88:	03d09000 	.word	0x03d09000
 8008e8c:	003d0900 	.word	0x003d0900
 8008e90:	0800aa4c 	.word	0x0800aa4c

08008e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea0:	f003 0308 	and.w	r3, r3, #8
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01a      	beq.n	8008faa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f92:	d10a      	bne.n	8008faa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	605a      	str	r2, [r3, #4]
  }
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b098      	sub	sp, #96	@ 0x60
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fe8:	f7f8 fd6e 	bl	8001ac8 <HAL_GetTick>
 8008fec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d12f      	bne.n	800905c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ffc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009004:	2200      	movs	r2, #0
 8009006:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f88e 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d022      	beq.n	800905c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800902a:	653b      	str	r3, [r7, #80]	@ 0x50
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009034:	647b      	str	r3, [r7, #68]	@ 0x44
 8009036:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800903a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e063      	b.n	8009124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b04      	cmp	r3, #4
 8009068:	d149      	bne.n	80090fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800906a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009072:	2200      	movs	r2, #0
 8009074:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f857 	bl	800912c <UART_WaitOnFlagUntilTimeout>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d03c      	beq.n	80090fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	623b      	str	r3, [r7, #32]
   return(result);
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80090a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e6      	bne.n	8009084 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090d6:	61fa      	str	r2, [r7, #28]
 80090d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	69b9      	ldr	r1, [r7, #24]
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	617b      	str	r3, [r7, #20]
   return(result);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e5      	bne.n	80090b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e012      	b.n	8009124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3758      	adds	r7, #88	@ 0x58
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	4613      	mov	r3, r2
 800913a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913c:	e04f      	b.n	80091de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d04b      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009146:	f7f8 fcbf 	bl	8001ac8 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	429a      	cmp	r2, r3
 8009154:	d302      	bcc.n	800915c <UART_WaitOnFlagUntilTimeout+0x30>
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e04e      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b00      	cmp	r3, #0
 800916c:	d037      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0xb2>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b80      	cmp	r3, #128	@ 0x80
 8009172:	d034      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b40      	cmp	r3, #64	@ 0x40
 8009178:	d031      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	f003 0308 	and.w	r3, r3, #8
 8009184:	2b08      	cmp	r3, #8
 8009186:	d110      	bne.n	80091aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2208      	movs	r2, #8
 800918e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f000 f95b 	bl	800944c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2208      	movs	r2, #8
 800919a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e029      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091b8:	d111      	bne.n	80091de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f941 	bl	800944c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e00f      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4013      	ands	r3, r2
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	bf0c      	ite	eq
 80091ee:	2301      	moveq	r3, #1
 80091f0:	2300      	movne	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d0a0      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009208:	b480      	push	{r7}
 800920a:	b0a3      	sub	sp, #140	@ 0x8c
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	88fa      	ldrh	r2, [r7, #6]
 8009228:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800923a:	d10e      	bne.n	800925a <UART_Start_Receive_IT+0x52>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <UART_Start_Receive_IT+0x48>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800924a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800924e:	e02d      	b.n	80092ac <UART_Start_Receive_IT+0xa4>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	22ff      	movs	r2, #255	@ 0xff
 8009254:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009258:	e028      	b.n	80092ac <UART_Start_Receive_IT+0xa4>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10d      	bne.n	800927e <UART_Start_Receive_IT+0x76>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <UART_Start_Receive_IT+0x6c>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	22ff      	movs	r2, #255	@ 0xff
 800926e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009272:	e01b      	b.n	80092ac <UART_Start_Receive_IT+0xa4>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	227f      	movs	r2, #127	@ 0x7f
 8009278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800927c:	e016      	b.n	80092ac <UART_Start_Receive_IT+0xa4>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009286:	d10d      	bne.n	80092a4 <UART_Start_Receive_IT+0x9c>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <UART_Start_Receive_IT+0x92>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	227f      	movs	r2, #127	@ 0x7f
 8009294:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009298:	e008      	b.n	80092ac <UART_Start_Receive_IT+0xa4>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	223f      	movs	r2, #63	@ 0x3f
 800929e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092a2:	e003      	b.n	80092ac <UART_Start_Receive_IT+0xa4>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2222      	movs	r2, #34	@ 0x22
 80092b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80092cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092e0:	673a      	str	r2, [r7, #112]	@ 0x70
 80092e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80092e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80092ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e3      	bne.n	80092bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092fc:	d14f      	bne.n	800939e <UART_Start_Receive_IT+0x196>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	429a      	cmp	r2, r3
 8009308:	d349      	bcc.n	800939e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009312:	d107      	bne.n	8009324 <UART_Start_Receive_IT+0x11c>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d103      	bne.n	8009324 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a47      	ldr	r2, [pc, #284]	@ (800943c <UART_Start_Receive_IT+0x234>)
 8009320:	675a      	str	r2, [r3, #116]	@ 0x74
 8009322:	e002      	b.n	800932a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a46      	ldr	r2, [pc, #280]	@ (8009440 <UART_Start_Receive_IT+0x238>)
 8009328:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01a      	beq.n	8009368 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009356:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800935a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e4      	bne.n	8009332 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800937e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009388:	64ba      	str	r2, [r7, #72]	@ 0x48
 800938a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800938e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e5      	bne.n	8009368 <UART_Start_Receive_IT+0x160>
 800939c:	e046      	b.n	800942c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093a6:	d107      	bne.n	80093b8 <UART_Start_Receive_IT+0x1b0>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a24      	ldr	r2, [pc, #144]	@ (8009444 <UART_Start_Receive_IT+0x23c>)
 80093b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80093b6:	e002      	b.n	80093be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a23      	ldr	r2, [pc, #140]	@ (8009448 <UART_Start_Receive_IT+0x240>)
 80093bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d019      	beq.n	80093fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80093da:	677b      	str	r3, [r7, #116]	@ 0x74
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e6      	bne.n	80093c6 <UART_Start_Receive_IT+0x1be>
 80093f8:	e018      	b.n	800942c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	613b      	str	r3, [r7, #16]
   return(result);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f043 0320 	orr.w	r3, r3, #32
 800940e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009418:	623b      	str	r3, [r7, #32]
 800941a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	69f9      	ldr	r1, [r7, #28]
 800941e:	6a3a      	ldr	r2, [r7, #32]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	61bb      	str	r3, [r7, #24]
   return(result);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	378c      	adds	r7, #140	@ 0x8c
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	08009c6d 	.word	0x08009c6d
 8009440:	0800990d 	.word	0x0800990d
 8009444:	08009755 	.word	0x08009755
 8009448:	0800959d 	.word	0x0800959d

0800944c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b095      	sub	sp, #84	@ 0x54
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009472:	643b      	str	r3, [r7, #64]	@ 0x40
 8009474:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e6      	bne.n	8009454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3308      	adds	r3, #8
 800948c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	61fb      	str	r3, [r7, #28]
   return(result);
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	4b1e      	ldr	r3, [pc, #120]	@ (8009514 <UART_EndRxTransfer+0xc8>)
 800949a:	4013      	ands	r3, r2
 800949c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3308      	adds	r3, #8
 80094a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e5      	bne.n	8009486 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d118      	bne.n	80094f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f023 0310 	bic.w	r3, r3, #16
 80094d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	6979      	ldr	r1, [r7, #20]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	613b      	str	r3, [r7, #16]
   return(result);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e6      	bne.n	80094c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009508:	bf00      	nop
 800950a:	3754      	adds	r7, #84	@ 0x54
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	effffffe 	.word	0xeffffffe

08009518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7fe ff2e 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	60bb      	str	r3, [r7, #8]
   return(result);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	61bb      	str	r3, [r7, #24]
 800956c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6979      	ldr	r1, [r7, #20]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e6      	bne.n	800954c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2220      	movs	r2, #32
 8009582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7fe fef9 	bl	8008384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009592:	bf00      	nop
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b09c      	sub	sp, #112	@ 0x70
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b4:	2b22      	cmp	r3, #34	@ 0x22
 80095b6:	f040 80be 	bne.w	8009736 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80095c8:	b2d9      	uxtb	r1, r3
 80095ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d4:	400a      	ands	r2, r1
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 80a1 	bne.w	8009746 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009622:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009624:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	667b      	str	r3, [r7, #100]	@ 0x64
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009656:	647a      	str	r2, [r7, #68]	@ 0x44
 8009658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800965c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e5      	bne.n	8009636 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a33      	ldr	r2, [pc, #204]	@ (8009750 <UART_RxISR_8BIT+0x1b4>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d01f      	beq.n	80096c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d018      	beq.n	80096c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	623b      	str	r3, [r7, #32]
   return(result);
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80096b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096bc:	e841 2300 	strex	r3, r2, [r1]
 80096c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e6      	bne.n	8009696 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d12e      	bne.n	800972e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0310 	bic.w	r3, r3, #16
 80096ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096f4:	61fb      	str	r3, [r7, #28]
 80096f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	69b9      	ldr	r1, [r7, #24]
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	617b      	str	r3, [r7, #20]
   return(result);
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e6      	bne.n	80096d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	f003 0310 	and.w	r3, r3, #16
 8009712:	2b10      	cmp	r3, #16
 8009714:	d103      	bne.n	800971e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2210      	movs	r2, #16
 800971c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7fe fe40 	bl	80083ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800972c:	e00b      	b.n	8009746 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f7 fb86 	bl	8000e40 <HAL_UART_RxCpltCallback>
}
 8009734:	e007      	b.n	8009746 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699a      	ldr	r2, [r3, #24]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0208 	orr.w	r2, r2, #8
 8009744:	619a      	str	r2, [r3, #24]
}
 8009746:	bf00      	nop
 8009748:	3770      	adds	r7, #112	@ 0x70
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	58000c00 	.word	0x58000c00

08009754 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b09c      	sub	sp, #112	@ 0x70
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009762:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800976c:	2b22      	cmp	r3, #34	@ 0x22
 800976e:	f040 80be 	bne.w	80098ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009778:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009780:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009782:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009786:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800978a:	4013      	ands	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009790:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009796:	1c9a      	adds	r2, r3, #2
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	3b01      	subs	r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f040 80a1 	bne.w	80098fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097da:	657b      	str	r3, [r7, #84]	@ 0x54
 80097dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e6      	bne.n	80097bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	663b      	str	r3, [r7, #96]	@ 0x60
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800980e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e5      	bne.n	80097ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a33      	ldr	r2, [pc, #204]	@ (8009908 <UART_RxISR_16BIT+0x1b4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d01f      	beq.n	8009880 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d018      	beq.n	8009880 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	e853 3f00 	ldrex	r3, [r3]
 800985a:	61fb      	str	r3, [r7, #28]
   return(result);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	461a      	mov	r2, r3
 800986a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800986e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800987a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e6      	bne.n	800984e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009884:	2b01      	cmp	r3, #1
 8009886:	d12e      	bne.n	80098e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	60bb      	str	r3, [r7, #8]
   return(result);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f023 0310 	bic.w	r3, r3, #16
 80098a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	461a      	mov	r2, r3
 80098aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	6979      	ldr	r1, [r7, #20]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e6      	bne.n	800988e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d103      	bne.n	80098d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2210      	movs	r2, #16
 80098d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7fe fd64 	bl	80083ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e4:	e00b      	b.n	80098fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7f7 faaa 	bl	8000e40 <HAL_UART_RxCpltCallback>
}
 80098ec:	e007      	b.n	80098fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f042 0208 	orr.w	r2, r2, #8
 80098fc:	619a      	str	r2, [r3, #24]
}
 80098fe:	bf00      	nop
 8009900:	3770      	adds	r7, #112	@ 0x70
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	58000c00 	.word	0x58000c00

0800990c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b0ac      	sub	sp, #176	@ 0xb0
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800991a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009942:	2b22      	cmp	r3, #34	@ 0x22
 8009944:	f040 8180 	bne.w	8009c48 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800994e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009952:	e123      	b.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800995e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009962:	b2d9      	uxtb	r1, r3
 8009964:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009968:	b2da      	uxtb	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800996e:	400a      	ands	r2, r1
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009984:	b29b      	uxth	r3, r3
 8009986:	3b01      	subs	r3, #1
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800999a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d053      	beq.n	8009a4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d011      	beq.n	80099d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80099b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00b      	beq.n	80099d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2201      	movs	r2, #1
 80099c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099cc:	f043 0201 	orr.w	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d011      	beq.n	8009a06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00b      	beq.n	8009a06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2202      	movs	r2, #2
 80099f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fc:	f043 0204 	orr.w	r2, r3, #4
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d011      	beq.n	8009a36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2204      	movs	r2, #4
 8009a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a2c:	f043 0202 	orr.w	r2, r3, #2
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7fe fca9 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f040 80a0 	bne.w	8009b9c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a80:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009a84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e4      	bne.n	8009a5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aa4:	4b6e      	ldr	r3, [pc, #440]	@ (8009c60 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ab6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009ab8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009abc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009ac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e3      	bne.n	8009a92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a60      	ldr	r2, [pc, #384]	@ (8009c64 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d021      	beq.n	8009b2c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01a      	beq.n	8009b2c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b1a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e4      	bne.n	8009af6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d130      	bne.n	8009b96 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	f023 0310 	bic.w	r3, r3, #16
 8009b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e4      	bne.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	f003 0310 	and.w	r3, r3, #16
 8009b7a:	2b10      	cmp	r3, #16
 8009b7c:	d103      	bne.n	8009b86 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2210      	movs	r2, #16
 8009b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fe fc0c 	bl	80083ac <HAL_UARTEx_RxEventCallback>
 8009b94:	e002      	b.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7f7 f952 	bl	8000e40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d006      	beq.n	8009bb2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f47f aed1 	bne.w	8009954 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bb8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d049      	beq.n	8009c58 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d242      	bcs.n	8009c58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e3      	bne.n	8009bd2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a16      	ldr	r2, [pc, #88]	@ (8009c68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f043 0320 	orr.w	r3, r3, #32
 8009c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	6979      	ldr	r1, [r7, #20]
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e4      	bne.n	8009c10 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c46:	e007      	b.n	8009c58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0208 	orr.w	r2, r2, #8
 8009c56:	619a      	str	r2, [r3, #24]
}
 8009c58:	bf00      	nop
 8009c5a:	37b0      	adds	r7, #176	@ 0xb0
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	effffffe 	.word	0xeffffffe
 8009c64:	58000c00 	.word	0x58000c00
 8009c68:	0800959d 	.word	0x0800959d

08009c6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b0ae      	sub	sp, #184	@ 0xb8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ca2:	2b22      	cmp	r3, #34	@ 0x22
 8009ca4:	f040 8184 	bne.w	8009fb0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cae:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cb2:	e127      	b.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cba:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009cc6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009cca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009cce:	4013      	ands	r3, r2
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cdc:	1c9a      	adds	r2, r3, #2
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d053      	beq.n	8009db2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d011      	beq.n	8009d3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00b      	beq.n	8009d3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2201      	movs	r2, #1
 8009d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d30:	f043 0201 	orr.w	r2, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d011      	beq.n	8009d6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00b      	beq.n	8009d6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2202      	movs	r2, #2
 8009d58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d60:	f043 0204 	orr.w	r2, r3, #4
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d011      	beq.n	8009d9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00b      	beq.n	8009d9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2204      	movs	r2, #4
 8009d88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d90:	f043 0202 	orr.w	r2, r3, #2
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fe faf7 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f040 80a2 	bne.w	8009f04 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dc8:	e853 3f00 	ldrex	r3, [r3]
 8009dcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009de6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e2      	bne.n	8009dc0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3308      	adds	r3, #8
 8009e00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8009fc8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009e0e:	4013      	ands	r3, r2
 8009e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3308      	adds	r3, #8
 8009e1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e3      	bne.n	8009dfa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a60      	ldr	r2, [pc, #384]	@ (8009fcc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d021      	beq.n	8009e94 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d01a      	beq.n	8009e94 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e82:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e4      	bne.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d130      	bne.n	8009efe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	e853 3f00 	ldrex	r3, [r3]
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb2:	f023 0310 	bic.w	r3, r3, #16
 8009eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ec6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ecc:	e841 2300 	strex	r3, r2, [r1]
 8009ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e4      	bne.n	8009ea2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	f003 0310 	and.w	r3, r3, #16
 8009ee2:	2b10      	cmp	r3, #16
 8009ee4:	d103      	bne.n	8009eee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2210      	movs	r2, #16
 8009eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7fe fa58 	bl	80083ac <HAL_UARTEx_RxEventCallback>
 8009efc:	e002      	b.n	8009f04 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7f6 ff9e 	bl	8000e40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d006      	beq.n	8009f1a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f47f aecd 	bne.w	8009cb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f20:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d049      	beq.n	8009fc0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d242      	bcs.n	8009fc0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	623b      	str	r3, [r7, #32]
   return(result);
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e3      	bne.n	8009f3a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a16      	ldr	r2, [pc, #88]	@ (8009fd0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f043 0320 	orr.w	r3, r3, #32
 8009f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	461a      	mov	r2, r3
 8009f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f9a:	61fb      	str	r3, [r7, #28]
 8009f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	69b9      	ldr	r1, [r7, #24]
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e4      	bne.n	8009f78 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fae:	e007      	b.n	8009fc0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	699a      	ldr	r2, [r3, #24]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f042 0208 	orr.w	r2, r2, #8
 8009fbe:	619a      	str	r2, [r3, #24]
}
 8009fc0:	bf00      	nop
 8009fc2:	37b8      	adds	r7, #184	@ 0xb8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	effffffe 	.word	0xeffffffe
 8009fcc:	58000c00 	.word	0x58000c00
 8009fd0:	08009755 	.word	0x08009755

08009fd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <HAL_UARTEx_DisableFifoMode+0x16>
 800a022:	2302      	movs	r3, #2
 800a024:	e027      	b.n	800a076 <HAL_UARTEx_DisableFifoMode+0x66>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2224      	movs	r2, #36	@ 0x24
 800a032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0201 	bic.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a054:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a096:	2302      	movs	r3, #2
 800a098:	e02d      	b.n	800a0f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2224      	movs	r2, #36	@ 0x24
 800a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f850 	bl	800a17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d101      	bne.n	800a116 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a112:	2302      	movs	r3, #2
 800a114:	e02d      	b.n	800a172 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2224      	movs	r2, #36	@ 0x24
 800a122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f022 0201 	bic.w	r2, r2, #1
 800a13c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f812 	bl	800a17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2220      	movs	r2, #32
 800a164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d108      	bne.n	800a19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a19c:	e031      	b.n	800a202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a19e:	2310      	movs	r3, #16
 800a1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1a2:	2310      	movs	r3, #16
 800a1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	0e5b      	lsrs	r3, r3, #25
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	f003 0307 	and.w	r3, r3, #7
 800a1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	0f5b      	lsrs	r3, r3, #29
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	7b3a      	ldrb	r2, [r7, #12]
 800a1ca:	4911      	ldr	r1, [pc, #68]	@ (800a210 <UARTEx_SetNbDataToProcess+0x94>)
 800a1cc:	5c8a      	ldrb	r2, [r1, r2]
 800a1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1d2:	7b3a      	ldrb	r2, [r7, #12]
 800a1d4:	490f      	ldr	r1, [pc, #60]	@ (800a214 <UARTEx_SetNbDataToProcess+0x98>)
 800a1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	7b7a      	ldrb	r2, [r7, #13]
 800a1e8:	4909      	ldr	r1, [pc, #36]	@ (800a210 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ea:	5c8a      	ldrb	r2, [r1, r2]
 800a1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1f0:	7b7a      	ldrb	r2, [r7, #13]
 800a1f2:	4908      	ldr	r1, [pc, #32]	@ (800a214 <UARTEx_SetNbDataToProcess+0x98>)
 800a1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a202:	bf00      	nop
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	0800aa64 	.word	0x0800aa64
 800a214:	0800aa6c 	.word	0x0800aa6c

0800a218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a218:	b084      	sub	sp, #16
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	f107 001c 	add.w	r0, r7, #28
 800a226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a22a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d121      	bne.n	800a276 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a236:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	4b2c      	ldr	r3, [pc, #176]	@ (800a2f4 <USB_CoreInit+0xdc>)
 800a244:	4013      	ands	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d105      	bne.n	800a26a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 faaa 	bl	800a7c4 <USB_CoreReset>
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]
 800a274:	e01b      	b.n	800a2ae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa9e 	bl	800a7c4 <USB_CoreReset>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a28c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a290:	2b00      	cmp	r3, #0
 800a292:	d106      	bne.n	800a2a2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a298:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a2a0:	e005      	b.n	800a2ae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a2ae:	7fbb      	ldrb	r3, [r7, #30]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d116      	bne.n	800a2e2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f8 <USB_CoreInit+0xe0>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f043 0206 	orr.w	r2, r3, #6
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f043 0220 	orr.w	r2, r3, #32
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2ee:	b004      	add	sp, #16
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	ffbdffbf 	.word	0xffbdffbf
 800a2f8:	03ee0000 	.word	0x03ee0000

0800a2fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f023 0201 	bic.w	r2, r3, #1
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	460b      	mov	r3, r1
 800a328:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d115      	bne.n	800a36c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a34c:	200a      	movs	r0, #10
 800a34e:	f7f7 fbc7 	bl	8001ae0 <HAL_Delay>
      ms += 10U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	330a      	adds	r3, #10
 800a356:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa25 	bl	800a7a8 <USB_GetMode>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b01      	cmp	r3, #1
 800a362:	d01e      	beq.n	800a3a2 <USB_SetCurrentMode+0x84>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2bc7      	cmp	r3, #199	@ 0xc7
 800a368:	d9f0      	bls.n	800a34c <USB_SetCurrentMode+0x2e>
 800a36a:	e01a      	b.n	800a3a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d115      	bne.n	800a39e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a37e:	200a      	movs	r0, #10
 800a380:	f7f7 fbae 	bl	8001ae0 <HAL_Delay>
      ms += 10U;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	330a      	adds	r3, #10
 800a388:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fa0c 	bl	800a7a8 <USB_GetMode>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <USB_SetCurrentMode+0x84>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2bc7      	cmp	r3, #199	@ 0xc7
 800a39a:	d9f0      	bls.n	800a37e <USB_SetCurrentMode+0x60>
 800a39c:	e001      	b.n	800a3a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e005      	b.n	800a3ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2bc8      	cmp	r3, #200	@ 0xc8
 800a3a6:	d101      	bne.n	800a3ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e000      	b.n	800a3ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b086      	sub	sp, #24
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a3c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	613b      	str	r3, [r7, #16]
 800a3d6:	e009      	b.n	800a3ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	3340      	adds	r3, #64	@ 0x40
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b0e      	cmp	r3, #14
 800a3f0:	d9f2      	bls.n	800a3d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d11c      	bne.n	800a434 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a408:	f043 0302 	orr.w	r3, r3, #2
 800a40c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a412:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	e005      	b.n	800a440 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a438:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a446:	461a      	mov	r2, r3
 800a448:	2300      	movs	r3, #0
 800a44a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a44c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a450:	2b01      	cmp	r3, #1
 800a452:	d10d      	bne.n	800a470 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a45c:	2100      	movs	r1, #0
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f968 	bl	800a734 <USB_SetDevSpeed>
 800a464:	e008      	b.n	800a478 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a466:	2101      	movs	r1, #1
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f963 	bl	800a734 <USB_SetDevSpeed>
 800a46e:	e003      	b.n	800a478 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a470:	2103      	movs	r1, #3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f95e 	bl	800a734 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a478:	2110      	movs	r1, #16
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f8fa 	bl	800a674 <USB_FlushTxFifo>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f924 	bl	800a6d8 <USB_FlushRxFifo>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	613b      	str	r3, [r7, #16]
 800a4c2:	e043      	b.n	800a54c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4da:	d118      	bne.n	800a50e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	e013      	b.n	800a520 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a504:	461a      	mov	r2, r3
 800a506:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	e008      	b.n	800a520 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51a:	461a      	mov	r2, r3
 800a51c:	2300      	movs	r3, #0
 800a51e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a52c:	461a      	mov	r2, r3
 800a52e:	2300      	movs	r3, #0
 800a530:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53e:	461a      	mov	r2, r3
 800a540:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a544:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	3301      	adds	r3, #1
 800a54a:	613b      	str	r3, [r7, #16]
 800a54c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a550:	461a      	mov	r2, r3
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	4293      	cmp	r3, r2
 800a556:	d3b5      	bcc.n	800a4c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a558:	2300      	movs	r3, #0
 800a55a:	613b      	str	r3, [r7, #16]
 800a55c:	e043      	b.n	800a5e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a574:	d118      	bne.n	800a5a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10a      	bne.n	800a592 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	461a      	mov	r2, r3
 800a58a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	e013      	b.n	800a5ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	e008      	b.n	800a5ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a5de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	613b      	str	r3, [r7, #16]
 800a5e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d3b5      	bcc.n	800a55e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a604:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a612:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a614:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d105      	bne.n	800a628 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	f043 0210 	orr.w	r2, r3, #16
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	4b0f      	ldr	r3, [pc, #60]	@ (800a66c <USB_DevInit+0x2b4>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a634:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	f043 0208 	orr.w	r2, r3, #8
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a648:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d105      	bne.n	800a65c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	699a      	ldr	r2, [r3, #24]
 800a654:	4b06      	ldr	r3, [pc, #24]	@ (800a670 <USB_DevInit+0x2b8>)
 800a656:	4313      	orrs	r3, r2
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a668:	b004      	add	sp, #16
 800a66a:	4770      	bx	lr
 800a66c:	803c3800 	.word	0x803c3800
 800a670:	40000004 	.word	0x40000004

0800a674 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a68e:	d901      	bls.n	800a694 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e01b      	b.n	800a6cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	daf2      	bge.n	800a682 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	019b      	lsls	r3, r3, #6
 800a6a4:	f043 0220 	orr.w	r2, r3, #32
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6b8:	d901      	bls.n	800a6be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e006      	b.n	800a6cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	f003 0320 	and.w	r3, r3, #32
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	d0f0      	beq.n	800a6ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6f0:	d901      	bls.n	800a6f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e018      	b.n	800a728 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	daf2      	bge.n	800a6e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2210      	movs	r2, #16
 800a706:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3301      	adds	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a714:	d901      	bls.n	800a71a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e006      	b.n	800a728 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	2b10      	cmp	r3, #16
 800a724:	d0f0      	beq.n	800a708 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	68f9      	ldr	r1, [r7, #12]
 800a750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a754:	4313      	orrs	r3, r2
 800a756:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a766:	b480      	push	{r7}
 800a768:	b085      	sub	sp, #20
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a780:	f023 0303 	bic.w	r3, r3, #3
 800a784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a794:	f043 0302 	orr.w	r3, r3, #2
 800a798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	f003 0301 	and.w	r3, r3, #1
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7dc:	d901      	bls.n	800a7e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e01b      	b.n	800a81a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	daf2      	bge.n	800a7d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f043 0201 	orr.w	r2, r3, #1
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a806:	d901      	bls.n	800a80c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e006      	b.n	800a81a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b01      	cmp	r3, #1
 800a816:	d0f0      	beq.n	800a7fa <USB_CoreReset+0x36>

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <memset>:
 800a826:	4402      	add	r2, r0
 800a828:	4603      	mov	r3, r0
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d100      	bne.n	800a830 <memset+0xa>
 800a82e:	4770      	bx	lr
 800a830:	f803 1b01 	strb.w	r1, [r3], #1
 800a834:	e7f9      	b.n	800a82a <memset+0x4>
	...

0800a838 <__libc_init_array>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	4d0d      	ldr	r5, [pc, #52]	@ (800a870 <__libc_init_array+0x38>)
 800a83c:	4c0d      	ldr	r4, [pc, #52]	@ (800a874 <__libc_init_array+0x3c>)
 800a83e:	1b64      	subs	r4, r4, r5
 800a840:	10a4      	asrs	r4, r4, #2
 800a842:	2600      	movs	r6, #0
 800a844:	42a6      	cmp	r6, r4
 800a846:	d109      	bne.n	800a85c <__libc_init_array+0x24>
 800a848:	4d0b      	ldr	r5, [pc, #44]	@ (800a878 <__libc_init_array+0x40>)
 800a84a:	4c0c      	ldr	r4, [pc, #48]	@ (800a87c <__libc_init_array+0x44>)
 800a84c:	f000 f818 	bl	800a880 <_init>
 800a850:	1b64      	subs	r4, r4, r5
 800a852:	10a4      	asrs	r4, r4, #2
 800a854:	2600      	movs	r6, #0
 800a856:	42a6      	cmp	r6, r4
 800a858:	d105      	bne.n	800a866 <__libc_init_array+0x2e>
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a860:	4798      	blx	r3
 800a862:	3601      	adds	r6, #1
 800a864:	e7ee      	b.n	800a844 <__libc_init_array+0xc>
 800a866:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86a:	4798      	blx	r3
 800a86c:	3601      	adds	r6, #1
 800a86e:	e7f2      	b.n	800a856 <__libc_init_array+0x1e>
 800a870:	0800aa7c 	.word	0x0800aa7c
 800a874:	0800aa7c 	.word	0x0800aa7c
 800a878:	0800aa7c 	.word	0x0800aa7c
 800a87c:	0800aa80 	.word	0x0800aa80

0800a880 <_init>:
 800a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a882:	bf00      	nop
 800a884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a886:	bc08      	pop	{r3}
 800a888:	469e      	mov	lr, r3
 800a88a:	4770      	bx	lr

0800a88c <_fini>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	bf00      	nop
 800a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a892:	bc08      	pop	{r3}
 800a894:	469e      	mov	lr, r3
 800a896:	4770      	bx	lr
